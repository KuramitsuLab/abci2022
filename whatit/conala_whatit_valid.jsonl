{"in": "return '{}{}{}{}'.format(*('A' * (4 - len(s[-4:])) + s[-4:]))", "out": "引数展開"}
{"in": "property_asel = [property_a[i] for i in good_indices]", "out": "リスト内包記法 変換"}
{"in": "dest = ''.join(line for line in buffer if line[:1] != '#')", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "self.response.write(current.strftime('%Y-%m-%d %H:%M:%S %Z'))", "out": "日付書式 時刻書式"}
{"in": "super(MediaStorage, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[a for b, a in list(params.items())]", "out": "リスト内包記法 変換"}
{"in": "[(a * b) for a, b in combinations([1, 2, 3, 4], 2)]", "out": "リスト内包記法 変換"}
{"in": "zip(dir(), [eval(var) for var in dir()])[-4:]", "out": "リスト内包記法 変換"}
{"in": "[''.join((myl[i], myl[i + 1])) for i in range(0, len(myl), 2)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "with open('text.txt') as myfile:\n    count = sum(1 for line in myfile)", "out": "リスト内包記法 変換"}
{"in": "[chr(ord(uc)) for uc in udata]", "out": "リスト内包記法 変換"}
{"in": "TEMPLATE_CONTEXT_PROCESSORS = 'django.core.context_processors.static',", "out": "正規表現"}
{"in": "sys.getsizeof(10 ** 10 ** 7)", "out": "累乗演算子"}
{"in": "return all(x == items[0] for x in items)", "out": "リスト内包記法 変換"}
{"in": "df2.columns = pd.MultiIndex.from_tuples(eval(','.join(df2.columns)))", "out": "リストの文字列化"}
{"in": "l[2:6] = [''.join(l[2:6])]", "out": "リストの文字列化"}
{"in": "re.escape('.')", "out": "正規表現"}
{"in": "y = ['{0:0>2}'.format(v) for v in x]", "out": "辞書内包記法"}
{"in": "rs = (grequests.get(u) for u in urls)", "out": "リスト内包記法 変換"}
{"in": "sum(1 for _ in assignments(12, 5))", "out": "リスト内包記法 変換"}
{"in": "[k for k in paragraphs3 if 'Derived:' not in k[2]]", "out": "リスト内包記法 フィルタ"}
{"in": "return decorator_to_enhance(func, *args, **kwargs)", "out": "引数展開"}
{"in": "print([x for x in p.findall(s) if x])", "out": "リスト内包記法 フィルタ"}
{"in": "outfile.write(' '.join(outputline))", "out": "リストの文字列化"}
{"in": "df[(df == 3.2).any(1) & ~df.isin([0.1, 1.2]).any(1)]", "out": "反転演算子"}
{"in": "label_indices = [(labels == i).nonzero() for i in range(1, numL + 1)]", "out": "リスト内包記法 変換"}
{"in": "x = struct.pack(4 * 'B' + 'HB'[ALPHA < 256] + 4 * 'B', *data)", "out": "引数展開"}
{"in": "return (list(g) for k, g in grouped)", "out": "リスト内包記法 変換"}
{"in": "time.asctime(time.strptime('2008 50 1', '%Y %W %w'))", "out": "日付書式"}
{"in": "geopoint = {'latitude': 41.123, 'longitude': 71.091}\nprint('{latitude} {longitude}'.format(**geopoint))", "out": "引数展開"}
{"in": "[a[max(i - 3, 0):i] for i in range(len(a), 0, -3)][::-1]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "[(x * x) for x in range(10)]", "out": "リスト内包記法 変換"}
{"in": "[x for x in ls if c[x] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "y = dict((k.lower(), v) for k, v in x.items())", "out": "辞書内包記法"}
{"in": "return {key: d[key] for key in keys}", "out": "辞書内包記法"}
{"in": "df.applymap('${:,.2f}'.format)", "out": "少数点表示制限"}
{"in": "secnd_tuple_list = [tuple(lst) for lst in secnd_list]", "out": "リスト内包記法 変換"}
{"in": "myString = re.sub('<[^>]*>', ' ', myString)", "out": "正規表現"}
{"in": "return super(CarInline, self).get_formset(*args, **kwargs)", "out": "引数展開"}
{"in": "min(s.find(i) for i in a if i in s)", "out": "リスト内包記法 フィルタ"}
{"in": "min(value for value in [None, 1, 2] if value is not None)", "out": "リスト内包記法 フィルタ"}
{"in": "keys = [k for k, v in list(dict.items()) if v == maxval]", "out": "辞書内包記法"}
{"in": "map(tuple, (N - 1 - np.array(list(combinations(list(range(N)), M))))[::-1])", "out": "逆順の列"}
{"in": "\"\"\"\"\"\".join(string.uppercase[i] if b else ' ' for i, b in enumerate(bools))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "text = ''.join([s for s in code.splitlines(True) if s.strip('\\r\\n')])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "output = [{'name': i, 'score': max(j)} for i, j in list(data.items())]", "out": "辞書内包記法"}
{"in": "print(any(x in regx.split(string) for x in search))", "out": "リスト内包記法 変換"}
{"in": "d = {'1': ['1', '2', '3', '4'], '2': ['1', '4'], '3': ['43', '176']}\nd = {int(k): [int(i) for i in v] for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "[tuple(chain.from_iterable(prod)) for prod in product(*lists)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "print(re.sub('(\\\\\\\\u[0-9A-Fa-f]{1,4})', unescapematch, 'Wi\\\\u2011Fi'))", "out": "正規表現 ユニコード"}
{"in": "[x for x in list(x.items()) if x[1] == 'A']", "out": "リスト内包記法 フィルタ"}
{"in": "print(json.dumps('\\u0411', ensure_ascii='False'))", "out": "ユニコード"}
{"in": "return view_func(request, *args, **kwargs)", "out": "引数展開"}
{"in": "a = dict((key, value) for key, value in a.items() if key not in exclusion)", "out": "辞書内包記法"}
{"in": "pattern = re.compile(pattern_string)", "out": "正規表現"}
{"in": "sorted(re.findall('g\\\\d+$', s))", "out": "正規表現"}
{"in": "return re.sub('([a-z0-9])([A-Z])', '\\\\1_\\\\2', s1).lower()", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join(numbers.split(' , '))", "out": "リストの文字列化"}
{"in": "set(d[0]).intersection(*d[1:])", "out": "引数展開"}
{"in": "plt.setp(ax.get_xticklabels()[-1], visible=False)", "out": "末尾の要素"}
{"in": "[_f for _f in a.split('\\n') if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join(map(str, a))", "out": "リストの文字列化"}
{"in": "L1 = [[x.split(' A ')[-1].split(' B ')[-1]] for x in L]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "func(*parameters)", "out": "引数展開"}
{"in": "old_init(self, *args, **kwargs)", "out": "引数展開"}
{"in": "re.escape('\\n [hello world!]')", "out": "正規表現"}
{"in": "super(MyCustomForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "list(chain(*x))", "out": "引数展開"}
{"in": "np.array(list(itertools.zip_longest(fillvalue=np.nan, *ll))).T", "out": "引数展開"}
{"in": "characters = ['T', '\\u05d1', '\\u20ac', '\\u6728', '\\u2665']", "out": "ユニコード"}
{"in": "H = np.sum(np.diag(np.ones(n - k), k)[:-m + 1, :] for k in range(m))", "out": "リスト内包記法 変換"}
{"in": "foo(*t)", "out": "引数展開"}
{"in": "tupleX = tuple(x for x in tupleX if condition)", "out": "リスト内包記法 フィルタ"}
{"in": "df.loc[~df.index.isin(t)]", "out": "反転演算子"}
{"in": "return re.split('\\\\||<>', input)", "out": "正規表現"}
{"in": "only_roman_chars('russian: \\u0433\\u0430\\u0433\\u0430')", "out": "ユニコード"}
{"in": "set(my_list) - {i for e in bad for i in my_list if e in i}", "out": "辞書内包記法"}
{"in": "ax.boxplot([data[name][item] for item in ['A', 'B', 'C']])", "out": "リスト内包記法 変換"}
{"in": "[(x + 1) for x in mylist]", "out": "リスト内包記法 変換"}
{"in": "[col for col in df.columns if df[col].dtype == 'datetime64[ns]']", "out": "リスト内包記法 フィルタ"}
{"in": "pprint([(my_array + [i]) for i in input_elements])", "out": "リスト内包記法 変換"}
{"in": "all(len(set(random.sample(word_drills, 3))) == 3 for i in range(10 ** 5))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "re.escape('www.stackoverflow.com')", "out": "正規表現"}
{"in": "kv = [(k, d[k]) for k in l if k in d]", "out": "リスト内包記法 フィルタ"}
{"in": "return next(i for i, j in list(enumerate(s))[::-1] if j == x)", "out": "リスト内包記法 フィルタ 逆順の列"}
{"in": "return [(slice(*map(int, a)) if len(a) > 1 else int(a[0])) for a in ranges]", "out": "リスト内包記法 フィルタ 三項演算子 引数展開"}
{"in": "[(x < 0 and x + 4 or x) for x in [1, -2, 2]]", "out": "リスト内包記法 変換"}
{"in": "mylist.sort(key=lambda v: v.x ** 2 + v.y ** 2)", "out": "累乗演算子"}
{"in": "re.search(re.escape(stringB) + '(.*?)' + re.escape(stringC), stringA).group(1)", "out": "正規表現"}
{"in": "print(' '.join(my_dashes))", "out": "リストの文字列化"}
{"in": "[c for c in 'foobar']", "out": "リスト内包記法 変換"}
{"in": "[i for i, j in c.most_common()]", "out": "リスト内包記法 変換"}
{"in": "sum(value for key, value in list(d.items()) if key != '?')", "out": "リスト内包記法 フィルタ"}
{"in": "strs.strip('.txt').split('_', 2)[-1].split('-')", "out": "末尾の要素"}
{"in": "fib = lambda n: n if n < 2 else fib(n - 1) + fib(n - 2)", "out": "三項演算子"}
{"in": "print(template.format(**rec))", "out": "引数展開"}
{"in": "[list(group) for k, group in groupby(l, lambda x: x == '') if not k]", "out": "リスト内包記法 フィルタ"}
{"in": "thedate = datetime.datetime.strptime(userdatestring, '%Y-%m-%d')", "out": "日付書式"}
{"in": "res = [([x] * len(y), y) for x, y in d.items()]", "out": "リスト内包記法 変換"}
{"in": "return func(*posargs, **fkwargs)", "out": "引数展開"}
{"in": "parser.add_argument('--date', type=lambda d: datetime.strptime(d, '%Y%m%d'))", "out": "日付書式"}
{"in": "[('A' * 1024) for _ in range(0, 1024 * 1024 * 1024)]", "out": "リスト内包記法 変換"}
{"in": "[n.name for n in tf.get_default_graph().as_graph_def().node]", "out": "リスト内包記法 変換"}
{"in": "re.match('e+', 'eee3', pos=1)", "out": "正規表現"}
{"in": "list(itertools.chain(pat.split(line) for line in data))", "out": "リスト内包記法 変換"}
{"in": "[(i * j) for i, j in combinations(array, 2)]", "out": "リスト内包記法 変換"}
{"in": "listRegex = re.findall('[*][[][[].*', testString)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(soup.html.findAll(text=True, recursive=False))", "out": "リストの文字列化"}
{"in": "return super(PersonAdmin, self).formfield_for_dbfield(db_field, **kwargs)", "out": "引数展開"}
{"in": "print('\\n-----\\n'.join(sentences))", "out": "リストの文字列化"}
{"in": "f = lambda x, y: x if x > 100 and y < 50 else y", "out": "三項演算子"}
{"in": "print(s, s[-1].isdigit())", "out": "末尾の要素"}
{"in": "\"\"\"\"\"\".join(random.choice('0123456789ABCDEF') for i in range(16))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "abc = dict((c, string.count(c)) for c in string)", "out": "辞書内包記法"}
{"in": "s = re.sub('<(\\\\w+)>', lambda m: replacement_dict.get(m.group()), s)", "out": "正規表現"}
{"in": "len([y for y in x if y > 2])", "out": "リスト内包記法 フィルタ"}
{"in": "[row[s] for row in LoL[r]]", "out": "リスト内包記法 変換"}
{"in": "list(dict1.items()) ^ list(dict2.items())", "out": "排他的論理和"}
{"in": "new_dict = {k: list(v) for k, v in list(my_dict.items())}", "out": "辞書内包記法"}
{"in": "\"\"\" \"\"\".join(np.hstack([a.T.real, a.T.imag]).astype(str).flat)", "out": "リストの文字列化"}
{"in": "return super(MyModelView, self).post(self, *args, **kwargs)", "out": "引数展開"}
{"in": "[x[0] for x in a].index(53)", "out": "リスト内包記法 変換"}
{"in": "f.write('\\n'.join(new_list))", "out": "リストの文字列化"}
{"in": "x[::2]", "out": "ひとつおきの列"}
{"in": "any(isinstance(e, int) and e > 0 for e in [1, 2, 'joe'])", "out": "リスト内包記法 変換"}
{"in": "userpath = os.path.normpath('(path-to-wiki)/foo/bar.txt')\nre.findall('[^A-Za-z0-9_\\\\-\\\\\\\\]', userpath)", "out": "正規表現"}
{"in": "return func(func, *args, **kwargs)", "out": "引数展開"}
{"in": "print(' '.join(arr))", "out": "リストの文字列化"}
{"in": "{str(key): value for key, value in zip(bins, count)}", "out": "辞書内包記法"}
{"in": "[i for i in x if all(j.isdigit() or j in string.punctuation for j in i)]", "out": "リスト内包記法 フィルタ"}
{"in": "random.choice([chr(c) for c in range(ord('A'), ord('D') + 1)])", "out": "リスト内包記法 変換"}
{"in": "match = re.search('(\\\\d+/\\\\d+/\\\\d+)', 'The date is 99/99/99')\nmatch.group(1)", "out": "正規表現"}
{"in": "[item for item in data if item == 'number1']", "out": "リスト内包記法 フィルタ"}
{"in": "self.connect(entry, QtCore.SIGNAL('triggered()'), lambda : self.doStuff(item))", "out": "正規表現"}
{"in": "sum(isinstance(i, int) for i in a)", "out": "リスト内包記法 変換"}
{"in": "[[int(y) for y in x.split()] for x in s.split(' 3 4 ')]", "out": "リスト内包記法 変換"}
{"in": "print(conn.notices[-1])", "out": "末尾の要素"}
{"in": "\"\"\"|\"\"\".join([s.replace('|', '') for s in t.split('||')])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict(re.findall('(?:^|\\x01)(34|49|56)=(.*?)\\x01', raw_msg))", "out": "正規表現"}
{"in": "super(self.__class__, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[s for s in my_dict if s.startswith('for')]", "out": "辞書内包記法"}
{"in": "print(dt.strftime('%Y-%m-%d %H:%M:%S %Z%z'))", "out": "日付書式 時刻書式"}
{"in": "print('{:{}s} {:{}d} {:{}f}'.format(*sum(zip(res, args), ())))", "out": "引数展開"}
{"in": "min(s.find(i) for i in a)", "out": "リスト内包記法 変換"}
{"in": "return QtCore.QVariant()", "out": "正規表現"}
{"in": "print(re.sub('(.)(?=.*\\\\1)|(.)', fun, x))", "out": "正規表現"}
{"in": "return ' '.join(str(s) for s in parts if s is not None)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "zipped = zip(mylist[0::2], mylist[1::2])", "out": "ひとつおきの列"}
{"in": "return re.findall('.{%d}' % length, string)", "out": "正規表現"}
{"in": "return [{'This is a word': arg} for arg in args]", "out": "辞書内包記法"}
{"in": "f(*args, **kwargs)", "out": "引数展開"}
{"in": "[item for item in my_list if item not in to_be_removed]", "out": "リスト内包記法 フィルタ"}
{"in": "t.strftime(gettext('%H:%M'))", "out": "時刻書式"}
{"in": "[k for k in x if type(k) == str]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(tmp.split(',')[::-1])", "out": "リストの文字列化 逆順の列"}
{"in": "print('i equals 9' if i == 9 else None)", "out": "三項演算子"}
{"in": "a = [row for row in a if all(row[j] <= 0 for j in range(0, len(row), 2))]", "out": "リスト内包記法 フィルタ"}
{"in": "application = django.core.handlers.wsgi.WSGIHandler()", "out": "正規表現"}
{"in": "d = {x: y for x, y in zip(m[::2], m[1::2])}", "out": "辞書内包記法 ひとつおきの列"}
{"in": "[''.join(v) for k, v in groupby(s)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re1 = re.compile('one')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(a for a, b in zip(sa, sb) if terminating(a == b))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[([k] * v) for k, v in list(Counter(L).items())]", "out": "リスト内包記法 変換"}
{"in": "path2 = re.sub('(\\\\[|])', '[\\\\1]', path)", "out": "正規表現"}
{"in": "zip(*([iter(num_str.split(','))] * 2))", "out": "引数展開"}
{"in": "line = re.sub(regx, '\\\\1', line)", "out": "正規表現"}
{"in": "\"\"\"{0:.3f}\"\"\".format(a + 0)", "out": "少数点表示制限"}
{"in": "return {k: v for k, v in somedict.items() if key_criteria_func(k)}", "out": "辞書内包記法"}
{"in": "return [(new_element if i in indices else e) for i, e in enumerate(lst)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "return all(any(substr in s for s in strings) for substr in substrings)", "out": "リスト内包記法 変換"}
{"in": "d = {name: int(value) for name, value in splitstrs}", "out": "辞書内包記法"}
{"in": "[x for x in list_1 if isinstance(x, numbers.Number)]", "out": "リスト内包記法 フィルタ"}
{"in": "s = re.sub('([a-z]+)([0-9]+)', '\\\\1' + '[' + '\\\\2' + ']', s)", "out": "正規表現"}
{"in": "l2 = [item for item in l1 if item[0].startswith('img')]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('-{1,2}', dashrepl, 'pro----gram-files')", "out": "正規表現"}
{"in": "return '\\n'.join(result)", "out": "リストの文字列化"}
{"in": "index_list.append([(i + temp) for i in range(items)])", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(s))", "out": "リストの文字列化"}
{"in": "defaultval if myval is None else myval", "out": "三項演算子"}
{"in": "re.sub('(.)', '\\\\1-', 'Nissim')", "out": "正規表現"}
{"in": "stopword_pattern = re.compile(stopstring)", "out": "正規表現"}
{"in": "graph.set_xticklabels([date.strftime('%Y-%m-%d') for date, value in data])", "out": "リスト内包記法 変換 日付書式"}
{"in": "[LoL[i][s] for i in range(len(LoL))[r]]", "out": "リスト内包記法 変換"}
{"in": "row = [item[0] for item in cursor.fetchall()]", "out": "リスト内包記法 変換"}
{"in": "B, C = A[::2], A[1::2]", "out": "ひとつおきの列"}
{"in": "return re.sub('/.', to_tag, text)", "out": "正規表現"}
{"in": "result = re.sub('\\\\*+', '*', '***abc**de*fg******h')", "out": "正規表現"}
{"in": "print([(k, len(index[k])) for k in sorted(index.keys())])", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join([('%i: %s' % (n, l[n])) for n in range(len(l))]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "r = re.compile('^[a-z]{1,15}$')", "out": "正規表現"}
{"in": "plt.gca().xaxis.set_major_formatter(dates.DateFormatter('%H:%M'))", "out": "時刻書式"}
{"in": "return [k for k, v in list(d1.items()) if v == max(d1.values())][0]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in seq if x not in seen and not seen.add(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\", \"\"\".join('='.join((k, str(v))) for k, v in sorted(mydict.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "anyTrue = any(somePredicate(elem) for elem in someIterable)", "out": "リスト内包記法 変換"}
{"in": "match = re.search('\\\\<(?P<brackets>[^\\\\>]+)>', text)", "out": "正規表現"}
{"in": "set(x * x for x in range(10))", "out": "リスト内包記法 変換"}
{"in": "print(map(int, list(''.join(row)[1:])))", "out": "リストの文字列化"}
{"in": "print(''.join(letters[:i] + letters[i::-1]))", "out": "リストの文字列化 逆順の列"}
{"in": "print([a.text for a in soup.select('section.staff-picks h6.project-title a')])", "out": "リスト内包記法 変換"}
{"in": "next(v for k, v in list(my_dict.items()) if 'Date' in k)", "out": "辞書内包記法"}
{"in": "[dict(zip(keys, row)) for row in zip(nums, chars)]", "out": "辞書内包記法"}
{"in": "return self.function(other(*args, **kwargs))", "out": "引数展開"}
{"in": "return (''.join(t) for t in itertools.product(*zip(s.lower(), s.upper())))", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "q = {(i, j): (0) for i in range(5) for j in range(4)}", "out": "辞書内包記法"}
{"in": "re.sub('\\\\|(?!\\\\|)', '', t)", "out": "正規表現"}
{"in": "values = ','.join([str(i) for i in value_list])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print([columns[0] for column in cursor.fetchall()])", "out": "リスト内包記法 変換"}
{"in": "return len([char for char in unistr if unicodedata.combining(char) == 0])", "out": "リスト内包記法 フィルタ"}
{"in": "super().__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return [elem for elem in some_iterable]", "out": "リスト内包記法 変換"}
{"in": "list_2 = [num for num in list_1 if isinstance(num, (int, float))]", "out": "リスト内包記法 フィルタ"}
{"in": "[item for item in x if not y.intersection(item)]", "out": "リスト内包記法 フィルタ"}
{"in": "x[index] if -len(l) <= index < len(l) else default", "out": "三項演算子"}
{"in": "result = [r for r, in result]", "out": "リスト内包記法 変換"}
{"in": "list_of_tuples = [(x, y) for x, y, label in data_one]", "out": "リスト内包記法 変換"}
{"in": "datetime.time(*map(int, '03:55'.split(':')))", "out": "引数展開"}
{"in": "keys = set().union(*all_dicts)", "out": "引数展開"}
{"in": "return x ** 2", "out": "累乗演算子"}
{"in": "next(i for i, j in enumerate('   xyz') if j not in string.whitespace)", "out": "リスト内包記法 フィルタ"}
{"in": "{k: (p[k] - m[k] ** 2) for k in m}", "out": "辞書内包記法 累乗演算子"}
{"in": "\"\"\" \"\"\".join(str(int(x)) if x.isdigit() else x for x in s.split())", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "return [[m[row][col] for col in range(0, width)] for row in range(0, height)]", "out": "リスト内包記法 変換"}
{"in": "data = [[eval(x) for x in y] for y in data]", "out": "リスト内包記法 変換"}
{"in": "return QtCore.Qt.ItemIsEnabled", "out": "正規表現"}
{"in": "print(''.join(line))", "out": "リストの文字列化"}
{"in": "primes = {x for x in range(2, 101) if all(x % y for y in range(2, min(x, 11)))}", "out": "辞書内包記法"}
{"in": "dups = [x for x in list_a if list_a.count(x) > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "super(Dog, self).__init__(name, weight, **kwargs)", "out": "引数展開"}
{"in": "list(chain.from_iterable(sorted(sub) if len(sub) > 1 else sub for sub in G))", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "the_list = [the_list[i - 1] for i in (2, 3, 1, 4)]", "out": "リスト内包記法 変換"}
{"in": "pat = re.compile('x{65535}')", "out": "正規表現"}
{"in": "return set(x[0] for x in flatten(l) if x[1] in ['NN', 'VB', 'JJ'])", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.findall('[^*]+|\\\\*', x))", "out": "正規表現"}
{"in": "values = ','.join([str(i) for i in value_list])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[k for k, v in sorted(iter(d.items()), key=lambda k_v: (-k_v[1], k_v[0]))]", "out": "リスト内包記法 変換"}
{"in": "zip(*a)", "out": "引数展開"}
{"in": "return [self[n] for n in range(start, stop)]", "out": "リスト内包記法 変換"}
{"in": "sum(x for x in range(1, 1000) if x % 3 == 0 or x % 5 == 0)", "out": "リスト内包記法 フィルタ"}
{"in": "sum(dict[i] for i in range(1, 5))", "out": "辞書内包記法"}
{"in": "[k for k, v in G.out_degree().items() if v > 2]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(a if a == b else stop_iter() for a, b in zip(sa, sb))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "[('hello' + str(x)) for x in a]", "out": "リスト内包記法 変換"}
{"in": "return dict(itertools.chain.from_iterable(list(dct.items()) for dct in dicts))", "out": "辞書内包記法"}
{"in": "[k for k in itertools.chain(*(list(d.keys()) for d in list(foo.values())))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "filtered_numbers = [n for n in numbers if len(repr(n)) == len(set(repr(n)))]", "out": "リスト内包記法 フィルタ"}
{"in": "[list(x) for x in dt.T.itertuples()]", "out": "リスト内包記法 変換"}
{"in": "print([x for x in range(2, 100) if not [t for t in range(2, x) if not x % t]])", "out": "リスト内包記法 フィルタ"}
{"in": "data = re.sub('<.*?>', '', data)", "out": "正規表現"}
{"in": "[j() for j in [create_lambda(i) for i in range(10)]]", "out": "リスト内包記法 変換"}
{"in": "[(ix, iy) for ix, row in enumerate(a) for iy, i in enumerate(row) if i == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "all(x in '10' for x in binary_string)", "out": "リスト内包記法 変換"}
{"in": "s = set(A() for i in range(1000000))", "out": "リスト内包記法 変換"}
{"in": "dict((key, value) for key, value in a.items() if key == 1)", "out": "辞書内包記法"}
{"in": "ran_floats = [random.uniform(low, high) for _ in range(size)]", "out": "リスト内包記法 変換"}
{"in": "df = df.iloc[:, ([j for j, c in enumerate(df.columns) if j != i])]", "out": "リスト内包記法 フィルタ"}
{"in": "x, y = (val - delta for val, delta in zip((x, y), (1, 2)))", "out": "リスト内包記法 変換"}
{"in": "[np.argmin(a) for a in A2]", "out": "リスト内包記法 変換"}
{"in": "packet = [chr(int(x, 16)) for x in packet.split(' ')]", "out": "リスト内包記法 変換"}
{"in": "listOfA, listOfB = [[idx for idx, x in enumerate(s) if x == c] for c in 'AB']", "out": "リスト内包記法 フィルタ"}
{"in": "l2 = [l1.index(x) for x in sorted(l1)]", "out": "リスト内包記法 変換"}
{"in": "return len([x for x in combinations(all_s, len(word)) if ''.join(x) == word])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "y = tuple([(z * 10) for z in img.size])", "out": "リスト内包記法 変換"}
{"in": "return ', '.join(l)", "out": "リストの文字列化"}
{"in": "list_1 = [x for x in list_1 if x[3] <= 0.3 and x[2] < 5]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(b)", "out": "リストの文字列化"}
{"in": "return all(v not in L[i + 1:] for i, L in enumerate(L))", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nval = reduce(operator.__or__, (b << 8 * i for i, b in enumerate(bits)))", "out": "リスト内包記法 変換"}
{"in": "s = re.sub('\\\\b(.+)(\\\\s+\\\\1\\\\b)+', '\\\\1', s)", "out": "正規表現"}
{"in": "abc = dict((c, string.count(c)) for c in set(string))", "out": "辞書内包記法"}
{"in": "sources.write(re.sub('^# deb', 'deb', line))", "out": "正規表現"}
{"in": "[c for c in col_names if not any(f in c for f in filter_array)]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(re.findall('(?:\".*?\")|(?:\\\\S+)', s))", "out": "正規表現 リストの文字列化"}
{"in": "scatter([(a, b) for a, b in zip(x, y) if a > 0 and a < 10])", "out": "リスト内包記法 フィルタ"}
{"in": "s.map(lambda x: x.strftime('%d-%m-%Y'))", "out": "日付書式"}
{"in": "re.sub('[\"]\\\\s*[\"]', '\"', doc)", "out": "正規表現"}
{"in": "return [a[row, col] for row, col in enumerate(col_index)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(' '.join(reversed(chunk)) for chunk in chunks(s.split(), 4))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "form = super(ProductAdmin, self).get_form(request, obj, **kwargs)", "out": "引数展開"}
{"in": "super(MyVersionOfAClass, self).someMethod(*args, **kwargs)", "out": "引数展開"}
{"in": "[hex(ord(c)) for c in data]", "out": "リスト内包記法 変換"}
{"in": "key = ' = '.join((key, str(value).decode('utf-8').replace('\\n', '\\n\\t')))", "out": "リストの文字列化"}
{"in": "data = {tuple(item) for item in map(sorted, lst)}", "out": "辞書内包記法"}
{"in": "return ' '.join([words[-1]] + words[:-1])", "out": "リストの文字列化 末尾の要素"}
{"in": "[item for t in tuples for item in t]", "out": "リスト内包記法 変換"}
{"in": "(foo().bar() if condition else foo()).baz()", "out": "三項演算子"}
{"in": "s = ''.join(l)", "out": "リストの文字列化"}
{"in": "d = [{'x': 1, 'y': 2}]\n[dict(y) for y in set(tuple(x.items()) for x in d)]", "out": "辞書内包記法"}
{"in": "pd.concat([df.T[x] for x in df.T], ignore_index=True)", "out": "リスト内包記法 変換"}
{"in": "L = [e for e in L if 'pie' not in e]", "out": "リスト内包記法 フィルタ"}
{"in": "[(i in fruit_dict2) for i in fruits]", "out": "辞書内包記法"}
{"in": "print(my_list[-1])", "out": "末尾の要素"}
{"in": "print(''.join(sorted(open('data.txt', 'rb'), key=k)))", "out": "リストの文字列化"}
{"in": "print(''.join(result))", "out": "リストの文字列化"}
{"in": "result = [(x * P) for x in S]", "out": "リスト内包記法 変換"}
{"in": "data = [(line[0], line[1:]) for line in csv.reader(f)]", "out": "リスト内包記法 変換"}
{"in": "with open('names.txt', 'r') as f:\n    myNames = [line.strip() for line in f]", "out": "リスト内包記法 変換"}
{"in": "re.sub('([a-z])([A-Z])|(?<=[A-Z])([A-Z]+)', '\\\\g<3>\\\\g<1> \\\\g<2>', vendor)", "out": "正規表現"}
{"in": "[log(y, 10) for y in x]", "out": "リスト内包記法 変換"}
{"in": "[x for i, x in enumerate(unculledlist) if i % 6 % 2 == 0 if i % 5 % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in lst if x % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "func(*args, **kwargs)", "out": "引数展開"}
{"in": "print(''.join(map(str, list(range(1, 11)))))", "out": "リストの文字列化"}
{"in": "print(''.join([child.text for child in element]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return tuple(d[k] for k in keys)", "out": "リスト内包記法 変換"}
{"in": "{k: d1[k] for k in list(d1.keys()) & l1}", "out": "辞書内包記法"}
{"in": "json_docs = [json.dumps(doc, default=json_util.default) for doc in cursor]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(i + j for i, j in zip_longest(a, b, fillvalue=''))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "logging.getLogger('this.is.the.module').warning('Testing for SO')", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join([x for x in node.itertext()])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[re.findall('\\\\d+\\\\.\\\\d+', line.partition('foo')[2]) for line in f]", "out": "リスト内包記法 変換 正規表現"}
{"in": "\"\"\"\"\"\".join(c for c, _ in groupby('haaaaapppppyyy'))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[a[x:x + seg_length] for x in range(0, len(a), seg_length)]", "out": "リスト内包記法 変換"}
{"in": "print([zip(A, item) for item in product(B, repeat=len(A))])", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(tokenizer.tokenize(text, realign_boundaries=True)))", "out": "リストの文字列化"}
{"in": "[dict(template, **{k: value}) for value in add]", "out": "辞書内包記法 引数展開"}
{"in": "dict_no_dupl((k, v) for k, v in ('a1', 'a2', 'b3'))", "out": "辞書内包記法"}
{"in": "print(''.join(s))", "out": "リストの文字列化"}
{"in": "onedollar = re.compile('^[^\\\\$]*\\\\$[^\\\\$]*$')", "out": "正規表現"}
{"in": "[(x + y) for x, y in zip_longest(reversed(P), reversed(Q), fillvalue=0)][::-1]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "\"\"\"http://xxx.yyy.zzz/{web}/{page}.html\"\"\".format(**d)", "out": "引数展開"}
{"in": "nsolve([x * y - 1, 4 * x ** 2 + y ** 2 - 5], [x, y], [1, 1])", "out": "累乗演算子"}
{"in": "_illegal_xml_chars_RE = re.compile('[%s]' % ''.join(_illegal_ranges))", "out": "正規表現 リストの文字列化"}
{"in": "wcswidth('\\u200c')", "out": "ユニコード"}
{"in": "resources = [_f for _f in (obj.get('file') for obj in iterator) if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "out = [np.sum(data[c]) for c in contribs]", "out": "リスト内包記法 変換"}
{"in": "re.split(reg, 'fOO1foo2FOO3')", "out": "正規表現"}
{"in": "\"\"\":\"\"\".join([s[x:x + 2] for x in range(0, len(s) - 1, 2)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return next(x for x in list_of_tuples if value in x)", "out": "リスト内包記法 フィルタ"}
{"in": "[item.get_ydata()[0] for item in B['whiskers']]", "out": "リスト内包記法 変換"}
{"in": "lists = [['dog', 1], ['cat', 2, 'a'], ['rat', 3, 4], ['bat', 5]]\nresult = '\\n'.join('\\t'.join(map(str, l)) for l in lists)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[list(combinations(data, i)) for i in range(1, len(data) + 1)]", "out": "リスト内包記法 変換"}
{"in": "[[i] for i in ' '.join(L).split(' ') if i.count(i[0]) == len(i) and len(i) > 1]", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "re.sub('&', '&', parsed.text.encode('utf-8'))", "out": "正規表現"}
{"in": "re.findall('(?<!%)%\\\\(([^)]+)\\\\)[diouxXeEfFgGcrs]', x)", "out": "正規表現"}
{"in": "[len(list(group)) for value, group in itertools.groupby(b_List) if value]", "out": "リスト内包記法 フィルタ"}
{"in": "[list(tup) for tup in itertools.zip_longest(fillvalue='', *l)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "sum(len(v) for v in d.values())", "out": "リスト内包記法 変換"}
{"in": "table = ''.join(mapping)", "out": "リストの文字列化"}
{"in": "[x for x in list_of_data_from_database if x != 'no price']", "out": "リスト内包記法 フィルタ"}
{"in": "predictions = [t.predict(testData) for t in trees]", "out": "辞書内包記法"}
{"in": "hex(158 ^ 255)", "out": "排他的論理和"}
{"in": "[sum(int(i) for i in num) for num in list]", "out": "リスト内包記法 変換"}
{"in": "print('Value is \"%d\", but math.pi is %.2f' % (value, math.pi))", "out": "少数点表示制限"}
{"in": "[(i - 1) for i in l]", "out": "リスト内包記法 変換"}
{"in": "re.escape('escape this. /')", "out": "正規表現"}
{"in": "OrderedDict(lla[::-1])", "out": "逆順の列"}
{"in": "value in dictionary or any(value in dictionary[key] for key in dictionary)", "out": "辞書内包記法"}
{"in": "df[~df.index.isin(df_a.index + df_b.index)]", "out": "反転演算子"}
{"in": "re.findall('[A-Z][a-z]*', 'ABC')", "out": "正規表現"}
{"in": "result = my_func(**vars(args))", "out": "引数展開"}
{"in": "return '\\n'.join([p.products for p in self.product.all()])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "sum(1 for _ in iter)", "out": "リスト内包記法 変換"}
{"in": "return [tuple(sequence[i:i + n]) for i in range(count)]", "out": "リスト内包記法 変換"}
{"in": "print(('ratio:', Eucl[-1] / np.sqrt((res * res).sum())))", "out": "末尾の要素"}
{"in": "pprint(re.findall('.{1,16}(?:\\\\s+|$)', text))", "out": "正規表現"}
{"in": "re.sub('[-+]\\\\d+', dump, s)", "out": "正規表現"}
{"in": "[dict(template, z=value) for value in add]", "out": "辞書内包記法"}
{"in": "plt.plot(marker='o', color='r', ls='', *zip(*a))", "out": "引数展開"}
{"in": "re.search(p, 'aaab')", "out": "正規表現"}
{"in": "re.compile('(\\\\w+)').split('hello, foo')", "out": "正規表現"}
{"in": "map(min, zip(*alist))", "out": "引数展開"}
{"in": "print(random.choice(['#', 'o', '~', '*']), end=' ')", "out": "反転演算子"}
{"in": "'_'.join(groups[:n]), '_'.join(groups[n:])", "out": "リストの文字列化"}
{"in": "filtered_d = dict((k, d[k]) for k in keys if k in d)", "out": "辞書内包記法"}
{"in": "[token for token in text.split() if token.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "L = [list('ABCDE') for i in range(5)]", "out": "リスト内包記法 変換"}
{"in": "x, y = np.broadcast_arrays(*np.ogrid[0:2, 0:3])", "out": "引数展開"}
{"in": "return lst[1::2]", "out": "ひとつおきの列"}
{"in": "res = [s[i - 2:i + 1] for i in range(2, len(s)) if s[i] == s[i - 2]]", "out": "リスト内包記法 フィルタ"}
{"in": "[int(x.split(' ')) for x in data.split('\\n')]", "out": "リスト内包記法 変換"}
{"in": "df[~df.field.isin(ban_field)]", "out": "反転演算子"}
{"in": "letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n[ord(x) for x in letters]", "out": "リスト内包記法 変換"}
{"in": "sum(1 for _ in filter(None.__ne__, lst))", "out": "リスト内包記法 変換"}
{"in": "my_list2 = [i[0] for i in my_list]", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile('A\\\\*(.*?)(\\\\*.*?B\\\\*)(.*?)\\\\*')", "out": "正規表現"}
{"in": "result.update((k, dol1[k] + dol2[k]) for k in set(dol1).intersection(dol2))", "out": "リスト内包記法 変換"}
{"in": "[i for i in my_list if all(not i.startswith(x) for x in ['91', '18'])]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in 'a1a2a3s3d4f5fg6h' if x.isalpha()]", "out": "リスト内包記法 フィルタ"}
{"in": "print([tuple(x for x in y if x) for y in a])", "out": "リスト内包記法 フィルタ"}
{"in": "zip(t[::2], t[1::2])", "out": "ひとつおきの列"}
{"in": "return itertools.zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "zip(*np.where(np.char.find(x, '.') > -1))", "out": "引数展開"}
{"in": "all(x.isalpha() for x in ['abc', 'def'])", "out": "リスト内包記法 変換"}
{"in": "return ' '.join((lambda x: [i[::-1] for i in x])(sentence.split(' ')))", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "dirList = [name for name in dirList if re.search('\\\\.mp3', name)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "return int(''.join('%d' % num for num in nums))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dic.setdefault(key, []).append(item[-1])", "out": "末尾の要素"}
{"in": "csv_file.write('\\n'.join(map(','.join, my_list) + '\\n'))", "out": "リストの文字列化"}
{"in": "return self.run_in_executor(func, *args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"/\"\"\".join(a.strip('/').split('/')[1:])", "out": "リストの文字列化"}
{"in": "r = re.compile('(?<!\\\\[)\\\\d{4}(?!\\\\])')", "out": "正規表現"}
{"in": "splitlists = [mylist[i:i + n] for i in range(0, len(mylist), n - 1)]", "out": "リスト内包記法 変換"}
{"in": "return next(key for key, value in d.items() if value == my_value)", "out": "リスト内包記法 フィルタ"}
{"in": "result = 'i like the following fruits: ' + ', '.join(fruits)", "out": "リストの文字列化"}
{"in": "dict(((a, b, c), 1) for a in A for b in B for c in C)", "out": "辞書内包記法"}
{"in": "nested_lst = [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]\n[tuple(l) for l in nested_lst]", "out": "リスト内包記法 変換"}
{"in": "[x for x in '[^\\t\\n\\r -\\ud7ff\\ue000-\\ufffd\\U00010000-\\U0010ffff]']", "out": "リスト内包記法 変換 ユニコード"}
{"in": "[f(v) for v in range(3) if f(v) > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "[i for i in s.split() if i.startswith('#')]", "out": "リスト内包記法 フィルタ"}
{"in": "naive = datetime.datetime.strptime('2001-2-3 10:11:12', '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "print([[int(x), int(y)] for x, y in pairwise(fields)])", "out": "リスト内包記法 変換"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "a = np.array([int(v) for v in line.strip().split(' ')])", "out": "リスト内包記法 変換"}
{"in": "numpy.savetxt(sys.stdout, a, fmt='%.4f')", "out": "少数点表示制限"}
{"in": "regex = re.compile('foo (?:bar)*')", "out": "正規表現"}
{"in": "str = re.sub('[^atcg]', '', str)", "out": "正規表現"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "print('%s [%s]' % (row_label, ' '.join('%03s' % i for i in row)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "yas = 'yas\\t\\tbs\\tcda\\t\\t'\nre.split('\\\\t+', yas.rstrip('\\t'))", "out": "正規表現"}
{"in": "print(re.sub('{.+?}', lambda match: r.pop(0), s, count=len(r)))", "out": "正規表現"}
{"in": "matchre = re.compile('([^(]*)(?:\\\\(([^)]*)\\\\))?')", "out": "正規表現"}
{"in": "splitparts = re.compile('\\\\s*,\\\\s*')", "out": "正規表現"}
{"in": "[[next(b) for _ in range(x)] for x in l]", "out": "リスト内包記法 変換"}
{"in": "QtCore.QObject.connect(a, QtCore.SIGNAL('QtSig()'), pyFunction)", "out": "正規表現"}
{"in": "dict.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "sum(n * (n - 1) // 2 for n in list(index2count.values()))", "out": "リスト内包記法 変換"}
{"in": "[fname.rsplit('.', 1)[0] for fname in os.listdir('C:\\\\X\\\\Data\\\\')]", "out": "リスト内包記法 変換"}
{"in": "return all(x != y for x, y in itertools.combinations(objs, 2))", "out": "リスト内包記法 変換"}
{"in": "stage2 = re.compile('^\\\\s*(.+?)\\\\s*$', re.MULTILINE)", "out": "正規表現"}
{"in": "return date.strftime('%a, %d %b %Y %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "for i in range(1, 6):\n    for c1 in itertools.combinations(c, i):\n        c1 = set(c1)", "out": "リスト内包記法 変換"}
{"in": "s[s.str.contains('|'.join(searchfor))]", "out": "リストの文字列化"}
{"in": "time.strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "print(Matrix([[1, 2], [3, 4]]) ** x)", "out": "累乗演算子"}
{"in": "[x for x in A if x not in subset_of_A]", "out": "リスト内包記法 フィルタ"}
{"in": "with open('filename.txt', 'r') as f:\n    data = [map(int, line.split()) for line in f]", "out": "リスト内包記法 変換"}
{"in": "plt.savefig('~/Documents/output.png')", "out": "反転演算子"}
{"in": "print('|'.join(row))", "out": "リストの文字列化"}
{"in": "parts = [s[i:j] for i, j in zip(indices, indices[1:] + [None])]", "out": "リスト内包記法 変換"}
{"in": "any(first == c for c in letter)", "out": "リスト内包記法 変換"}
{"in": "[e.value for e in Color]", "out": "リスト内包記法 変換"}
{"in": "clean = re.sub('[^\\\\s!-~]', '', dirty)", "out": "正規表現 反転演算子"}
{"in": "' '.join(map(str, L)).index(' '.join(map(str, x))) / 2", "out": "リストの文字列化"}
{"in": "g[:] = (elem[:12] for elem in g)", "out": "リスト内包記法 変換"}
{"in": "df = pd.DataFrame({i: list(range(1000)) for i in range(100)})", "out": "辞書内包記法"}
{"in": "sum(1 for i in set(list_of_purple_items) if i not in main_set)", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\u2660')", "out": "ユニコード"}
{"in": "common_keys = [k for k in dict1 if k in dict2]", "out": "辞書内包記法"}
{"in": "rule_list = [cls() for cls in Rule.__subclasses__()]", "out": "リスト内包記法 変換"}
{"in": "set(tuple(element) for element in xx)", "out": "リスト内包記法 変換"}
{"in": "all(item1 == item2 for item1, item2 in zip(list1, list2))", "out": "リスト内包記法 変換"}
{"in": "\"\"\"Formats the data for typeA\"\"\"", "out": "リスト内包記法 変換"}
{"in": "a[~b] = np.nan", "out": "反転演算子"}
{"in": "print(format(dec, '7.2f'))", "out": "少数点表示制限"}
{"in": "row = [item['id'] for item in cursor.fetchall()]", "out": "リスト内包記法 変換"}
{"in": "st = {'2', '4', '17', '21', '22', '24', '27', '28', '29', '33', '39'}\nfiltered_dict = {k: v for k, v in my_dict.items() if not st.isdisjoint(v)}", "out": "辞書内包記法"}
{"in": "[m.start() for m in re.finditer('ab', s)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "sys.stdout.write('Bob here.')", "out": "正規表現"}
{"in": "l = [y for x, y in sorted(zip([key(i) for i in l], l))]", "out": "リスト内包記法 変換"}
{"in": "[(x + y) for x, y in zip_longest(P, Q, fillvalue=0)]", "out": "リスト内包記法 変換"}
{"in": "print(x.apply(lambda a: list([v for v in a if v == v])))", "out": "リスト内包記法 フィルタ"}
{"in": "message = MIMEText('Message goes here.')", "out": "正規表現"}
{"in": "re.search('(?<!(asp|php|jsp))\\\\?.*', s)", "out": "正規表現"}
{"in": "[x for x in l if '2' not in x]", "out": "リスト内包記法 フィルタ"}
{"in": "print('Dealer has {} {} showing'.format(*dealer[:2]))", "out": "引数展開"}
{"in": "[(4 if x == 1 else x) for x in a]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "list(chain(*zip_longest(d, e[::-1])))", "out": "引数展開 逆順の列"}
{"in": "input = [x.strip('|').split('|') for x in fd.readlines()]", "out": "リスト内包記法 変換"}
{"in": "{k: get(get(d, k), 'a.b') for k in list(d.keys())}", "out": "辞書内包記法"}
{"in": "\"\"\", \"\"\".join(['1', '2', '3'])", "out": "リストの文字列化"}
{"in": "a[slice(*b)]", "out": "引数展開"}
{"in": "m = pd.MultiIndex.from_arrays(zip(*df[0].str.split('|')))", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(x)", "out": "リストの文字列化"}
{"in": "[random.random() for i in range(N)]", "out": "リスト内包記法 変換"}
{"in": "[(i[0] + j[0], i[1] + j[1]) for i, j in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "[i for i in L1 if i in L2]", "out": "リスト内包記法 フィルタ"}
{"in": "with open('words.txt') as f:\n    [word for line in f for word in line.split()]", "out": "リスト内包記法 変換"}
{"in": "a = [x[:] for x in [[0] * cols] * rows]", "out": "リスト内包記法 変換"}
{"in": "[f(x) for x in l if f(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "return ' '.join(w[::-1] for w in s.split())", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "ax.set_yticklabels(['{:3.2f}%'.format(x * 100) for x in vals])", "out": "辞書内包記法 少数点表示制限"}
{"in": "return self.create(request, *args, **kwargs)", "out": "引数展開"}
{"in": "return re.findall('[a-zA-Z]', s) == re.findall('\\\\+([a-zA-Z])\\\\+', s)", "out": "正規表現"}
{"in": "\"\"\"forward\"\"\"[::-1]", "out": "逆順の列"}
{"in": "[dict(items) for items in product(*flat)]", "out": "辞書内包記法 引数展開"}
{"in": "print(sum(1 for _ in f))", "out": "リスト内包記法 変換"}
{"in": "mydict = {rows[0]: rows[1] for rows in reader}", "out": "辞書内包記法"}
{"in": "def split_iter(string):\n    return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))", "out": "リスト内包記法 変換 正規表現"}
{"in": "df2 = df.apply(lambda x: [pd.Timestamp(ts) for ts in x])", "out": "リスト内包記法 変換"}
{"in": "return [e for e in lelist if e in lestring]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('est$', 'er', word1)", "out": "正規表現"}
{"in": "re.split('(,)', '1,2,3')", "out": "正規表現"}
{"in": "result = [item.rsplit('[', 1)[0] for item in flatten(lst)]", "out": "リスト内包記法 変換"}
{"in": "open('outfile', 'w').write(''.join(data))", "out": "リストの文字列化"}
{"in": "ax.plot(x, 3 * x ** 2, color='g', linestyle='', marker='o')", "out": "累乗演算子"}
{"in": "solve(x ** 3 + 2 * x ** 2 + 4 * x + 8, x)", "out": "累乗演算子"}
{"in": "any(c.islower() for c in 'WORD')", "out": "リスト内包記法 変換"}
{"in": "[x for x in lst if x % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "set.union(*lis)", "out": "引数展開"}
{"in": "(s[:-1] if s.endswith(';') else s).split(';')", "out": "三項演算子"}
{"in": "itertools.chain(*itertools.zip_longest(*iters))", "out": "引数展開"}
{"in": "[i for i, j in mylist]", "out": "リスト内包記法 変換"}
{"in": "main_list = [[(1, 2), (3, 4)], [(5, 6), (7, 8)]]\nzip(*main_list)", "out": "引数展開"}
{"in": "result_string = re.sub('([a-z]+)[?:!.,;]*', '\\\\1', subject_string)", "out": "正規表現"}
{"in": "zip(*list(counter.items()))", "out": "引数展開"}
{"in": "set(sum(sl) for sl in L) == set([3])", "out": "リスト内包記法 変換"}
{"in": "'%.5f' % 0.12345678", "out": "少数点表示制限"}
{"in": "timeit.timeit(\"print('true') if 2+2 == 4 else print('false')\")", "out": "三項演算子"}
{"in": "[tup[0] for tup in mylist]", "out": "リスト内包記法 変換"}
{"in": "clean = [x for x in lis if x != None]", "out": "リスト内包記法 フィルタ"}
{"in": "m = re.match('\\\\d{2,}$', s)", "out": "正規表現"}
{"in": "[' '.join([reps.get(w, w) for w in sentence.split()]) for sentence in li]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "list(map(str.strip, re.split('or', x)))", "out": "正規表現"}
{"in": "list(dict((len(i), i) for i in l).values())", "out": "辞書内包記法"}
{"in": "\"\"\"\n\"\"\".join(elem[0] for elem in queryresult)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "x2 = ''.join(chr(c) for c in x)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print('\\u0631\\u064e\\u062c\\u0627')", "out": "ユニコード"}
{"in": "return [woman for woman in list(graph.keys()) if woman not in list(match.keys())]", "out": "リスト内包記法 フィルタ"}
{"in": "files = [x for x in os.listdir(DIR) if x.endswith('.tga')]", "out": "リスト内包記法 フィルタ"}
{"in": "'\\n'.join([''.join(x) for x in pic]) + '\\n'", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "myfile.write(template.format(**context))", "out": "引数展開"}
{"in": "items = [item.time for item in objects]", "out": "リスト内包記法 変換"}
{"in": "df['date'].iloc[-1]", "out": "末尾の要素"}
{"in": "return {k: v for k, v in list(d.items()) if k.startswith(s)}", "out": "辞書内包記法"}
{"in": "{k: adict[k] for k in ('key1', 'key2', 'key99') if k in adict}", "out": "辞書内包記法"}
{"in": "return ''.join(c for c in s.lower() if c in string.ascii_lowercase)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "[e for i, e in enumerate(a) if i % 30 < 10]", "out": "リスト内包記法 フィルタ"}
{"in": "s = mydatetime.strftime('%m/%d/%Y %I:%M%p').lstrip('0').replace(' 0', ' ')", "out": "日付書式"}
{"in": "print({key: a[key] for key in a if key not in keys})", "out": "辞書内包記法"}
{"in": "print(''.join(difflib.restore(diff, 2)))", "out": "リストの文字列化"}
{"in": "return {c.name: getattr(self, c.name) for c in self.__table__.columns}", "out": "辞書内包記法"}
{"in": "return tuple([x[0] for x in G])", "out": "リスト内包記法 変換"}
{"in": "time_obj = datetime.datetime.strptime(time_str[:19], '%Y-%m-%dT%H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "RichIPythonWidget.__init__(self, *args, **kw)", "out": "引数展開"}
{"in": "c.setopt(c.URL, 'http://www.demaziere.fr/eve/')", "out": "正規表現"}
{"in": "return [[m[row][col] for row in range(0, height)] for col in range(0, width)]", "out": "リスト内包記法 変換"}
{"in": "x = {k: v for k, v in spec1.items() if k in spec2 and spec2[k] == v}", "out": "辞書内包記法"}
{"in": "[entry for tag in tags for entry in entries if tag in entry]", "out": "リスト内包記法 フィルタ"}
{"in": "a = numpy.array([Register() for _ in range(4)])", "out": "リスト内包記法 変換"}
{"in": "urls = [{'url': key, 'nbr': value} for key, value in list(urls_d.items())]", "out": "辞書内包記法"}
{"in": "df.rename(columns=lambda x: int(x) if type(x) == float else x)", "out": "三項演算子"}
{"in": "word_list = [punctuation.sub('', word) for word in word_list]", "out": "リスト内包記法 変換"}
{"in": "any([(i in fruit_dict2) for i in fruits])", "out": "辞書内包記法"}
{"in": "ax.xaxis.set_major_formatter(DateFormatter('%H:%M:%S'))", "out": "時刻書式"}
{"in": "print(next((i for i, r in enumerate(reader) if float(r[1]) < 5), 'Not found'))", "out": "リスト内包記法 フィルタ"}
{"in": "return {k: mylist.count(k) for k in set(mylist)}", "out": "辞書内包記法"}
{"in": "a, b, c = [(lambda n=n: n * n) for n in l]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('\\\\d+', str1))", "out": "正規表現"}
{"in": "min_x, max_x, min_y, max_y = temp[0][0], temp[0][-1], temp[1][0], temp[1][-1]", "out": "末尾の要素"}
{"in": "sum(1 for m in re.finditer('[GATC]+', joined))", "out": "リスト内包記法 変換 正規表現"}
{"in": "numbers = [int(s[i:i + 3], 2) for i in range(0, len(s), 3)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('([A-Z]){2}', callback, s)", "out": "正規表現"}
{"in": "[(100 * abs(aItem - bItem) / aItem < 3) for aItem, bItem in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "return zip(*args)", "out": "引数展開"}
{"in": "return super(UserViewSet, self).dispatch(request, *args, **kwargs)", "out": "引数展開"}
{"in": "blocks = re.findall('(?m)^# REG (.*)\\\\n((?:.*\\\\n)*?)# reg ', fh.read())", "out": "正規表現"}
{"in": "print({v[0]: v[1:] for v in list(d.values())})", "out": "辞書内包記法"}
{"in": "dict(re.findall('(\\\\S+)=(\".*?\"|\\\\S+)', s))", "out": "正規表現"}
{"in": "[(v + 1 if i % 2 != 0 else v) for i, v in enumerate(list1)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[x for x in lst if [(x[A], x[C]) not in seen, seen.add((x[A], x[C]))][0]]", "out": "リスト内包記法 フィルタ"}
{"in": "return super(MyViewSet, self).get_serializer(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join([(c if x[i] == c else s) for i, s in enumerate(y)])", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "lists = [['hello'], ['world', 'foo', 'bar']]\ncombined = [item for sublist in lists for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "r = size ** (1 / (n - 1))", "out": "累乗演算子"}
{"in": "s.split('mango', 1)[-1]", "out": "末尾の要素"}
{"in": "self.treestore.append(piter, ['consistent'])", "out": "正規表現"}
{"in": "print(''.join([c for i, c in enumerate(s) if i == 0 or s[i - 1] != c]))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[x for x in a if x not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "pattern = re.compile('(.+?)\\\\1+')", "out": "正規表現"}
{"in": "next(x for x in lst if matchCondition(x))", "out": "リスト内包記法 フィルタ"}
{"in": "bool(re.search('((\\\\w)\\\\2){2}', 'arrange'))", "out": "正規表現"}
{"in": "[j for i in powerset(s) for j in permutations(i)]", "out": "リスト内包記法 変換"}
{"in": "list(chain(*a))", "out": "引数展開"}
{"in": "return [int(x) for x in arg.split(',')]", "out": "リスト内包記法 変換"}
{"in": "ax.plot(x, 1 * x ** 2, color='r', linestyle='', marker='o')", "out": "累乗演算子"}
{"in": "re.sub('<.*?>', '', string)", "out": "正規表現"}
{"in": "print(''.join(d))", "out": "リストの文字列化"}
{"in": "[sum(x) for x in zip(*lis)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "indexes = [i for i, val in enumerate(list) if val == '\\n']", "out": "リスト内包記法 フィルタ"}
{"in": "pattern = re.compile('.+?\\\\((.+?), (.+?)\\\\)')", "out": "正規表現"}
{"in": "result = {k: (v / len(list_of_dicts)) for k, v in list(summed.items())}", "out": "辞書内包記法"}
{"in": "temp.write('This has \\u266d')", "out": "ユニコード"}
{"in": "[x for y in z if sum(y) > 10 for x in y if x < 10]", "out": "リスト内包記法 フィルタ"}
{"in": "result = re.split('a+', string)", "out": "正規表現"}
{"in": "[hex(i) for i in data]", "out": "リスト内包記法 変換"}
{"in": "l = [max(g, key=lambda x: x[1])[0] for _, g in groups]", "out": "リスト内包記法 変換"}
{"in": "newdict = {x: [] for x in range(10)}", "out": "辞書内包記法"}
{"in": "return None if i == -1 else s[:i]", "out": "三項演算子"}
{"in": "walls = [True, True, True, False]\nhex(int(''.join([str(int(b)) for b in walls]), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "{i: [] for i in x}", "out": "辞書内包記法"}
{"in": "diag = [row[-i - 1] for i, row in enumerate(mat)]", "out": "リスト内包記法 変換"}
{"in": "dict((name, getattr(f, name)) for name in dir(f) if not name.startswith('__'))", "out": "辞書内包記法"}
{"in": "super(Cancellation, self).save(**kw)", "out": "引数展開"}
{"in": "~pd.isnull(df[list_of_cols]).all(axis=1)", "out": "反転演算子"}
{"in": "tqdm_notebook().pandas(*args, **kwargs)", "out": "引数展開"}
{"in": "np.array([[int(i) for i in line.split()] for line in data])", "out": "リスト内包記法 変換"}
{"in": "[zip(x, main2) for x in itertools.combinations(main1, len(main2))]", "out": "リスト内包記法 変換"}
{"in": "[_f for _f in re.compile('(\\\\w+)').split('hello, foo') if _f]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "f.write(''.join(lines))", "out": "リストの文字列化"}
{"in": "re.sub('[^a-z]+', '', s)", "out": "正規表現"}
{"in": "[(x[0], len(x[1]), x[1][0][0]) for x in l]", "out": "リスト内包記法 変換"}
{"in": "[[(j if j is not None else findMax(k)) for k, j in enumerate(i)] for i in l]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[name for name, thing in inspect.getmembers([])]", "out": "リスト内包記法 変換"}
{"in": "super(ModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "TEMPLATE_CONTEXT_PROCESSORS = 'django.core.context_processors.request',", "out": "正規表現"}
{"in": "tk.Toplevel.__init__(self, master, **kwargs)", "out": "引数展開"}
{"in": "dict((c, string.count(c)) for c in set(string))", "out": "辞書内包記法"}
{"in": "all([(xdiff[0] == xdiff[n]) for n in range(1, len(xdiff))])", "out": "リスト内包記法 変換"}
{"in": "return s[::-1].replace(old[::-1], new[::-1], count)[::-1]", "out": "逆順の列"}
{"in": "a_b = [e for e in a if not e in b]", "out": "リスト内包記法 フィルタ"}
{"in": "L[-1]", "out": "末尾の要素"}
{"in": "l[1::2] = [(x * 2) for x in l[1::2]]", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "np.array(x == 'True' for x in my_list)", "out": "リスト内包記法 変換"}
{"in": "print(list(solve((x for x in [0, 1, -1, 3, 7, 4, 5, 3, 2, 4, 8]), 2)))", "out": "リスト内包記法 変換"}
{"in": "[len(t) for t in tuples]", "out": "リスト内包記法 変換"}
{"in": "sum(d * 3 ** (-i - 1) for i, d in enumerate(base3fraction(x)))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "a = b if a < b else a", "out": "三項演算子"}
{"in": "re.sub('\\\\W', 'X', str)", "out": "正規表現"}
{"in": "dic[keys[-1]] = value", "out": "末尾の要素"}
{"in": "len(max(re.compile('(b+b)*').findall(my_str)))", "out": "正規表現"}
{"in": "heapq.nsmallest(1, ((k, i) for i, k in enumerate(s)))", "out": "リスト内包記法 変換"}
{"in": "answer = [v for v in itertools.product(*ranges) if sum(v) == 100]", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "[i for i, v in enumerate(list1) if v >= 1 and list2[i] == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "print([(num if num > 0 else z.pop(0)) for num in y])", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "print([i for i in results])", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join(d)", "out": "リストの文字列化"}
{"in": "[a for a in my_array if a != 'abc']", "out": "リスト内包記法 フィルタ"}
{"in": "[id(x) for x in l2]", "out": "リスト内包記法 変換"}
{"in": "l = ['a', 'b', 'c', 'd', 'e', ' ']\nd = dict([(k, v) for k, v in zip(l[::2], l[1::2])])", "out": "辞書内包記法 ひとつおきの列"}
{"in": "items = (item for lst in (L2, L3) for item in lst)", "out": "リスト内包記法 変換"}
{"in": "print({item: (yield ''.join([item, 's'])) for item in myset})", "out": "辞書内包記法 リストの文字列化"}
{"in": "[(x + y) for x in '1' for y in 'pot']", "out": "リスト内包記法 変換"}
{"in": "zip(*(x[i:] for i in range(n)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "return flask.jsonify(**course_list)", "out": "引数展開"}
{"in": "print(list(map(int, chain.from_iterable(line.split() for line in f))))", "out": "リスト内包記法 変換"}
{"in": "not any(el == 0 for sublist in maze for el in sublist)", "out": "リスト内包記法 変換"}
{"in": "[{'connection': d} for d in map(dict, inner)]", "out": "辞書内包記法"}
{"in": "timestamp = datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "df['Date'].dt.strftime('%Y-%V')", "out": "日付書式"}
{"in": "ax.plot(x, 3 * x ** 2, color='g', label='t = 500')", "out": "累乗演算子"}
{"in": "return ax.imshow(im, *args, **kwargs)", "out": "引数展開"}
{"in": "super(EligibilityForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "strvar = '\\n'.join(strvar)", "out": "リストの文字列化"}
{"in": "sorted([2, -1, 3], key=lambda x: x ** 2, reverse=True)", "out": "累乗演算子"}
{"in": "re.sub(\"r'.'\", '', \"This r'x' will match\")", "out": "正規表現"}
{"in": "x, y = zip(*xy)", "out": "引数展開"}
{"in": "df['day'] = [t.day for t in df.DateOccurence]", "out": "リスト内包記法 変換"}
{"in": "figure.canvas.draw()", "out": "正規表現"}
{"in": "mylist = [''.join(word.split('l')[:2]) for word in ['Hello', 'world']]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "my_list = [tuple(i) for i in my_list]\nsorted(set(my_list))", "out": "リスト内包記法 変換"}
{"in": "re.escape('\\\\ a.*$')", "out": "正規表現"}
{"in": "def find_min_id(l):\n    return min(d['id'] for d in l if 'id' in d)", "out": "リスト内包記法 フィルタ"}
{"in": "rmfield = lambda a, *f: a[[n for n in a.dtype.names if n not in f]]", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "print(sum([i[list(i.keys())[0]][1] for i in myList]))", "out": "リスト内包記法 変換"}
{"in": "[item for item in full_list if not omit & set(item)]", "out": "リスト内包記法 フィルタ"}
{"in": "foo = (x ** 2 for x in count())", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "Row(**row_dict)", "out": "引数展開"}
{"in": "dict(namevalue.partition('=')[::2] for namevalue in shlex.split(s))", "out": "辞書内包記法 ひとつおきの列"}
{"in": "return obj.timefield.strftime('%d %b %Y %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "max(values[i + 1] - values[i] for i in range(0, len(values) - 1))", "out": "リスト内包記法 変換"}
{"in": "result = [split_result[0], split_result[1], [i for i in split_result[2:] if i]]", "out": "リスト内包記法 フィルタ"}
{"in": "datetime.strptime(date_posted, '%Y-%m-%dT%H:%M:%S.%fZ')", "out": "日付書式 時刻書式"}
{"in": "map(sum, zip(*([iter(q)] * 2)))", "out": "引数展開"}
{"in": "all(x[-1] == 'H' or x == 'QS' for x in mycards)", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "print([attr.get(idx, default_value) for attr in attrs])", "out": "リスト内包記法 変換"}
{"in": "print('{:>8s}'.format('\\u3042\\u308a\\u304c\\u3068\\u3046'))", "out": "ユニコード"}
{"in": "a = [('A', 'V', 'C'), ('A', 'D', 'D')]\n[''.join(x) for x in a]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[dict(zip(KEYS, values)) for values in retrieve('age', 35)]", "out": "辞書内包記法"}
{"in": "found = re.search('AAA(.+?)ZZZ', text).group(1)", "out": "正規表現"}
{"in": "[x for x in ['123', 'hello', '456'] if x.isalpha()]", "out": "リスト内包記法 フィルタ"}
{"in": "p = re.compile('lalala(I want this part)lalala')", "out": "正規表現"}
{"in": "return ''.join(c for c in s.lower() if c in string.ascii_lowercase)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "super(MyMixin, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nzip(*([iter(l)] * 2))", "out": "引数展開"}
{"in": "html = ''.join(line.strip() for line in html.split('\\n'))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "li == [(x + y) for x in 'catty' for y in 'pot']", "out": "リスト内包記法 変換"}
{"in": "return (f(v) for v in vals)", "out": "リスト内包記法 変換"}
{"in": "\"\"\"C:\\\\Users\\\\Judge\"\"\".replace('\\\\', '/')", "out": "ユニコード"}
{"in": "return tuple.__new__(*args, **kwargs)", "out": "引数展開"}
{"in": "dict((k, D[k] - v) for v, k in enumerate(albums_today))", "out": "辞書内包記法"}
{"in": "zip(my_list, operator.itemgetter(*my_list)(my_dictionary))", "out": "引数展開"}
{"in": "print(','.join(s))", "out": "リストの文字列化"}
{"in": "print([_ for _ in range(5)])", "out": "リスト内包記法 変換"}
{"in": "contents = ''.join(str(item) for item in notices.contents)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "my_string.format(**D(name='minerz029'))", "out": "引数展開"}
{"in": "re.compile('(?<!\\\\S)word(?!\\\\S)')", "out": "正規表現"}
{"in": "DataFrame(dict([(k, Series(v)) for k, v in d.items()]))", "out": "辞書内包記法"}
{"in": "map(ord, 'Hello, \\u9a6c\\u514b'.encode('utf8'))", "out": "ユニコード"}
{"in": "assert date_object == datetime.strptime(date_string, '%d/%m/%Y').date()", "out": "日付書式"}
{"in": "sum(dct.get(k, 0) for k in lst)", "out": "リスト内包記法 変換"}
{"in": "df = pd.DataFrame({i: list(range(1000)) for i in range(100)})\ndf.ix[:5, :10]", "out": "辞書内包記法"}
{"in": "re.match('(?:(\\\\d+)Y)?(?:(\\\\d+)M)?', '3M').groups()", "out": "正規表現"}
{"in": "return {k: list(map(add_element, v)) for k, v in list(dicty.items())}", "out": "辞書内包記法"}
{"in": "print('\\n'.join(map(' | '.join, itertools.combinations(l, i + 1))))", "out": "リストの文字列化"}
{"in": "index_sets = [np.argwhere(i == a) for i in np.unique(a)]", "out": "リスト内包記法 変換"}
{"in": "list(zip(*itertools.zip_longest(*ll)))", "out": "引数展開"}
{"in": "pat = re.compile('([A-Z][a-z]*)')", "out": "正規表現"}
{"in": "return [(row if all(row) else [0] * len(row)) for row in matrix]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "widget.setWindowFlags(QtCore.Qt.Window)", "out": "正規表現"}
{"in": "re.sub(pattern, '\\\\1 xby ', '2x4x12')", "out": "正規表現"}
{"in": "return '\\n'.join('\\t'.join(i) for i in pairs)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "f.write('\\u0a0aline1\\n\\xffline2\\n')", "out": "ユニコード"}
{"in": "re.search('[^9]*(99)?', 'aa9x99bb').groups()", "out": "正規表現"}
{"in": "''.join(difflib.restore(diff, 1)) == ''.join(foo)", "out": "リストの文字列化"}
{"in": "[a for a in alphastartgen(8)]", "out": "リスト内包記法 変換"}
{"in": "{i[0]: map(int, j) for i, j in p}", "out": "辞書内包記法"}
{"in": "dict(x.split(':') for x in a)", "out": "辞書内包記法"}
{"in": "dict(zip(freq[1::2], freq[0::2]))", "out": "ひとつおきの列"}
{"in": "[(l[i], l[(i + 1) % n]) for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "string_input = ''.join(current_string)", "out": "リストの文字列化"}
{"in": "new_list = [x for x in myList if x.age == 30]", "out": "リスト内包記法 フィルタ"}
{"in": "r = [x for x in powerset(l)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\bfoo\\\\b', strs)", "out": "正規表現"}
{"in": "return view_func(request, *args, **kwargs)", "out": "引数展開"}
{"in": "df.loc[:, (~df.columns.str.contains('prefix$'))]", "out": "反転演算子"}
{"in": "m1_dicts = [d for d in dictionaries_list if d['t'] in tuple_dict['t']]", "out": "辞書内包記法"}
{"in": "return authlogout(request, *args, **kwargs)", "out": "引数展開"}
{"in": "list(chain(*a))", "out": "引数展開"}
{"in": "any(dict_obj.get(prop) is None for prop in properties_to_check_for)", "out": "辞書内包記法"}
{"in": "all(not X for X in dict.values())", "out": "辞書内包記法"}
{"in": "print(datetime.strptime('20110531', '%Y%m%d'))", "out": "日付書式"}
{"in": "df.loc[~df['A'].duplicated()]", "out": "反転演算子"}
{"in": "datetime.datetime.now().strftime('%Y%m%d')", "out": "日付書式"}
{"in": "[('%s:%s' % (x, y)) for x, y in itertools.product(a, b)]", "out": "リスト内包記法 変換"}
{"in": "super(YourSerializer, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[(v1 * list1[j]) for i, v1 in enumerate(list1) for j in range(i)]", "out": "リスト内包記法 変換"}
{"in": "fact = lambda x: 1 if x == 0 else x * fact(x - 1)", "out": "三項演算子"}
{"in": "return random.randint(10 ** (x - 1), 10 ** x - 1)", "out": "累乗演算子"}
{"in": "new_list = list(set([date for date in dates if dates.count(date) > 1]))", "out": "リスト内包記法 フィルタ"}
{"in": "URL.split('/')[-1]", "out": "末尾の要素"}
{"in": "return (index for index, value in enumerate(obj))", "out": "リスト内包記法 変換"}
{"in": "answer = map(len, re.findall('1+', test_string))", "out": "正規表現"}
{"in": "print(''.join('%-5s' % item for item in s.split('\\t')))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return [sum(g) for b, g in itertools.groupby(bits) if b]", "out": "リスト内包記法 フィルタ"}
{"in": "print(' '.join(map(str, xs)))", "out": "リストの文字列化"}
{"in": "[it for it in l for _ in range(2)]", "out": "リスト内包記法 変換"}
{"in": "int(bits[::-1], 2).to_bytes(4, 'little')", "out": "逆順の列"}
{"in": "print([b(5, 8) for b in bases])", "out": "リスト内包記法 変換"}
{"in": "df_output_lines = [s.split() for s in fixed_df_output.splitlines()]", "out": "リスト内包記法 変換"}
{"in": "next((x for x in range(10) if x == 7), None)", "out": "リスト内包記法 フィルタ"}
{"in": "centroids = [prefs[random.choice(users)] for i in range(k)]", "out": "リスト内包記法 変換"}
{"in": "second_d = {k: v for k, v in list(first_d.items()) if k in (2, 3)}", "out": "辞書内包記法"}
{"in": "a1 = [(sublist + ['a']) for sublist in a]", "out": "リスト内包記法 変換"}
{"in": "np.array([np.array(x) for x in set(tuple(x) for x in a)])", "out": "リスト内包記法 変換"}
{"in": "print(repr('\\n'.join(['I', 'would', 'expect', 'multiple', 'lines'])))", "out": "リストの文字列化"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "all(v in value for v in input_list)", "out": "リスト内包記法 変換"}
{"in": "matcher = re.compile('(.)\\\\1*')", "out": "正規表現"}
{"in": "def copyf(dictlist, key, valuelist):\n    return [dictio for dictio in dictlist if dictio[key] in valuelist]", "out": "辞書内包記法"}
{"in": "cf.insert(uuid.uuid4(), [{k: str(v) for k, v in d.items()} for d in x])", "out": "辞書内包記法"}
{"in": "(dist ** 2).sum(axis=2) ** 0.5", "out": "累乗演算子"}
{"in": "myNames = [line.strip() for line in f]", "out": "リスト内包記法 変換"}
{"in": "print(('Predicted ', top_indices[0], ' for your input image.'))", "out": "辞書内包記法"}
{"in": "g2 = [elem[:12] for elem in g]", "out": "リスト内包記法 変換"}
{"in": "any(isinstance(e, list) for e in my_list)", "out": "リスト内包記法 変換"}
{"in": "text = re.sub('<[^>]*?>', ' ', str(site[0].extract()))", "out": "正規表現"}
{"in": "any(thelist.count(x) > 1 for x in thelist)", "out": "リスト内包記法 変換"}
{"in": "j2 = [x for x in j if x >= 5]", "out": "リスト内包記法 フィルタ"}
{"in": "return [i for i, letter in enumerate(s) if letter == ch]", "out": "リスト内包記法 フィルタ"}
{"in": "df['Date'] = pd.to_datetime(df['Date'], format='%Y%m') + MonthEnd(1)", "out": "日付書式"}
{"in": "result = re.finditer(regex, line)", "out": "正規表現"}
{"in": "aslist = [float(x) for x in data.split(',')]", "out": "リスト内包記法 変換"}
{"in": "this_array[indices[0]:indices[-1] + 1].fill(new_v)", "out": "末尾の要素"}
{"in": "dropped_copies = [(lambda i: (x[i] for x in copies[i]))(i) for i in range(2)]", "out": "リスト内包記法 変換"}
{"in": "super().__init__(**kwargs)", "out": "引数展開"}
{"in": "re.search('\\\\d+|$', 'aazzzbbb').group()", "out": "正規表現"}
{"in": "print(re.findall(p, test_str))", "out": "正規表現"}
{"in": "sql.append(', '.join(\"%s = '%s'\" % (k, v) for k, v in kwargs.items()))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "nsolve([x + y ** 2 - 4, exp(x) + x * y - 3], [x, y], [1, 1])", "out": "累乗演算子"}
{"in": "[entry for tag in tags for entry in entries if tag in entry]", "out": "リスト内包記法 フィルタ"}
{"in": "print([(k, d3[k]) for k in d1 if d3[k] < l])", "out": "リスト内包記法 フィルタ"}
{"in": "return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))", "out": "リスト内包記法 変換"}
{"in": "pd.rolling_sum(ts[::-1], window=3, min_periods=0)[::-1]", "out": "逆順の列"}
{"in": "return ''.join([x for x in s if ord(x) < 128])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "newArray = [(i + 1) for i in array]", "out": "リスト内包記法 変換"}
{"in": "characters += sum(len(word) for word in wordslist)", "out": "リスト内包記法 変換"}
{"in": "print(df.loc[:, (~mask)])", "out": "反転演算子"}
{"in": "cleanedList = [x for x in countries if str(x) != 'nan']", "out": "リスト内包記法 フィルタ"}
{"in": "splitted = [i.strip() for i in re.split(pattern, s) if i.strip()]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "return any(np.allclose(row, x) for x in myarray)", "out": "リスト内包記法 変換"}
{"in": "sent = [' '.join(' '.join(v) for v in sent)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict.__setitem__(self, keys[-1], value)", "out": "末尾の要素"}
{"in": "sum([i for i in l1 if isinstance(i, numbers.Number)])", "out": "リスト内包記法 フィルタ"}
{"in": "{k: min(i for i in (h1.get(k), h2.get(k)) if i) for k in list(h1.keys()) | h2}", "out": "辞書内包記法"}
{"in": "new_list.append(' '.join(words))", "out": "リストの文字列化"}
{"in": "result = [sum(el) for el in itertools.zip_longest(fillvalue=0, *lists)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "sum(row['keyA'] for row in rows)", "out": "リスト内包記法 変換"}
{"in": "d = {r[0]: tuple(r[1:-1]) for r in reader}", "out": "辞書内包記法"}
{"in": "string = '\\n'.join(Permute('abc'))", "out": "リストの文字列化"}
{"in": "super(OrderForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return x[0] + x[-1]", "out": "末尾の要素"}
{"in": "\"\"\"\"\"\".join(s.partition('.zip')[0:2])", "out": "リストの文字列化"}
{"in": "count = (~np.einsum('ij->i', listScore != [2, 0])).sum()", "out": "反転演算子"}
{"in": "results = results.replace('\\\\u', '&#x')", "out": "ユニコード"}
{"in": "return ''.join(random.choice(string.ascii_letters) for i in range(size))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "firstone = next((x for x in d if x in paid[j]), None)", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('(orig.*?l)', repl, 'This is the original string.')", "out": "正規表現"}
{"in": "return re.sub('\\\\d+', 'X', re.sub('\\\\d+/\\\\d+', 'X/Y', w))", "out": "正規表現"}
{"in": "super(BeautifulSoup.BeautifulSoup, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "lst = [(1, 2), (3, 4), (5, 6)]\n[x for x, _ in lst]", "out": "リスト内包記法 変換"}
{"in": "return jsonify(json_list=[i.serialize for i in qryresult.all()])", "out": "リスト内包記法 変換"}
{"in": "innerre = re.compile(\"\\\\('([^']+)', '([^']+)'\\\\)\")", "out": "正規表現"}
{"in": "\"\"\"-\"\"\".join(a + b for a, b in zip_longest(t, t, fillvalue=''))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "{(x, x + 2) for x in r if x + 2 in r}", "out": "辞書内包記法"}
{"in": "f = lambda count: [(random() - 0.5, random() - 0.5) for _ in range(count)]", "out": "リスト内包記法 変換"}
{"in": "super(Audit, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "temp_list = (x * x for x in range(0, 10))", "out": "リスト内包記法 変換"}
{"in": "sum(1 for ch in 'A\\u0332\\u0305BC' if unicodedata.combining(ch) == 0)", "out": "リスト内包記法 フィルタ ユニコード"}
{"in": "any(v > 0 for v in pairs.values())", "out": "リスト内包記法 変換"}
{"in": "data = pd.DataFrame(json.loads(line) for line in f)", "out": "リスト内包記法 変換"}
{"in": "soup.find_all('table', {'class': re.compile('class[17]')})", "out": "正規表現"}
{"in": "my_args = ['foo', 'bar', 'baz']\n'Hello %s' % ', '.join(my_args)", "out": "リストの文字列化"}
{"in": "'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'", "out": "反転演算子"}
{"in": "mpl.pyplot.legend(**dict(list(defaults.items()) + list(kwargs.items())))", "out": "引数展開"}
{"in": "arr = np.fromstring(','.join(raw_locs), sep=',').reshape(-1, 2)", "out": "リストの文字列化"}
{"in": "b = a[..., ::-1]", "out": "逆順の列"}
{"in": "return super(ProgressInline, self).get_formset(request, obj, **kwargs)", "out": "引数展開"}
{"in": "sum(v[1][1] for v in itertools.chain(*[list(d.items()) for d in myList]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "min(x for x in L if x is not None)", "out": "リスト内包記法 フィルタ"}
{"in": "words = [line.strip() for line in open('/etc/dictionaries-common/words')]", "out": "辞書内包記法"}
{"in": "set(tuple(sorted(elt)) for elt in example)", "out": "リスト内包記法 変換"}
{"in": "fact = lambda x: 1 if x == 0 else x * fact(x - 1)", "out": "三項演算子"}
{"in": "f.write('\\n'.join(' '.join(map(str, x)) for x in (a, b)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "datetime.datetime.strptime('1936-077T13:14:15', '%Y-%jT%H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "data = [(item + 256 if item < 0 else item) for item in data]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "return x[0] + x[-1]", "out": "末尾の要素"}
{"in": "self.label.setAlignment(QtCore.Qt.AlignCenter)", "out": "正規表現"}
{"in": "asking = ''.join(l for l in asking if l not in string.punctuation)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print(''.join(map(str, pi)))", "out": "リストの文字列化"}
{"in": "list(list(zip(r, p)) for r, p in zip(repeat(a), permutations(b)))", "out": "リスト内包記法 変換"}
{"in": "print('stderr:', ''.join(stderr))", "out": "リストの文字列化"}
{"in": "numpy.array([a[i:i + 4] for i in range(len(a) - 3)])", "out": "リスト内包記法 変換"}
{"in": "ax.plot(x, 1 * x ** 2, color='r', label='t = 25')", "out": "累乗演算子"}
{"in": "[(a.__setslice__(1, 2, a[1].split('-')) or a) for a in arr]", "out": "リスト内包記法 変換"}
{"in": "return self.post(*args, **kwargs)", "out": "引数展開"}
{"in": "y = dict(x, **{(2): 3})", "out": "引数展開"}
{"in": "mylist = re.split('\\\\s+(?=\\\\w+:)', searchString)", "out": "正規表現"}
{"in": "l = [[1, 2, 3], [2, 4, 5], [1, 2, 3], [2, 4, 5]]\nset(tuple(i) for i in l)", "out": "リスト内包記法 変換"}
{"in": "m = [x for x in l if x[0] == 'a']", "out": "リスト内包記法 フィルタ"}
{"in": "max(sum(1 for i in g) for k, g in groupby(L))", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime(x1, '%a %b %d %H:%M:%S %Z%z %Y').strftime('%s')", "out": "日付書式 時刻書式"}
{"in": "raise TypeError('window_size is too small for the polynomials order')", "out": "リスト内包記法 変換"}
{"in": "pd.merge(position, df[~idx], on=['BP', 'chromosome'], how='left')", "out": "反転演算子"}
{"in": "[next(gen) for _ in range(6)]", "out": "リスト内包記法 変換"}
{"in": "biggest = [x[0] for x in d.most_common(6)]", "out": "リスト内包記法 変換"}
{"in": "list(IT.izip_longest(*readers))", "out": "引数展開"}
{"in": "letters = [choice(ascii_lowercase) for _ in range(5)]", "out": "リスト内包記法 変換"}
{"in": "print(''.join(line for line in f if not line.isspace()))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "regex = re.compile('\\\\b(' + '|'.join(states) + ')\\\\b', re.IGNORECASE)", "out": "正規表現 リストの文字列化"}
{"in": "a = 'neg' if b < 0 else 'pos' if b > 0 else 'zero'", "out": "三項演算子"}
{"in": "return seq[::2], seq[1::2]", "out": "ひとつおきの列"}
{"in": "print([r.lower() for r in row])", "out": "リスト内包記法 変換"}
{"in": "return s == s[::-1]", "out": "逆順の列"}
{"in": "filelist = [f for f in os.listdir('.') if f.endswith('.bak')]", "out": "リスト内包記法 フィルタ"}
{"in": "new_rows.append([str(elt).expandtabs() for elt in row])", "out": "リスト内包記法 変換"}
{"in": "even = [n for n in numbers[:numbers.index(412)] if not n % 2]", "out": "リスト内包記法 フィルタ"}
{"in": "value in dictionary or any(value == dictionary[key] for key in dictionary)", "out": "辞書内包記法"}
{"in": "dict(k.partition('=')[::2] for k in split)", "out": "辞書内包記法 ひとつおきの列"}
{"in": "[(i, sum(j)) for i, j in list(d.items())]", "out": "リスト内包記法 変換"}
{"in": "x.plot(kind='bar').legend(*args, **kwargs)", "out": "引数展開"}
{"in": "b = a[4] if len(a) > 4 else 'sss'", "out": "三項演算子"}
{"in": "item = singlet_list[0] if len(singlet_list) == 1 else False", "out": "三項演算子"}
{"in": "match = re.search('(\\\\d+/\\\\d+/\\\\d+)', 'The date is 11/12/98')", "out": "正規表現"}
{"in": "return QtCore.QVariant()", "out": "正規表現"}
{"in": "paragraphs = re.search('(.+?\\n\\n|.+?$)', TEXT, re.DOTALL)", "out": "正規表現"}
{"in": "dot_product = sum(dict_1[key] * dict_2.get(key, 0) for key in dict_1)", "out": "辞書内包記法"}
{"in": "[x.time for x in list_of_objects]", "out": "リスト内包記法 変換"}
{"in": "return pd.MultiIndex.from_tuples(list(product(*categories)), names=names)", "out": "引数展開"}
{"in": "line = re.sub('TargetName=.+', 'TargetName=D:\\\\\\\\new', line)", "out": "正規表現"}
{"in": "s[~s.isnull()]", "out": "反転演算子"}
{"in": "raise ImportError('mpi4py is required for parallelization')", "out": "リスト内包記法 変換"}
{"in": "django.contrib.auth.middleware.AuthenticationMiddleware", "out": "正規表現"}
{"in": "res = [((s[i] + s[i + 1]) / 2) for i in range(0, len(s) - 1, 2)]", "out": "リスト内包記法 変換"}
{"in": "unpack('d', ''.join(value))", "out": "リストの文字列化"}
{"in": "words.append('%s to %s' % (span[0], span[-1]))", "out": "末尾の要素"}
{"in": "print(re.match('^[a-zA-Z0-9_.-]+$', '    '))", "out": "正規表現"}
{"in": "re.search('\\\\S', a).start()", "out": "正規表現"}
{"in": "d = {'key1': 'value1', 'key2': 'value2'}\n['{}_{}'.format(k, v) for k, v in d.items()]", "out": "辞書内包記法"}
{"in": "min(map(lambda x: string.index(x) if x in string else len(string), specials))", "out": "三項演算子"}
{"in": "[m.groupdict() for m in re.finditer('(?P<b>.b.)|(?P<i>.i.)', 'abcdefghijk')]", "out": "辞書内包記法 正規表現"}
{"in": "f.write(','.join(map(str([s1, item, 1, list1[item - 1], er2]))))", "out": "リストの文字列化"}
{"in": "\"\"\"-\"\"\".join(sentence)", "out": "リストの文字列化"}
{"in": "value = re.sub('[^0-9]+', '', value)", "out": "正規表現"}
{"in": "ar = [[str(item) for item in results] for results in cur.fetchall()]", "out": "リスト内包記法 変換"}
{"in": "list(chain(*zip_longest(d, e[::-1], fillvalue='')))", "out": "引数展開 逆順の列"}
{"in": "data = [x for x in data if type(x) == float]", "out": "リスト内包記法 フィルタ"}
{"in": "[i for i in l for r in range(2)]", "out": "リスト内包記法 変換"}
{"in": "writer.writerow(re.split('[\\t|]', line))", "out": "正規表現"}
{"in": "[(x - y) for x, y in it.izip(a[1:], a)]", "out": "リスト内包記法 変換"}
{"in": "lst = [None] + [x[1:] for x in sorted(lists)]", "out": "リスト内包記法 変換"}
{"in": "b = word in (w for i, w in enumerate(wordList) if i != 1)", "out": "リスト内包記法 フィルタ"}
{"in": "s = 'Name1=Value1;Name2=Value2;Name3=Value3'\ndict(item.split('=') for item in s.split(';'))", "out": "辞書内包記法"}
{"in": "s = ''.join(chr(c) for c in range(1114111 + 1))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "fun(**{b.decode(): v for b, v in list(dic.items())})", "out": "辞書内包記法 引数展開"}
{"in": "[''.join(y) for _, y in groupby(s)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "sympy.solve([sympy.Eq(b - a ** 2.552 - c), sympy.Eq(b, 2)], rational=False)", "out": "累乗演算子"}
{"in": "globals().update({name: module_dict[name] for name in to_import})", "out": "辞書内包記法"}
{"in": "zip(*(s[i:] for i in range(n)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "return object.__new__(cls, *args, **kwargs)", "out": "引数展開"}
{"in": "print(', '.join(map(sep, tags)))", "out": "リストの文字列化"}
{"in": "d = re.sub('(-|\\\\+|\\\\*\\\\*|\\\\*) ', '\\\\1', c)", "out": "正規表現"}
{"in": "list(chain.from_iterable([['^', x] for x in mystring]))", "out": "リスト内包記法 変換"}
{"in": "'%07.3f' % 5", "out": "少数点表示制限"}
{"in": "hist([(t.hour + t.minute / 60.0) for t in ts], bins=24 * 60 / 15)", "out": "リスト内包記法 変換"}
{"in": "self.emit(QtCore.SIGNAL('XXX'))", "out": "正規表現"}
{"in": "print([result.get(timeout=10) for result in results])", "out": "リスト内包記法 変換"}
{"in": "l = [['x1', 'y1'], ['x2', 'y2']]\nzip(*l)", "out": "引数展開"}
{"in": "return [functions[i](values[i]) for i in range(len(functions))]", "out": "リスト内包記法 変換"}
{"in": "parrot(**d)", "out": "引数展開"}
{"in": "re.split('|'.join(list1), s)", "out": "正規表現 リストの文字列化"}
{"in": "print('Today: ', datetime.today().strftime('%d/%m/%Y'))", "out": "日付書式"}
{"in": "return [rowdict.get(key, self.restval) for key in self.fieldnames]", "out": "辞書内包記法"}
{"in": "print(list(itertools.chain(*kana)))", "out": "引数展開"}
{"in": "print(re.findall('(.(?:foo))', 'Xfoo'))", "out": "正規表現"}
{"in": "s = 'hi'\n[ord(c) for c in s]", "out": "リスト内包記法 変換"}
{"in": "new_s = ''.join((s[:1], new, s[6:]))", "out": "リストの文字列化"}
{"in": "next((x for x in seq if predicate(x)), None)", "out": "リスト内包記法 フィルタ"}
{"in": "numpy.array([network.activate(x) for x, _ in train])", "out": "リスト内包記法 変換"}
{"in": "toks = re.compile(' +|[A-Za-z]+|[()]')", "out": "正規表現"}
{"in": "del L[::2]", "out": "ひとつおきの列"}
{"in": "[(x * 2) for x in [2, 2]]", "out": "リスト内包記法 変換"}
{"in": "[(stuff + stuff[:n / 2 - 1])[i:i + n / 2] for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('abc\\\\s+def')", "out": "正規表現"}
{"in": "min_price = min(item['price'] for item in items)", "out": "リスト内包記法 変換"}
{"in": "rawstr = ''.join(list(mydict.keys()))", "out": "リストの文字列化"}
{"in": "super(CustomBarModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "a = 'Hello' if foo() else 'Goodbye'", "out": "三項演算子"}
{"in": "print(os.path.abspath(os.path.expanduser('~/blob_files/myfile.blob')))", "out": "反転演算子"}
{"in": "outfile.write(','.join([('%f' % value) for value in values]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(int(lst[x]) if x in indices else lst[x]) for x in range(len(lst))]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "i = [int(x) for x in s.split()]", "out": "リスト内包記法 変換"}
{"in": "l = ['a', 'b', 'c', 'd', 'e', 'f']\nzip(*([iter(l)] * 2))", "out": "引数展開"}
{"in": "[k for k in list(mydict.keys()) if k >= 6]", "out": "辞書内包記法"}
{"in": "cleanedList = [x for x in countries if x != 'nan']", "out": "リスト内包記法 フィルタ"}
{"in": "rows = [[field[k][i] for k in list(field.keys())] for i in range(2)]", "out": "リスト内包記法 変換"}
{"in": "[ast.literal_eval(el) for el in lst]", "out": "リスト内包記法 変換"}
{"in": "dt = datetime.strptime(s, '%d/%m/%Y-%H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "f = open(os.path.expanduser('~/Desktop/somefile.txt'))", "out": "反転演算子"}
{"in": "[{'index': date, 'value': val} for date, val in zip(d['index'], d['data'])]", "out": "辞書内包記法"}
{"in": "p = re.compile('Num\\\\d{2}')", "out": "正規表現"}
{"in": "super(MyModel, self).delete(*args, **kwargs)", "out": "引数展開"}
{"in": "print([abs(v - l[(i + 1) % len(l)]) for i, v in enumerate(l)])", "out": "リスト内包記法 変換"}
{"in": "[(k, adict[k]) for k in sorted(adict, key=adict.get, reverse=True)]", "out": "辞書内包記法"}
{"in": "function(*args, **kwargs)", "out": "引数展開"}
{"in": "return [myslice(*map(int, x.split('-'))) for x in s.split(',')]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[x for x in list(Person().__dict__.keys()) if not x.startswith('_')]", "out": "辞書内包記法"}
{"in": "[[z[i] for z in foo] for i in (0, 1)]", "out": "リスト内包記法 変換"}
{"in": "B = A[::2, :, 1:2]", "out": "ひとつおきの列"}
{"in": "defaultdeletechars = set(\"~!@#$%^&*()-=+~\\\\|]}[{';: /?.>,<\")", "out": "反転演算子"}
{"in": "primes = {p for p in primes if '0' not in str(p)}", "out": "辞書内包記法"}
{"in": "sum(i for i in range(1000) if i % 3 == 0 or i % 5 == 0)", "out": "リスト内包記法 フィルタ"}
{"in": "return {t: [next(it) for _ in range(next(it))] for t in it}", "out": "辞書内包記法"}
{"in": "super(MySpider, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "all(item[2] == 0 for item in items)", "out": "リスト内包記法 変換"}
{"in": "output.write(unhexlify(''.join(format(i[2:], '>02s') for i in b)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "myApp.setWindowFlags(QtCore.Qt.Tool)", "out": "正規表現"}
{"in": "s = BeautifulSoup('<p>Test 1 <span>More</span> Test 2</p>')\n''.join([s.string for s in s.findAll(text=True)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "super(OrderedDefaultdict, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"Retrieve and return uptime for each host\"\"\"", "out": "リスト内包記法 変換"}
{"in": "results = [t.age for t in mylist if t.person_id == 10]", "out": "リスト内包記法 フィルタ"}
{"in": "Color(**{'r': r, 'g': g, 'b': b})", "out": "引数展開"}
{"in": "contents = [row.strip('\\n').split(', ') for row in open('table1.txt', 'r+')]", "out": "リスト内包記法 変換"}
{"in": "[x for i, x in enumerate(y) if i != 0 and x != 6]", "out": "リスト内包記法 フィルタ"}
{"in": "[t for t in my_set if my_list.count(t) > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('[^a-zA-Z]+', '', 'ABC12abc345def')", "out": "正規表現"}
{"in": "y = dict(x, foo='spam', bar='eggs', **{(2): 3, (42): 81})", "out": "引数展開"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "iv = bytes([random.randint(0, 255) for i in range(16)])", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('(?<!\\\\[)(\\\\d{4})(?!\\\\])')", "out": "正規表現"}
{"in": "next(elem for elem in lst if isinstance(elem, dict) and 'k' in elem)", "out": "辞書内包記法"}
{"in": "return ''.join(sourcelines)", "out": "リストの文字列化"}
{"in": "[(seen.add(obj.id) or obj) for obj in mylist if obj.id not in seen]", "out": "リスト内包記法 フィルタ"}
{"in": "print(RE.sub('', '\\u7f8e\\u56fd').encode('utf-8'))", "out": "ユニコード"}
{"in": "[a.join(b) for a, b in zip(df.a, df.b)]", "out": "リスト内包記法 変換"}
{"in": "open(os.path.join(os.path.expanduser('~'), 'rest/of/path/to.file'))", "out": "反転演算子"}
{"in": "my_list = [dict(out[v]) for v in sorted(out)]", "out": "辞書内包記法"}
{"in": "d.update(('@' + k, v) for k, v in t.attrib.items())", "out": "リスト内包記法 変換"}
{"in": "re.findall('(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)', 'Version 1.15.6\\n')", "out": "正規表現"}
{"in": "[k for k, g in groupby(a) if len(list(g)) >= 2]", "out": "リスト内包記法 フィルタ"}
{"in": "result = [line.upper() for line in lines]", "out": "リスト内包記法 変換"}
{"in": "t = [x for x in q if x in w]", "out": "リスト内包記法 フィルタ"}
{"in": "list2b = [c for c in list2 if c in list1]", "out": "リスト内包記法 フィルタ"}
{"in": "list('-'.join(ls))", "out": "リストの文字列化"}
{"in": "re.sub('[ ]+', ' ', tmp)", "out": "正規表現"}
{"in": "names = [row[0] for row in curs.fetchall()]", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join(str(item) for item in lst)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "value = 'Test' if 1 == 1 else 'NoTest'", "out": "三項演算子"}
{"in": "b = [{'id': k, 'desc': v} for k, v in c.items()]", "out": "辞書内包記法"}
{"in": "df[~((df.A == 0) & (df.B == 2) & (df.C == 6) & (df.D == 0))]", "out": "反転演算子"}
{"in": "[df.loc[list(p)] for p in permutations(age.get_group(21).index)]", "out": "リスト内包記法 変換"}
{"in": "super(Customer, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "paths[-1].append({'title': item['title'], 'url': split[-1]})", "out": "末尾の要素"}
{"in": "self.load(QtCore.QUrl('http://jquery.com'))", "out": "正規表現"}
{"in": "return self._file.read(*args)", "out": "引数展開"}
{"in": "data.append([word.strip('\\n') for word in line.split(' ') if word])", "out": "リスト内包記法 フィルタ"}
{"in": "print(list(x for x in splitter(str, split_points) if x != ''))", "out": "リスト内包記法 フィルタ"}
{"in": "r.append('_'.join(t[:-2]) + '_%s_%s' % (m, y))", "out": "リストの文字列化"}
{"in": "pygame.image.save(surface, os.path.expanduser('~/Desktop/pic.png'))", "out": "反転演算子"}
{"in": "s = re.split('[~\\\\r\\\\n]+', string_to_split)", "out": "正規表現 反転演算子"}
{"in": "super(FooForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"NLTK is a python library for working human-written text. Summarize is a package that uses NLTK to create summaries. A Summariser is really cool. I don't think there are any other python summarisers.\"\"\"", "out": "リスト内包記法 変換"}
{"in": "\"\"\"NLTK is a python library for working human-written text! Summarize is a package that uses NLTK to create summaries.\"\"\"", "out": "リスト内包記法 変換"}
{"in": "return (l[i:i + n] for i in range(0, len(l), n))", "out": "リスト内包記法 変換"}
{"in": "o = [(l[i], l[i + 1]) for i in range(0, len(l), 2)]", "out": "リスト内包記法 変換"}
{"in": "yield {k: data[k] for k in islice(it, SIZE)}", "out": "辞書内包記法"}
{"in": "list(chain(*(x.split(',') for x in lis)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "frame.groupby([pd.DatetimeIndex([x.date() for x in frame.index])]).sum()", "out": "リスト内包記法 変換"}
{"in": "q.filter(or_(*conditions))", "out": "引数展開"}
{"in": "any(np.array_equal(np.array([a, a]), x) for x in my_list)", "out": "リスト内包記法 変換"}
{"in": "re.search('<%%(.+?)%%>', t).groups()", "out": "正規表現"}
{"in": "[a[max(0, i):i + 3] for i in range((len(a) - 1) % 3 - 2, len(a), 3)]", "out": "リスト内包記法 変換"}
{"in": "any(len(set(x)) == 1 for x in zip(*arr))", "out": "リスト内包記法 変換 引数展開"}
{"in": "return struct.pack(new_format, *args)", "out": "引数展開"}
{"in": "im = Image.open('C:\\\\Users\\\\Public\\\\Pictures\\\\Sample Pictures\\\\Jellyfish.jpg')", "out": "ユニコード"}
{"in": "print(template.format(*rec))", "out": "引数展開"}
{"in": "super(GroceryListForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "re.findall('(?:[^\\\\s,\"]|\"(?:\\\\\\\\.|[^\"])*\")+', s)", "out": "正規表現"}
{"in": "datetime.datetime.strptime(a, '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "x = ['a', 'one \"two\" three', 'foo, bar', 'both\"\\'']\nprint(', '.join(map(quote, x)))", "out": "リストの文字列化"}
{"in": "return ' '.join(l[-1:] + l[:-1])", "out": "リストの文字列化"}
{"in": "return render(request, 'index.html', *args)", "out": "引数展開"}
{"in": "regex = '|'.join('\\\\b' + str(state) + '\\\\b' for state in states)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "out.extend(map(str, list(range(r[0], r[-1] + 1))))", "out": "末尾の要素"}
{"in": "QtCore.QAbstractItemModel.__init__(self)", "out": "正規表現"}
{"in": "GL = [list(v) for k, v in it.groupby(sorted(L, key=sorter), key=sorter)]", "out": "リスト内包記法 変換"}
{"in": "sum(int(x) for x in s if x.isdecimal())", "out": "リスト内包記法 フィルタ"}
{"in": "re.search('(\\\\?|\\\\.|gy)$', w)", "out": "正規表現"}
{"in": "with open('outputfile.csv', 'w') as csv_file:\n    csv_file.write('\\n'.join(map(','.join, my_list) + '\\n'))", "out": "リストの文字列化"}
{"in": "def square(list):\n    return [(i ** 2) for i in list]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "\"\"\" \"\"\".join(s for s in words.split() if not any(c.isdigit() for c in s))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[prod(x) for i in range(2, len(lst) + 1) for x in combinations(lst, i)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('[A-Z][^A-Z]*', 'TheLongAndWindingRoad')", "out": "正規表現"}
{"in": "{b.pop(0): {b.pop(0) for _ in range(1)} for _ in range(1)}", "out": "辞書内包記法"}
{"in": "return ''.join(random.sample(x + 'b' * len(x), len(x)))", "out": "リストの文字列化"}
{"in": "rex_nomatch = re.findall('conglomeration_of_sandwiches', text)", "out": "正規表現"}
{"in": "my_list = [line.decode('unicode-escape').rstrip('\\n') for line in f]", "out": "リスト内包記法 変換"}
{"in": "pil_im = Image.open('data/empire.jpg', 'r')\npil_im.show()", "out": "正規表現"}
{"in": "return max((len(v), k) for k, v in flows.items())", "out": "リスト内包記法 変換"}
{"in": "super(Comment, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "[([x] * i) for i, x in zip(A, B)]", "out": "リスト内包記法 変換"}
{"in": "dStr = d.strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "print([x for x in lst if 'abc' in x])", "out": "リスト内包記法 フィルタ"}
{"in": "{k: v for d in fruitColourMapping for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "sliced = [list(islice(it, 0, i)) for i in seclist]", "out": "リスト内包記法 変換"}
{"in": "[bar() for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "super(ChangeEmailForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print([[x for x in a if len(x) == i + 1] for i in range(m)])", "out": "リスト内包記法 フィルタ"}
{"in": "print([A[p][i] for i, p in enumerate(P)])", "out": "リスト内包記法 変換"}
{"in": "\"\"\"({c.real:.2f} + {c.imag:.2f}i)\"\"\".format(c=n)", "out": "少数点表示制限"}
{"in": "json.JSONEncoder.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "list_of_lists = [list(elem) for elem in list_of_tuples]", "out": "リスト内包記法 変換"}
{"in": "s = random.randint(0, 2 ** 10000 - 1)", "out": "累乗演算子"}
{"in": "line = re.sub('FriendlyName=.+', 'FriendlyName=big', line)", "out": "正規表現"}
{"in": "return any(ud.category(c)[0] == 'L' for c in u)", "out": "リスト内包記法 変換"}
{"in": "ordering = {word: i for i, word in enumerate(predefined_list)}", "out": "辞書内包記法"}
{"in": "[float(x.replace('+', 'e+').replace('-', 'e-')) for x in strs.split()]", "out": "リスト内包記法 変換"}
{"in": "zip((x.count(item) for item in set(x)), set(x))", "out": "リスト内包記法 変換"}
{"in": "res.columns = [('det%s' % i) for i, _ in enumerate(df.columns)]", "out": "リスト内包記法 変換"}
{"in": "bytearray(int(b[x:x + 8], 2) for x in range(0, len(b), 8))", "out": "リスト内包記法 変換"}
{"in": "return QtCore.QVariant()", "out": "正規表現"}
{"in": "[list(islice(b, x)) for x in l]", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile('[\\\\uD800-\\\\uDFFF].', re.UNICODE)\npattern = re.compile('[^\\\\u0000-\\\\uFFFF]', re.UNICODE)", "out": "正規表現 ユニコード"}
{"in": "list(itertools.dropwhile(math.isnan, reversed(r)))[::-1]", "out": "逆順の列"}
{"in": "print(' '.join(str(x) for x in s))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "next(x for x in range(10) if x == 7)", "out": "リスト内包記法 フィルタ"}
{"in": "[np.insert(j, 0, i) for i, j in product(a, np.array((b, c)).T)]", "out": "リスト内包記法 変換"}
{"in": "result = [el.text_content() for el in result]", "out": "リスト内包記法 変換"}
{"in": "print('{:.3f}'.format(x))", "out": "少数点表示制限"}
{"in": "check_call('mount -t whatever data:/dir/ ~/mnt/data_dir', shell=True)", "out": "反転演算子"}
{"in": "re.match('\\\\s*', s).group()", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(chain.from_iterable(lst))", "out": "リストの文字列化"}
{"in": "return hex(~crcVar & 4294967295)[2:-1].upper()", "out": "反転演算子"}
{"in": "return cls(*args, **kwargs)", "out": "引数展開"}
{"in": "[(x ** 2) for x in range(5)]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "[m.group() for m in re.finditer('((\\\\w)\\\\2)+', 'arrange')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "re.split('\\\\W+', my_str)", "out": "正規表現"}
{"in": "return int(''.join(map(ord3, s)))", "out": "リストの文字列化"}
{"in": "tuple(int(x) for x in inputlist.split(','))", "out": "リスト内包記法 変換"}
{"in": "any(c.isalpha() for c in string_1)", "out": "リスト内包記法 変換"}
{"in": "print([tuple((a, b + 1) for a, b in group) for group in t])", "out": "リスト内包記法 変換"}
{"in": "print(''.join(inverse_regex.ipermute('[a-z]')))", "out": "リストの文字列化"}
{"in": "len([x for x in str_.split() if x in list(dict_1.values())])", "out": "辞書内包記法"}
{"in": "end_date = ' '.join(end_date)", "out": "リストの文字列化"}
{"in": "m = re.search('(?<=//)[^/]*', str)", "out": "正規表現"}
{"in": "re.split(',', '1,2,3')", "out": "正規表現"}
{"in": "store.select('df', columns=['one'])", "out": "正規表現"}
{"in": "myList = [(1, 2), (3, 4)]\nprint(','.join('(%s,%s)' % tup for tup in myList))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "ax.legend(lines, [l.get_label() for l in lines], loc='upper center')", "out": "リスト内包記法 変換"}
{"in": "[do_stuff(a, b) for a, b in itertools.permutations(A, 2)]", "out": "リスト内包記法 変換"}
{"in": "return re.compile('(%s)' % '|'.join(fmt % i for i in range(lo, hi + 1)))", "out": "リスト内包記法 変換 正規表現 リストの文字列化"}
{"in": "timestamps, elements = zip(*sorted(zip(timestamps, elements)))", "out": "引数展開"}
{"in": "np.arange(10)[::-1]", "out": "逆順の列"}
{"in": "return [e for e, g in groupby(sorted(my_list))]", "out": "リスト内包記法 変換"}
{"in": "a = [[1, 2, 3], [4, 5, 6]]\n[item for item in a if sum(item) > 10]", "out": "リスト内包記法 フィルタ"}
{"in": "foo(*values)", "out": "引数展開"}
{"in": "print(' '.join(getitems(bleah)))", "out": "リストの文字列化"}
{"in": "d = {key: value for key, value in zip(keys, values)}", "out": "辞書内包記法"}
{"in": "b_set = set(tuple(x) for x in a)\nb = [list(x) for x in b_set]", "out": "リスト内包記法 変換"}
{"in": "myList.index([x for x in myList if x != 0][0])", "out": "リスト内包記法 フィルタ"}
{"in": "base = datetime.datetime.today()\ndate_list = [(base - datetime.timedelta(days=x)) for x in range(0, numdays)]", "out": "リスト内包記法 変換"}
{"in": "fly.set_data([fdata[0][0], fdata[0][-1]], [fdata[1][0], fdata[1][-1]])", "out": "末尾の要素"}
{"in": "lst = [([1] * 4) for n in range(3)]", "out": "リスト内包記法 変換"}
{"in": "[(x + y) for x, y in zip(*([iter(q)] * 2))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "cbar = plt.colorbar(CF, ticks=lvls, format='%.4f')", "out": "少数点表示制限"}
{"in": "[(1 if p < 0.5 else 2) for p in classifications]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "re.compile('[a-zA-Z\\xc3\\x91\\xc3\\xb1]+', re.DEBUG)", "out": "正規表現"}
{"in": "abs((10 ** 0.5) ** 2 - 10) < 1e-10", "out": "累乗演算子"}
{"in": "[np.argmin(a) for a in A1]", "out": "リスト内包記法 変換"}
{"in": "stations = OrderedDict((el, idx) for idx, el in enumerate(lines))", "out": "リスト内包記法 変換"}
{"in": "return np.sum(np.dot(xdiff, L_inv.T) ** 2, axis=1)", "out": "累乗演算子"}
{"in": "re.sub('.', lambda x: x.group() * n, s)", "out": "正規表現"}
{"in": "~str_name.str.contains('c')", "out": "反転演算子"}
{"in": "df['color'] = df.Set.map(lambda x: 'red' if x == 'Z' else 'green')", "out": "三項演算子"}
{"in": "[x for x in tokenize(txt)]", "out": "リスト内包記法 変換"}
{"in": "b = (x ** 2 for x in a)", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "eb2[-1][0].set_linestyle('-.')", "out": "末尾の要素"}
{"in": "zip(*lst)[0]", "out": "引数展開"}
{"in": "return np.vstack([get_col(col) for col in cols]).T", "out": "リスト内包記法 変換"}
{"in": "sorted(set(val for row in content.values() for val in row))", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime(example, '%Y-%m-%dT%H:%M:%S.%fZ')", "out": "日付書式 時刻書式"}
{"in": "all(c in '01' for c in binary)", "out": "リスト内包記法 変換"}
{"in": "min_keys = [k for k in d if all(d[m] >= d[k] for m in d)]", "out": "リスト内包記法 フィルタ"}
{"in": "result = [obj for obj in listOfObjs if hasattr(obj, 'attributeName')]", "out": "リスト内包記法 フィルタ"}
{"in": "print(zip(*p))", "out": "引数展開"}
{"in": "list(zip_longest(*([iter(chain([0], *liPos))] * 2)))", "out": "引数展開"}
{"in": "list(product(*iterables))", "out": "引数展開"}
{"in": "print([list(g[1]) for g in groupby(sorted(l, key=len), len)])", "out": "リスト内包記法 変換"}
{"in": "super(Room, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "re.match(pattern, '1' * 11)", "out": "正規表現"}
{"in": "format(value, ',.2f')", "out": "少数点表示制限"}
{"in": "myfunc(*mylist)", "out": "引数展開"}
{"in": "return dict((d[key], dict(d, index=index)) for index, d in enumerate(seq))", "out": "辞書内包記法"}
{"in": "df[~df.col.str.get(0).isin(['t', 'c'])]", "out": "反転演算子"}
{"in": "[match[0] for match in re.findall('((\\\\w)\\\\2{2,})', s)]", "out": "辞書内包記法 正規表現"}
{"in": "{k: int(v) for k, v in (item.split('=') for item in s.split(','))}", "out": "辞書内包記法"}
{"in": "first_elements, second_elements = zip(*data)", "out": "引数展開"}
{"in": "return sorted([i for i in lst if i > 0]) + sorted([i for i in lst if i < 0])", "out": "リスト内包記法 フィルタ"}
{"in": "result = ''.join([i for i in s if not i.isdigit()])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "c = ['Adi_{0}'.format(s) for s in a]", "out": "辞書内包記法"}
{"in": "re.sub('[\\\\w]+', '___', str(',./hello-=+', 'utf-8'), flags=re.UNICODE)", "out": "正規表現"}
{"in": "return super(CommaSeparatedIntegerField, self).formfield(**defaults)", "out": "引数展開"}
{"in": "print([num for num in a if counts[num] > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "[np.where((B == x).sum(axis=1))[0] for x in A]", "out": "リスト内包記法 変換"}
{"in": "results = Orchard.objects.filter(**options)", "out": "引数展開"}
{"in": "[i for i in '[a-zA-Z\\xc3\\x91\\xc3\\xb1]+']", "out": "リスト内包記法 変換"}
{"in": "[x for sublist in list_of_lists for x in sublist or ['']]", "out": "リスト内包記法 変換"}
{"in": "[c for c in col_names if all([(f not in c) for f in filter_array])]", "out": "リスト内包記法 フィルタ"}
{"in": "function(**options)", "out": "引数展開"}
{"in": "session.query(func.to_char(Notification.create_time, '%Y-%m-%d %H:%M'))", "out": "日付書式 時刻書式"}
{"in": "print('\\n'.join('{:>10}'.format(e) for e in iter([1, 2, '1', '2', {(1): '1'}])))", "out": "辞書内包記法 リストの文字列化"}
{"in": "return re.subn(pattern, '', thestring)[1]", "out": "正規表現"}
{"in": "entry_list = [entry.title.text for entry in feed.entry]", "out": "リスト内包記法 変換"}
{"in": "return f(*args, **kwargs)", "out": "引数展開"}
{"in": "return self.f(*args, **kwargs)", "out": "引数展開"}
{"in": "bool(re.search('((\\\\w)\\\\2){2}', 'zoo'))", "out": "正規表現"}
{"in": "dict_of_lists = merge_with(list, *csv.DictReader(open(f)))", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(w)", "out": "リストの文字列化"}
{"in": "re.findall('\\\\d+|[a-zA-Z]+', '10people5cars')", "out": "正規表現"}
{"in": "return max(depth(d[k], level + 1) for k in d)", "out": "リスト内包記法 変換"}
{"in": "result = [_f for _f in map(expensive, mylist) if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "list(itertools.chain(*a))", "out": "引数展開"}
{"in": "min([val for obj in ids for key, val in list(obj.items()) if key == 'id'])", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('\\\\d+', s)", "out": "正規表現"}
{"in": "print([(dotted[n][:-1] + (i,)) for s in signs for n, i in enumerate(s)])", "out": "リスト内包記法 変換"}
{"in": "[(s, l) for l in lines3 for s in search_strings if s in l]", "out": "リスト内包記法 フィルタ"}
{"in": "return lines[0] + ('...' if len(lines) > 1 else '')", "out": "三項演算子"}
{"in": "commandsandpaths = ['{0} {1}'.format(command, x) for x in paths]", "out": "辞書内包記法"}
{"in": "print(''.join([etree.tostring(child) for child in element]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "objs = [MyClass() for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "return chain.from_iterable(combinations(s, r) for r in range(1, len(s) + 1))", "out": "リスト内包記法 変換"}
{"in": "print([(k, len(d[k])) for k in sorted(d.keys())])", "out": "リスト内包記法 変換"}
{"in": "repeated_items = [list(row[1] * row[2]) for row in df.itertuples()]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join([line.strip() for line in sql.splitlines()]).strip())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "if re.match('^[0-9 ]+$', myString):\n    pass", "out": "正規表現"}
{"in": "return [slice(*map(int, x.split(':'))) for x in s.split(',')]", "out": "リスト内包記法 変換 引数展開"}
{"in": "print(tuple([k] + [v for d in L for v in list(d.values())]))", "out": "リスト内包記法 変換"}
{"in": "f.write(bytes(int(x, 0) for x in L))", "out": "リスト内包記法 変換"}
{"in": "list(zip_longest(fillvalue='', *lis))", "out": "引数展開"}
{"in": "df[~df.isnull().all(axis=1)]", "out": "反転演算子"}
{"in": "\"\"\" \"\"\".join(names)", "out": "リストの文字列化"}
{"in": "list2 = [dict2[k] for k in commons]", "out": "辞書内包記法"}
{"in": "hex_list = ['{:02x}'.format(ord(c)) for c in s]", "out": "辞書内包記法"}
{"in": "np.array([np.NaN] * (n - 1) + [np.sum(a[j:j + n]) for j in range(N - n + 1)])", "out": "リスト内包記法 変換"}
{"in": "[int(elem) for elem in testList]", "out": "リスト内包記法 変換"}
{"in": "\"\"\":\"\"\".join(a + b for a, b in zip(*([iter(s)] * 2)))", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "[functools.reduce(dict.__getitem__, keys, d[i]) for i in d]", "out": "辞書内包記法"}
{"in": "print(' '.join(item for item in result if not isinstance(item, list)))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[myFunc(p, additionalArgument) for p in pages]", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('(?P<cmd>foo|bar|baz)(?P<data>.+)')", "out": "正規表現"}
{"in": "int(''.join(itertools.takewhile(str.isdigit, '10pizzas')))", "out": "リストの文字列化"}
{"in": "irn = ''.join([repr(num) for num in range(loop_count)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(list(map(int, ''.join(map(str, list1)))))", "out": "リストの文字列化"}
{"in": "return [sequence[i:i + n] for i in range(0, len(sequence), n)]", "out": "リスト内包記法 変換"}
{"in": "s = '012345'\n[s[i:i + 2] for i in range(0, len(s), 2)]", "out": "リスト内包記法 変換"}
{"in": "f.replace('\\ufeff', '')", "out": "ユニコード"}
{"in": "return f(*args, **kwargs)", "out": "引数展開"}
{"in": "result = re.match('A', str)", "out": "正規表現"}
{"in": "[np.bincount(xs, minlength=10) for xs in itertools.combinations(list(range(10)), 2)]", "out": "リスト内包記法 変換"}
{"in": "x = {i: set() for i in range(10)}", "out": "辞書内包記法"}
{"in": "return args[-1] + mySum(*args[:-1])", "out": "引数展開 末尾の要素"}
{"in": "arr = numpy.array([(base + datetime.timedelta(hours=i)) for i in range(24)])", "out": "リスト内包記法 変換"}
{"in": "p.write(' '.join([('%.10f' % k) for k in x]) + os.linesep)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "set(b.items()) ^ set(a.items())", "out": "排他的論理和"}
{"in": "v = float(s) if '.' in s or 'e' in s.lower() else int(s)", "out": "三項演算子"}
{"in": "path = 'C:\\\\Users\\\\mememe\\\\Google Drive\\\\Programs\\\\Python\\\\file.csv'", "out": "ユニコード"}
{"in": "return all([(len(i) == len(set(i))) for i in zipt])", "out": "リスト内包記法 変換"}
{"in": "{'lst_{}'.format(i): [] for i in x}", "out": "辞書内包記法"}
{"in": "super(ModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "expand = [(a * int(b) if len(b) > 0 else a) for a, b in test]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "A = np.column_stack([(x ** i) for i in range(3)])", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "final = re.findall('[A-Z][a-z]*', ''.join(expand))", "out": "正規表現 リストの文字列化"}
{"in": "found = any(word == line.strip() for line in file)", "out": "リスト内包記法 変換"}
{"in": "chars = ''.join([random.choice(string.letters[:26]) for i in range(15)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(re.findall('[^/|(]+(?:\\\\([^)]*\\\\))*', str))", "out": "正規表現"}
{"in": "l[:] = [(x * 5) for x in l]", "out": "リスト内包記法 変換"}
{"in": "[elem for i, elem in enumerate(inputlist) if i not in excluded_indices]", "out": "リスト内包記法 フィルタ"}
{"in": "df[df.Phrase.map(lambda x: len(x) if isinstance(x, list) else None) != 0]", "out": "三項演算子"}
{"in": "[list(g) for k, g in groupby(a, lambda x: x != 0) if k]", "out": "リスト内包記法 フィルタ"}
{"in": "cursor.execute(*sql_and_params)", "out": "引数展開"}
{"in": "print(re.split('\\\\s+|[,;.-]\\\\s*', st))", "out": "正規表現"}
{"in": "l = ['ch', '', '', 'e', '', 'e', 'se']\n[var for var in l if var]", "out": "リスト内包記法 フィルタ"}
{"in": "d = {m.get(key, key): value for key, value in list(d.items())}", "out": "辞書内包記法"}
{"in": "re.findall('((\\\\w)\\\\2{2,})', s)", "out": "正規表現"}
{"in": "GC.remove_edge(*clique[0:2])", "out": "引数展開"}
{"in": "comma_separated_string = ', '.join(map(str, processed_numbers))", "out": "リストの文字列化"}
{"in": "super(Extension, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "a[::-1]", "out": "逆順の列"}
{"in": "return super(MyAdmin, self).get_form(request, obj, **kwargs)", "out": "引数展開"}
{"in": "cbar = plt.colorbar(CF, ticks=lvls, format='%.2f', spacing='proportional')", "out": "少数点表示制限"}
{"in": "next((elem for elem in lst if isinstance(elem, dict) and 'k' in elem), None)", "out": "辞書内包記法"}
{"in": "re.findall('([^.]*apple[^.]*)', txt)", "out": "正規表現"}
{"in": "found = re.findall(regex, my_txt)", "out": "正規表現"}
{"in": "x3 = [(x - 1 if x != 10.5 else x) for x in x2]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "lst = json.loads(re.sub('([0-9]+-[0-9]+-[0-9]+)', '\"\\\\1\"', '[%s]' % l))", "out": "正規表現"}
{"in": "template.render(**vars)", "out": "引数展開"}
{"in": "[list(i) for i in set([tuple(sorted(i)) for i in a])]", "out": "リスト内包記法 変換"}
{"in": "regex = re.compile('((\\\\S+)\\\\s+SUCCESS Number of wins : (\\\\d+))')", "out": "正規表現"}
{"in": "t = [int(i) for i in s.split(',')]", "out": "リスト内包記法 変換"}
{"in": "unitary = [linalg.expm(-(1j) * t * h) for t in t_list]", "out": "リスト内包記法 変換"}
{"in": "cycls_3 = [c for c in nx.cycle_basis(G) if len(c) == 3]", "out": "リスト内包記法 フィルタ"}
{"in": "pattern = re.compile('^([A-Z][0-9]+)+$')", "out": "正規表現"}
{"in": "m = re.search('^([^ ]*) ([^ ]*) \\\\[([^]]*)\\\\] \\\\/(.*)\\\\/$', line)", "out": "正規表現"}
{"in": "return ''.join(random.choice(string.ascii_uppercase) for _ in range(N))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "'%.2f' % 1.2333333", "out": "少数点表示制限"}
{"in": "x = [(bah * 2) for bah in buh]", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nreduce(lambda a, b: a if a < b else b, l[1:], l[0])", "out": "三項演算子"}
{"in": "app.mount('/demo', core.app)", "out": "正規表現"}
{"in": "self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Popup)", "out": "正規表現"}
{"in": "vstack([mean(a[:, 4 * i:4 * (i + 1)], axis=1) for i in range(3)]).T", "out": "リスト内包記法 変換"}
{"in": "re.findall('.{6}', ss)", "out": "正規表現"}
{"in": "print(re.sub('(1+)|(0+)', fixer, my_string))", "out": "正規表現"}
{"in": "xv, yv, zv = [np.arange(i) for i in [2, 3, 4]]", "out": "リスト内包記法 変換"}
{"in": "return [alist[i:j] for i, j in zip([0] + indices, indices + [None])]", "out": "リスト内包記法 変換"}
{"in": "match = re.search('\\\\.mp3', name)", "out": "正規表現"}
{"in": "return self.create(request, *args, **kwargs)", "out": "引数展開"}
{"in": "return super(MyListView, self).get_context_data(**context)", "out": "引数展開"}
{"in": "len(set(hashlib.sha256(str(i)).hexdigest()[:5] for i in range(0, 2000)))", "out": "リスト内包記法 変換"}
{"in": "(datetime.date.today() - datetime.date(*date_cand_time[:3])).days", "out": "引数展開"}
{"in": "result = next(x for x in my_list if works(x))", "out": "リスト内包記法 フィルタ"}
{"in": "re.match('^org/?P<company_name>\\\\w+/$', 'org/companyA')", "out": "正規表現"}
{"in": "(zip(itertools.repeat(first), items) for items in zip(*grouper(3, data)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "print([c for c in cumsum((0, 1, 2, 3, 4, 5, 6))])", "out": "リスト内包記法 変換"}
{"in": "temp = tuple(map(sorted, zip(*alist)))", "out": "引数展開"}
{"in": "population = [a for n, a in zip(pops, alleles) for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "lista = [x for x in db]", "out": "リスト内包記法 変換"}
{"in": "[(1.0 * conversions[n] / trials[n]) for n in range(len(trials))]", "out": "リスト内包記法 変換"}
{"in": "\"\"\":\"\"\".join(h[i:i + 2] for i in range(0, 12, 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "df.ix[:, (~df.columns.str.contains('90|110'))]", "out": "反転演算子"}
{"in": "cells = [n for n in B.nodes() if n[0] not in nodes]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('[^\\\\x00-\\\\x7f]', '', normalize('NFD', 'die gr\\xf6\\xdften Probleme'))", "out": "正規表現"}
{"in": "res = (list(range(s, s + step + 1, step)) for s in range(start, stop, step))", "out": "リスト内包記法 変換"}
{"in": "list(zip(*(d[k][n] for k in keys for n in d[k])))", "out": "リスト内包記法 変換 引数展開"}
{"in": "re.findall('\\\\d+', s)", "out": "正規表現"}
{"in": "[(key, list(val)) for key, val in itertools.groupby(lst, lambda x: x[0:5])]", "out": "リスト内包記法 変換"}
{"in": "def parse_bin(s):\n    return int(s[1:], 2) / 2.0 ** (len(s) - 1)", "out": "累乗演算子"}
{"in": "[func(elem) for elem in lst]", "out": "リスト内包記法 変換"}
{"in": "l = [x for x in re.split('(\\\\s\\\\w+\\\\=\".*?\")', comp) if x != '']", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "[x for x in a if x.get('name') == 'pluto']", "out": "リスト内包記法 フィルタ"}
{"in": "super(SeparatedValuesField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "def find(lst, a, b):\n    return [i for i, x in enumerate(lst) if x < a or x > b]", "out": "リスト内包記法 フィルタ"}
{"in": "[('%d + %d = %d' % (a, b, a + b)) for a, b in zip(l, l[1:])[::2]]", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "print(re.search('(?P<url>https?://[^\\\\s]+)', item).group('url'))", "out": "正規表現"}
{"in": "df[~df.index.isin(dropThis)]", "out": "反転演算子"}
{"in": "df1[~df1.Col1.str.split('-').apply(nerpt)]", "out": "反転演算子"}
{"in": "return [lst[indices[i]:indices[i + 1]] for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "ws = ''.join(re.findall('\\\\s', s))", "out": "正規表現 リストの文字列化"}
{"in": "results = re.findall(search_pattern, 'adf+a+=4=+S+')", "out": "正規表現"}
{"in": "itertools.chain(*zip(*iters))", "out": "引数展開"}
{"in": "num_files = sum(os.path.isfile(os.path.join(path, f)) for f in os.listdir(path)\n    )", "out": "リスト内包記法 変換"}
{"in": "super(UserForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "item.setData(None, QtCore.Qt.ForegroundRole)", "out": "正規表現"}
{"in": "return func(*parameters)", "out": "引数展開"}
{"in": "[a for i in items if C]", "out": "リスト内包記法 フィルタ"}
{"in": "any(' ' in b for b in board)", "out": "リスト内包記法 変換"}
{"in": "foo(*params)", "out": "引数展開"}
{"in": "df[~df.field.isin(ban_field)]", "out": "反転演算子"}
{"in": "datetime.date.today().strftime('%B %d, %Y')", "out": "日付書式"}
{"in": "[line for line in f1]", "out": "リスト内包記法 変換"}
{"in": "s = 'the brown fox'\ns = ' '.join(word[0].upper() + word[1:] for word in s.split())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "app.logger.debug('A value for debugging')", "out": "リスト内包記法 変換"}
{"in": "escaped = re.escape(a_string)", "out": "正規表現"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "data = re.findall(pattern, line)", "out": "正規表現"}
{"in": "print(re.sub('\\\\s+', ' ', articletext, flags=re.M))", "out": "正規表現"}
{"in": "xs = dict((i, []) for i in range(2))", "out": "辞書内包記法"}
{"in": "wx.Button.__init__(self, *a, **k)", "out": "引数展開"}
{"in": "low_bit_list = [(byte & 1) for byte in bytearray(fh.read())]", "out": "リスト内包記法 変換"}
{"in": "print([[''.join(x) for k, x in itertools.groupby(i, str.isalnum)] for i in z])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "s = ['Tiger 6', 'Shark 4', 'Cyborg 8']\nsorted(s, key=lambda x: int(x[-1]))", "out": "末尾の要素"}
{"in": "re.sub('[^a-z]', '', s)", "out": "正規表現"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "re.findall('.+?\\\\b', 'hello, foo')", "out": "正規表現"}
{"in": "tuples = [(1, 2), (3, 4), (5, 6)]\n[item for t in tuples for item in t]", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nbin(reduce(lambda x, y: 256 * x + y, (ord(c) for c in 'Hello world'), 0))", "out": "リスト内包記法 変換"}
{"in": "Series([(s[x] + ' my index is:  ' + x) for x in list(s.keys())], index=list(s.keys()))", "out": "リスト内包記法 変換"}
{"in": "return [add_number(xi) for xi in my_list]", "out": "リスト内包記法 変換"}
{"in": "[''.join(chars) for chars in product(*zip(s, cycle('*')))]", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "pattern2 = re.compile('\\\\s+')", "out": "正規表現"}
{"in": "grid_2.AddMany(wx.StaticText(self.panel, label=str(i)) for i in range(30))", "out": "リスト内包記法 変換"}
{"in": "xml = '\\n'.join(node.toxml('utf-8') for node in document.childNodes)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "result = (x.sum() ** 2 - x.dot(x)) / 2", "out": "累乗演算子"}
{"in": "re.sub('(?<=foo)bar(?=baz)', 'quux', 'foobarbaz')", "out": "正規表現"}
{"in": "new_name = re.sub('_+', '_', new_name)", "out": "正規表現"}
{"in": "hex_str = ''.join([hex(i)[2:].zfill(2).upper() for i in range(256)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "def n_lower_chars(string):\n    return sum(1 for c in string if c.islower())", "out": "リスト内包記法 フィルタ"}
{"in": "words = {line.strip() for line in file_a}", "out": "辞書内包記法"}
{"in": "new_list = [re.sub('\\\\.(?=[^.]*$)', '. - ', s) for s in old_list]", "out": "リスト内包記法 変換 正規表現"}
{"in": "if all(x > 3 for x in lst):\n    do_stuff()", "out": "リスト内包記法 変換"}
{"in": "yield [row[i] for row in matrix]", "out": "リスト内包記法 変換"}
{"in": "[(x[0:index] + x[index + 1:]) for x in L]", "out": "リスト内包記法 変換"}
{"in": "return [x for x in seq if not (x in seen or seen_add(x))]", "out": "リスト内包記法 フィルタ"}
{"in": "new_list = [foo for foo in foos if foo.location == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "print(mystr + ', '.join(fruits))", "out": "リストの文字列化"}
{"in": "pattern = re.compile('(?<!\\\\{)\\\\{(?!\\\\{).*?(?<!\\\\})\\\\}(?!\\\\})')", "out": "正規表現"}
{"in": "zip(*([iter(nums)] * 2))", "out": "引数展開"}
{"in": "[next(generator) for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "L4 = list(item for item in L1 if item not in unwanted)", "out": "リスト内包記法 フィルタ"}
{"in": "os.path.normpath(path1) in (os.path.normpath(p) for p in list_of_paths)", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(x for x in string_to_modify if x not in remove_these)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print('\\u0109'.upper())", "out": "ユニコード"}
{"in": "data = [(b[1], p, b[0], b[2]) for p, b in list(rays_starters.items())]", "out": "リスト内包記法 変換"}
{"in": "[(i - set.union(*[j for j in allsets if j != i])) for i in allsets]", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "re.search('\\\\d+|$', 'aa33bbb44').group()", "out": "正規表現"}
{"in": "dict((k.lower(), v) for k, v in d.items())", "out": "辞書内包記法"}
{"in": "print(re.sub('(wolf.*chicken)|\\\\bate\\\\b', repl, x))", "out": "正規表現"}
{"in": "dict(d2, **d1)", "out": "引数展開"}
{"in": "{(key, val) for key, val in list(mime_types.items()) if 'image/tiff' == val}", "out": "辞書内包記法"}
{"in": "input_str = re.sub('\\\\W', '', input_str).strip()", "out": "正規表現"}
{"in": "print(end.strftime('%d/%b/%Y'))", "out": "日付書式"}
{"in": "all(not element for element in data)", "out": "リスト内包記法 変換"}
{"in": "min([s for s in lst if isinstance(s, str)])", "out": "リスト内包記法 フィルタ"}
{"in": "return ','.join(result)", "out": "リストの文字列化"}
{"in": "return queryset.filter(**{'attributes__type': value})", "out": "引数展開"}
{"in": "return [i for i, v in enumerate(a) if v in b_set]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[0-9]+', 'GoTo: 7018 6453 12654\\n')", "out": "正規表現"}
{"in": "re.split('(\\\\W+)', 'Words, words, words.')", "out": "正規表現"}
{"in": "widget.setWindowFlags(QtCore.Qt.Widget)", "out": "正規表現"}
{"in": "dfA.drop(labels=[-1], level='index', inplace=True)", "out": "末尾の要素"}
{"in": "return (lst[i] for i in indices)", "out": "リスト内包記法 変換"}
{"in": "\"\"\", \"\"\".join('123')", "out": "リストの文字列化"}
{"in": "len([x for x in a_list if x[0] == 1]) > 0", "out": "リスト内包記法 フィルタ"}
{"in": "out = np.convolve(d, ker, mode='valid')[::2]", "out": "ひとつおきの列"}
{"in": "print(sum(i * i for i in l))", "out": "リスト内包記法 変換"}
{"in": "a = models.Achievement(name=\"Played Mirror's Edge\\u2122\".encode('UTF-8'))", "out": "ユニコード"}
{"in": "print(max(b - a for a, b in pairwise(values)))", "out": "リスト内包記法 変換"}
{"in": "super(Widget, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "zip(*elements)", "out": "引数展開"}
{"in": "print('Answer: ' + ' '.join(word_list))", "out": "リストの文字列化"}
{"in": "any(1 in d for d in lod)", "out": "リスト内包記法 変換"}
{"in": "[(x + y) for x in 'cat' for y in 'potty']", "out": "リスト内包記法 変換"}
{"in": "data['After'] = data['Before'] + [('_' * i) for i in diffs_]", "out": "リスト内包記法 変換"}
{"in": "return func(*args, **kw)", "out": "引数展開"}
{"in": "print(' '.join(words[index:index + n + 1]))", "out": "リストの文字列化"}
{"in": "pd.DataFrame({n: c.apply(lambda x: x.get(n, 0)) for n in wordlist})", "out": "辞書内包記法"}
{"in": "subprocess.call(['scp', filepath, ':'.join([hostname, remote_path])])", "out": "リストの文字列化"}
{"in": "[(car.pop(0) if item else a.pop(0)) for item in lyst]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "new_list = [v for v in a if v not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "dict_out = {unq[i]: iterID for i, iterID in enumerate(indices)}", "out": "辞書内包記法"}
{"in": "result = [y for x in os.walk(PATH) for y in glob(os.path.join(x[0], '*.txt'))]", "out": "リスト内包記法 変換"}
{"in": "s = '1989, 1990'\n[x.strip() for x in s.split(',')]", "out": "リスト内包記法 変換"}
{"in": "one, four, ten = [lst[i] for i in [1, 4, 10]]", "out": "リスト内包記法 変換"}
{"in": "qs.filter(map(operators.or_, [Q(k=v) for k, v in list(request.GET.items())]))", "out": "リスト内包記法 変換"}
{"in": "re.findall('bus|car|cars|\\\\S', s)", "out": "正規表現"}
{"in": "0, PyQt4.QtCore.QString('mypassword')", "out": "正規表現"}
{"in": "cashflow[-1] += 100", "out": "末尾の要素"}
{"in": "return zip(*(lst[i:] for i in range(n)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "rules = dict(rule.split('=', 1) for rule in recurrence.split(';'))", "out": "辞書内包記法"}
{"in": "[x for x in myTuple if foo(1, x, 4)]", "out": "リスト内包記法 フィルタ"}
{"in": "[(elem + func()) for elem in myList]", "out": "リスト内包記法 変換"}
{"in": "reason = [', '.join(compress(tups, x)) for x in zip(*list(tups.values()))]", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "self.y = [self.x for i in range(1)]", "out": "リスト内包記法 変換"}
{"in": "nodes = [node() for _ in range(100)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(\"\"\"Please \n don't \t hurt \u000b me.\"\"\".split())", "out": "リストの文字列化"}
{"in": "[[df.columns[j] for i, j in grp] for k, grp in groups]", "out": "リスト内包記法 変換"}
{"in": "foo(*x, **y)", "out": "引数展開"}
{"in": "numbers = [n for n in numbers if n is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "print(x.apply(lambda y: [a for a in y if pd.notnull(a)]))", "out": "リスト内包記法 フィルタ"}
{"in": "[(sum([(i * i) for i in vec]) ** 0.5) for vec in x]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "[x for x in map(f, range(3)) if x > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "return (value for key, value in sorted(dictobj.items()))", "out": "辞書内包記法"}
{"in": "pd.DataFrame({n: c.apply(lambda x: x[n]) for n in wordlist})", "out": "辞書内包記法"}
{"in": "candidates = [i for i in permutations(range(n), 3)]", "out": "リスト内包記法 変換"}
{"in": "n = n + 1 / 10 ** (len(repr(n)) - 2)", "out": "累乗演算子"}
{"in": "[x for x, y in groupby(L) if sum(1 for i in y) < 2]", "out": "リスト内包記法 フィルタ"}
{"in": "regex = re.compile('(%s)' % '|'.join(map(re.escape, list(dict.keys()))))", "out": "正規表現 リストの文字列化"}
{"in": "print(chr(ord('\\u0b85')))", "out": "ユニコード"}
{"in": "s = 'C9: Title of object (fo[ 123o, bar) [ch1, CH12,c03,4]'\nre.findall('\\\\d+(?=[^[]+$)', s)", "out": "正規表現"}
{"in": "d = {k: list(v) for k, v in groupby(tags, key=lambda x: x[0])}", "out": "辞書内包記法"}
{"in": "with open('myfile.txt') as f:\n    my_dictionary = dict(line.split() for line in f)", "out": "辞書内包記法"}
{"in": "li2 = list(itertools.chain(*li))", "out": "引数展開"}
{"in": "pattern = re.compile(re.escape(motif))", "out": "正規表現"}
{"in": "text = ''.join(BeautifulSoup(html).findAll(text=True))", "out": "リストの文字列化"}
{"in": "{key: grp['value'].tolist() for key, grp in df.groupby('key')}", "out": "辞書内包記法"}
{"in": "return [k for k, v in list(d1.items()) if v == m][0]", "out": "リスト内包記法 フィルタ"}
{"in": "curated_text.append(' '.join(d))", "out": "リストの文字列化"}
{"in": "max(p.attrOne for p in self.allPartners)", "out": "リスト内包記法 変換"}
{"in": "return function(request, *args, **kwargs)", "out": "引数展開"}
{"in": "[(float(p[1] + p[2]) / 2) for p in PlayerList]", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\. ', 'Hello there. My name is Fred. I am 25.5 years old.')", "out": "正規表現"}
{"in": "return ((self.x - x) ** 2 + (self.y - y) ** 2) ** 0.5", "out": "累乗演算子"}
{"in": "return self.create(request, *args, **kwargs)", "out": "引数展開"}
{"in": "d = {'one': 1, 'two': 2, 'twenty': 20, 'negative 4': -4}\nsum(v for v in list(d.values()) if v > 0)", "out": "辞書内包記法"}
{"in": "print([(y - x) for x, y in l])", "out": "リスト内包記法 変換"}
{"in": "results = [do_smth(slurp_file(f)) for f in filenames]", "out": "リスト内包記法 変換"}
{"in": "print(zip(*(zip(itertools.repeat(ls[0]), ls[1:]) for ls in data)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "print([a.pop(key) for key in ['key1', 'key3']])", "out": "リスト内包記法 変換"}
{"in": "print([data[id == i].max() for i, _ in groupby(id)])", "out": "リスト内包記法 変換"}
{"in": "[book.get('author', None) for book in tree.xpath('//book')]", "out": "リスト内包記法 変換"}
{"in": "reversed_ = sum(1 << numbits - 1 - i for i in range(numbits) if original >>\n    i & 1)", "out": "リスト内包記法 フィルタ"}
{"in": "return re.sub('%u([0-9a-fA-F]{4})', unicode_unquoter, text)", "out": "正規表現"}
{"in": "self.ax.figure.canvas.draw()", "out": "正規表現"}
{"in": "dict2 = {key: value for key, value in list(dict1.items()) if key in required_fields}", "out": "辞書内包記法"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "XO = [line.split(None, 4)[3] for line in islice(f, 500)]", "out": "リスト内包記法 変換"}
{"in": "match = re.search('(\\\\d+/\\\\d+/\\\\d+)', 'The date is 99/99/99')", "out": "正規表現"}
{"in": "l_without_empty = [x for x in l if x != '']", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(list(reversed(str)))", "out": "リストの文字列化"}
{"in": "df.applymap(lambda x: (0, 0) if x is np.nan else x)", "out": "三項演算子"}
{"in": "print(zip(*lists))", "out": "引数展開"}
{"in": "data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))", "out": "逆順の列"}
{"in": "fig.savefig('/path/to/figure.pdf')", "out": "正規表現"}
{"in": "return [{'key': k, 'value': v} for k, v in mapping.items()]", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(choice(chars) for _ in range(length))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(utc_dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))", "out": "日付書式 時刻書式"}
{"in": "[cryptogen.randrange(3) for i in range(20)]", "out": "リスト内包記法 変換"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "s = ''.join(ch for ch in s if ch not in exclude)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "Representative.objects.create(**dict(zip(fields, row)))", "out": "引数展開"}
{"in": "exec('\\n'.join(\"%s=d['%s']\" % (k, k) for k in d))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "fout.write(','.join(fields) + '\\n')", "out": "リストの文字列化"}
{"in": "x = [[] for i in range(4)]", "out": "リスト内包記法 変換"}
{"in": "[id(v) for v in list(d.values())]", "out": "リスト内包記法 変換"}
{"in": "return dict((k, dict(v)) for k, v in list(r.items()))", "out": "辞書内包記法"}
{"in": "[word for words in lst for word in words.split()]", "out": "リスト内包記法 変換"}
{"in": "'\\ufeff\\u062a\\u0627\\u0632\\u06c1 \\u062a\\u0631\\u06cc\\u0646 \\u062e\\u0628\\u0631\\u0648\\u06ba\\u060c \\u0628\\u0631\\u06cc\\u06a9\\u0646\\u06af \\u0646\\u06cc\\u0648\\u0632\\u060c \\u0648\\u06cc\\u0688\\u06cc\\u0648\\u060c \\u0622\\u0688\\u06cc\\u0648\\u060c \\u0641\\u06cc\\u0686\\u0631 \\u0627\\u0648\\u0631 \\u062a\\u062c\\u0632\\u06cc\\u0648\\u06ba \\u06a9\\u06d2 \\u0644\\u06cc\\u06d2 \\u0628\\u06cc \\u0628\\u06cc \\u0633\\u06cc \\u0627\\u0631\\u062f\\u0648 \\u06a9\\u06cc \\u0648\\u06cc\\u0628'", "out": "ユニコード"}
{"in": "print(re.findall('\\\\$(\\\\w+)', m.group(1)))", "out": "正規表現"}
{"in": "print(re.findall('-(\\\\w+)', m.group(1)))", "out": "正規表現"}
{"in": "def column(matrix, i):\n    return [row[i] for row in matrix]", "out": "リスト内包記法 変換"}
{"in": "[(i, mylist.count(i)) for i in set(mylist)]", "out": "リスト内包記法 変換"}
{"in": "lst[:] = (v for v in lst if pred(v))", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.findall(pattern, s))", "out": "正規表現"}
{"in": "[subword for word in list for subword in word.split()]", "out": "リスト内包記法 変換"}
{"in": "def count(l):\n    return sum(1 + count(i) for i in l if isinstance(i, list))", "out": "リスト内包記法 フィルタ"}
{"in": "data_line = (data_line[i] for i in good_cols)", "out": "リスト内包記法 変換"}
{"in": "any('value2' in sublist for sublist in mylist)", "out": "リスト内包記法 変換"}
{"in": "return np.sum(vec ** 2)", "out": "累乗演算子"}
{"in": "return tuple(x + y for x, y in zip(xs, ys))", "out": "リスト内包記法 変換"}
{"in": "(value[i:i + n] for i in range(0, len(value), n))", "out": "リスト内包記法 変換"}
{"in": "[i for v, i in sorted((v, i) for i, v in enumerate(x))]", "out": "リスト内包記法 変換"}
{"in": "d = datetime.datetime.strptime(s, '%m/%d/%Y') + datetime.timedelta(days=1)", "out": "日付書式"}
{"in": "super(SubThing, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[ord(uc) for uc in udata]", "out": "リスト内包記法 変換"}
{"in": "np.concatenate([a[:k] for k in x])", "out": "リスト内包記法 変換"}
{"in": "return (x for x in full_list if x not in s)", "out": "リスト内包記法 フィルタ"}
{"in": "np.array(avgDists).argsort()[::-1][:n]", "out": "逆順の列"}
{"in": "print(re.sub(\"([\\\\'])\", '\\\\\\\\\\\\1', 'it\\'s \"this\"'))", "out": "正規表現"}
{"in": "return subprocess.call(' '.join(cmd), shell=True)", "out": "リストの文字列化"}
{"in": "merged_dict = {k: [d.get(k, np.nan) for d in dicts] for k in keys}", "out": "辞書内包記法"}
{"in": "lst = ['foo', 'bar', 'spam', 'egg']\nprint('\\n'.join(lst))", "out": "リストの文字列化"}
{"in": "{k: (D[k] - v) for v, k in enumerate(albums_today)}", "out": "辞書内包記法"}
{"in": "return max((len(v), v, k) for k, v in flows.items())[1:]", "out": "リスト内包記法 変換"}
{"in": "(fn for fn in os.listdir('.') if fn.endswith('.gif'))", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in data if x < 3]", "out": "リスト内包記法 フィルタ"}
{"in": "ax.legend(handles[::-1], labels[::-1], loc='upper left')", "out": "逆順の列"}
{"in": "return [alist[i:i + sublen] for i in range(0, len(alist), sublen)]", "out": "リスト内包記法 変換"}
{"in": "print('\"{:20}\" => \"{:20}\" => {}'.format(*t))", "out": "引数展開"}
{"in": "rtr = [e.strip().strip('\\'\"') for e in rtr]", "out": "リスト内包記法 変換"}
{"in": "b = a.decode('utf8')[::-1]\nprint(b)", "out": "逆順の列"}
{"in": "any(iam(x) for x in [False, True, False])", "out": "リスト内包記法 変換"}
{"in": "curve_fit(f, xdata, ydata, p0=None, sigma=None, **kw)", "out": "引数展開"}
{"in": "re.search('(\\\\d+\\\\.\\\\d+)', s).group()", "out": "正規表現"}
{"in": "a[:] = [(x, mapping[x]) for x in b]", "out": "リスト内包記法 変換"}
{"in": "return [i for i, x in enumerate(a) if x in list_duplicates(a)]", "out": "リスト内包記法 フィルタ"}
{"in": "r = re.compile('[^a-zA-Z0-9-]')", "out": "正規表現"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "res = func(*args, **kwargs)", "out": "引数展開"}
{"in": "array = [['a', 'b'], ['a', 'b', 'c'], ['a']]\nresult = set(x for l in array for x in l)", "out": "リスト内包記法 変換"}
{"in": "os.chdir(random.choice([d for d in os.listdir(os.curdir) if os.path.isdir(d)]))", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(buffer)", "out": "リストの文字列化"}
{"in": "r = Replacer(abc='xyz', ghi='zzq', **{'def': 'yyt'})", "out": "引数展開"}
{"in": "nSentences = len(re.findall(pat, shortText))", "out": "正規表現"}
{"in": "p1 + '/' + '/'.join([i for i in p2.split('/') if i not in p1.split('/')])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "super(Point, self).__init__(*args)", "out": "引数展開"}
{"in": "last_inner_append(x[-1], y)", "out": "末尾の要素"}
{"in": "L = [(x + [0]) for x in L]", "out": "リスト内包記法 変換"}
{"in": "sorted([(i, j) for j in range(10) for i in range(10) if j > i])", "out": "リスト内包記法 フィルタ"}
{"in": "print(ascii(json.loads('\"\\\\ud83d\\\\ude4f\"')))", "out": "ユニコード"}
{"in": "df2.apply(lambda x: df2.loc[~x.isin(df1[x.name]), x.name])", "out": "反転演算子"}
{"in": "next((x for x in sorted_list if x in allowed_set), None)", "out": "リスト内包記法 フィルタ"}
{"in": "[r for r in x if not any(s in r for s in y)]", "out": "リスト内包記法 フィルタ"}
{"in": "return (x - 1) // 10 if x > 0 else 0", "out": "三項演算子"}
{"in": "config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')])", "out": "反転演算子"}
{"in": "{k1: d2[d1[k1]] for k1 in d1 if d1[k1] in d2}", "out": "辞書内包記法"}
{"in": "[arr[max(0, idx - 1):idx + 2] for idx in range(0, len(arr), 2)]", "out": "リスト内包記法 変換"}
{"in": "newgrid.append([x[i] for x in grid])", "out": "リスト内包記法 変換"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "value = next((v for k, v in some_dict.items() if 'substring' in k))", "out": "辞書内包記法"}
{"in": "re.sub('g+', 'g', 'omgggg')\nre.sub('l+', 'l', 'lollll')", "out": "正規表現"}
{"in": "myComp = [elem for elem in json_data if elem == 'MyString']", "out": "リスト内包記法 フィルタ"}
{"in": "print(datetime.datetime.strptime('2010-08-27', '%Y-%m-%d'))", "out": "日付書式"}
{"in": "return lambda : [func() for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile(pattern_string)", "out": "正規表現"}
{"in": "df[~df.From.str.contains(ignorere)]", "out": "反転演算子"}
{"in": "return [ids[item['id']] for item in old_list if item['id'] in ids]", "out": "リスト内包記法 フィルタ"}
{"in": "x = ('a', 1), (2, 3), (4,)\n[str(item[0]) for item in x if item and item[0]]", "out": "リスト内包記法 フィルタ"}
{"in": "return all((x > 0) == (y > 0) for x, y in zip(l1, l2))", "out": "リスト内包記法 変換"}
{"in": "timeobj = datetime.datetime.strptime(timestring, '%H:%M:%S.%f').time()", "out": "時刻書式"}
{"in": "np.array(list(chain(*[np.arange(20).reshape(4, 5)[i::2] for i in range(2)])))", "out": "リスト内包記法 変換 引数展開 ひとつおきの列"}
{"in": "result = list({x['id']: x for x in lst1 + lst2}.values())", "out": "辞書内包記法"}
{"in": "ax.figure.show()", "out": "正規表現"}
{"in": "subset = data_set[['data_date', 'data_1', 'data_2']]\ntuples = [tuple(x) for x in subset.values]", "out": "リスト内包記法 変換"}
{"in": "inList = any(a in sublist for sublist in mylist)", "out": "リスト内包記法 変換"}
{"in": "f.writelines(','.join(str(j) for j in i) + '\\n' for i in matrix)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\"({0.real:.2f} + {0.imag:.2f}i)\"\"\".format(n)", "out": "少数点表示制限"}
{"in": "y = lambda x: 2 * x if x < 10 else raise_(Exception('foobar'))", "out": "三項演算子"}
{"in": "tmp.append([X[i, j] for i in X])", "out": "リスト内包記法 変換"}
{"in": "[[int(i) for i in j.split()] for j in open('myfile').readlines()]", "out": "リスト内包記法 変換"}
{"in": "super(Egg, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print([n for n, e in enumerate(l) if e == 'll'])", "out": "リスト内包記法 フィルタ"}
{"in": "outfile.write('\\t'.join(col).replace('\\n', '') + '\\n')", "out": "リストの文字列化"}
{"in": "[''.join(v) for k, v in groupby(list_1, key=lambda s: s.startswith('>'))]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "emoji_block2 = re.compile('[\\U0001f680-\\U0001f6ff]')", "out": "正規表現 ユニコード"}
{"in": "emoji_block2 = re.compile('[\\ud83d][\\ude80-\\udeff]')", "out": "正規表現 ユニコード"}
{"in": "dict((k, bigdict[k]) for k in wanted_keys if k in bigdict)", "out": "辞書内包記法"}
{"in": "[_ for _ in itertools.compress(d, map(lambda x: x >= 4, a))]", "out": "リスト内包記法 変換"}
{"in": "h = [g for _, g in df.groupby('v1')]", "out": "リスト内包記法 変換"}
{"in": "[x for x in lst if len(x) not in seen and seen.add(len(x)) is None]", "out": "リスト内包記法 フィルタ"}
{"in": "df.iloc[np.sort(np.concatenate([idx[~iszero], keep_these]))]", "out": "反転演算子"}
{"in": "super(ClientAdminForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "pairs = dict(zip(second_split[::2], second_split[1::2]))", "out": "ひとつおきの列"}
{"in": "print(re.sub('(\\\\d+)', lambda i: hex(int(i.group(0))), s))", "out": "正規表現"}
{"in": "(myarray[i] for i in myindex)", "out": "リスト内包記法 変換"}
{"in": "raise TypeError('useful message here...')", "out": "正規表現"}
{"in": "print(d.strftime('%B %d, %Y'))", "out": "日付書式"}
{"in": "[o.specific_attr for o in objects]", "out": "リスト内包記法 変換"}
{"in": "[(a if a else b) for a in sequence]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "m_2 = np.dot(np.dot(h, Y), h) / 2 ** 2", "out": "累乗演算子"}
{"in": "dict((k, int(v)) for k, v in d.items())", "out": "辞書内包記法"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "df2.apply(lambda x: df2.loc[~x.isin(df1.values.ravel()), x.name])", "out": "反転演算子"}
{"in": "arr = (ctypes.c_int * len(pyarr))(*pyarr)", "out": "引数展開"}
{"in": "superstrings = [stset_string[s] for s in superstsets]", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('Master(.*?)thon')", "out": "正規表現"}
{"in": "with open('baby1990.html', 'rU') as f:\n    for line in f:\n        pass", "out": "リスト内包記法 変換"}
{"in": "print([(k, v) for k, v in list(dupl.items()) if len(v) > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "def bitfield(n):\n    return [int(digit) for digit in bin(n)[2:]]", "out": "リスト内包記法 変換"}
{"in": "j2 = sorted(i for i in j if i >= 5)", "out": "リスト内包記法 フィルタ"}
{"in": "[tuple(map(convert, row.split('\\t'))) for row in s.splitlines()]", "out": "リスト内包記法 変換"}
{"in": "return re.sub('(?u)[' + re.escape(''.join(chars)) + ']', '', subj)", "out": "正規表現 リストの文字列化"}
{"in": "return ''.join(p if p in ignores else p[::-1] for p in parts)", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化 逆順の列"}
{"in": "result = [tuple([ai, bi] + ci) for ai, bi, ci in zip(a, b, c)]", "out": "リスト内包記法 変換"}
{"in": "matchre = re.compile('\\\\s*([^(]*)(?<! )\\\\s*(?:\\\\(([^)]*)\\\\))?')", "out": "正規表現"}
{"in": "par2.xaxis.set_ticklabels([i[0] for i in data])", "out": "リスト内包記法 変換"}
{"in": "text = re.sub('[^<b>a-z0-9</b>]+', '', text, flags=re.IGNORECASE)", "out": "正規表現"}
{"in": "index_list = [int(i) for i in index_list]", "out": "リスト内包記法 変換"}
{"in": "print(''.join('\\\\x%02x' % i for i in r))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print([list(g) for g in group([], lambda x: x % 5 == 0)])", "out": "リスト内包記法 変換"}
{"in": "list(list(g) for k, g in groupby(inputList, lambda x: x != None) if k)", "out": "リスト内包記法 フィルタ"}
{"in": "figure.savefig('figure%d.png' % i)", "out": "正規表現"}
{"in": "print([w for w in txt.split() if not w in s])", "out": "リスト内包記法 フィルタ"}
{"in": "l = [1, 2, 3, 4]\nsum([(i * j) for i, j in list(itertools.combinations(l, 2))])", "out": "リスト内包記法 変換"}
{"in": "attr = (o.attr for o in objsm)", "out": "リスト内包記法 変換"}
{"in": "super(Animal, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "return [indicies[elements == i] for i in range(1, N)]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall(p, test_str))", "out": "正規表現"}
{"in": "(sum(a) ** 2 - sum([(x ** 2) for x in a])) / 2", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "MARKDOWN_LINK_REGEX = re.compile('\\\\[(.*?)\\\\]\\\\((.*?)\\\\)')", "out": "正規表現"}
{"in": "[right for left, right in pairwise(a) if right[1] > left[1]]", "out": "リスト内包記法 フィルタ"}
{"in": "resultwords = [word for word in querywords if word.lower() not in stopwords]", "out": "リスト内包記法 フィルタ"}
{"in": "return '${:,.2f}'.format(value)", "out": "少数点表示制限"}
{"in": "[x for x in generator]", "out": "リスト内包記法 変換"}
{"in": "globals()[funcname](**argsdict)", "out": "引数展開"}
{"in": "return (i for i, j in zip(seq, shift) if (i, j) != (x, x))", "out": "リスト内包記法 フィルタ"}
{"in": "def my_product(dicts):\n    return (dict(zip(dicts, x)) for x in product(*iter(dicts.values())))", "out": "辞書内包記法 引数展開"}
{"in": "soupHandler.findAll('div', id=re.compile('^post-\\\\d+'))", "out": "正規表現"}
{"in": "print(re.findall('.*\\\\n+.*\\\\States', x))", "out": "正規表現"}
{"in": "sum(value for _, value in list(a.items()) if value > 0)", "out": "リスト内包記法 フィルタ"}
{"in": "zip(l[::2], l[1::2])", "out": "ひとつおきの列"}
{"in": "[j for i in alist for j in i.split(',')]", "out": "リスト内包記法 変換"}
{"in": "session.query(Table).filter(Table.name.op('~')('foo'))", "out": "反転演算子"}
{"in": "super(SaneTextIOWrapper, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "re.sub('[0-9]{5,}.*', '', 'Hello1234')", "out": "正規表現"}
{"in": "return np.array(result)[::-1]", "out": "逆順の列"}
{"in": "return [(arg + 1) for arg in args]", "out": "リスト内包記法 変換"}
{"in": "d = [list(map(int, x)) for x in DATA]", "out": "リスト内包記法 変換"}
{"in": "return TaskBase.__call__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "print(len('\\uc815\\uc815'.encode('UTF-8')))", "out": "ユニコード"}
{"in": "return [lst[i::n] for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "duplicates = [x for x in mylist if mylist.count(x) > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "return {k: add_element(v) for k, v in list(dicty.items())}", "out": "辞書内包記法"}
{"in": "[(x + y) for x, y in zip('12345', 'ab')]\n[(x + y) for x, y in zip('ab', '12345')]", "out": "リスト内包記法 変換"}
{"in": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s',\n    '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "rgbs = [((x & 16711680) >> 16, (x & 65280) >> 8, x & 255) for x in values]", "out": "リスト内包記法 変換"}
{"in": "os.chdir('C:\\\\Users\\\\PREM\\\\Desktop\\\\pyftp download\\\\ftp')", "out": "ユニコード"}
{"in": "return [x[0] for x in G]", "out": "リスト内包記法 変換"}
{"in": "sum(ord(c) << i * 8 for i, c in enumerate(mystr))", "out": "リスト内包記法 変換"}
{"in": "new_list = [(a + b) for a, b in zip(a_list, b_list)]", "out": "リスト内包記法 変換"}
{"in": "[i[4][0] for i in socket.getaddrinfo(socket.gethostname(), None)]", "out": "リスト内包記法 変換"}
{"in": "print(' + '.join(str(i) for i in l) + ' = {}'.format(sum(l)))", "out": "辞書内包記法 リストの文字列化"}
{"in": "filtered = [x for x in original if not re.match('^\\\\s*$', x)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "return all(c in gram.lower() for c in string.ascii_lowercase)", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join('%*s' % (colsize, i) for i in line.split())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "def f(x):\n    return x ** 2 + 1", "out": "累乗演算子"}
{"in": "df_html = re.sub('<table', '<table id=%s ' % random_id, df_html)", "out": "正規表現"}
{"in": "desired_cols = (tuple(row[col] for col in columns) for row in reader)", "out": "リスト内包記法 変換"}
{"in": "{w: counts[w] for w in word_list}", "out": "辞書内包記法"}
{"in": "d2 = {k: (v * 0.5) for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "print({k: (x.get(k, 0) + y.get(k, 0)) for k in set(x) | set(y)})", "out": "辞書内包記法"}
{"in": "ax.figure.canvas.draw()", "out": "正規表現"}
{"in": "m = re.search(pat, t)", "out": "正規表現"}
{"in": "dff[[c for c in dff if dff[c].isnull().sum() < 2]]", "out": "リスト内包記法 フィルタ"}
{"in": "dropped_copies = [(lambda j: (x[j] for x in copies[j]))(i) for i in range(2)]", "out": "リスト内包記法 変換"}
{"in": "print([value for value in x if not math.isnan(value)])", "out": "リスト内包記法 フィルタ"}
{"in": "raise ValueError('Non increasing matches for b')", "out": "リスト内包記法 変換"}
{"in": "b += (a[-1] - b[-1]) / len(b) * numpy.arange(1, len(b) + 1)", "out": "末尾の要素"}
{"in": "time.strftime('%Y-%m-%d', _)", "out": "日付書式"}
{"in": "s = re.sub('\\\\s+', ' ', s).strip()", "out": "正規表現"}
{"in": "out = [x for x in a if x in b and x in c]", "out": "リスト内包記法 フィルタ"}
{"in": "[k for k in mydict if k.startswith('for')]", "out": "辞書内包記法"}
{"in": "dropped_copies = [make_gen(i) for i in range(2)]", "out": "リスト内包記法 変換"}
{"in": "f(**{str(k): v for k, v in list(kwargs.items())})", "out": "辞書内包記法 引数展開"}
{"in": "return np.datetime64(datetime.datetime.strptime(v, '%d/%m/%Y %H:%M:%S.%f'))", "out": "日付書式 時刻書式"}
{"in": "dt = datetime.datetime.strptime('2013-1-25', '%Y-%m-%d')\nprint('{0}/{1}/{2:02}'.format(dt.month, dt.day, dt.year % 100))", "out": "日付書式"}
{"in": "results = [item for item in data if item.field2 >= 2]", "out": "リスト内包記法 フィルタ"}
{"in": "[y for x in data for y in x]", "out": "リスト内包記法 変換"}
{"in": "RGB_tuples = map(lambda x: colorsys.hsv_to_rgb(*x), HSV_tuples)", "out": "引数展開"}
{"in": "match = re.search(\"api\\\\('([^']*)'\", s).group(1)", "out": "正規表現"}
{"in": "[m.group() for m in re.finditer('((\\\\w)\\\\2)+', 'zoo')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "print([(100 * (b - a) / a) for a, b in zip(prices[::1], prices[1::1])])", "out": "リスト内包記法 変換"}
{"in": "re3 = re.compile('three')", "out": "正規表現"}
{"in": "[mm_fib(i) for i in range(20)]", "out": "リスト内包記法 変換"}
{"in": "anumlist = [int(x) for x in alist if x.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "[i for n, i in enumerate(d) if i not in d[n + 1:]]", "out": "リスト内包記法 フィルタ"}
{"in": "new_dict = {k: v for k, v in my_dict.items() if v >= threshold_value}", "out": "辞書内包記法"}
{"in": "df['hour'] = pd.to_datetime(df['time'], format='%H:%M').dt.hour", "out": "時刻書式"}
{"in": "lists = [[] for i in range(num_lists)]", "out": "リスト内包記法 変換"}
{"in": "return super(EuDateField, self).formfield(**kwargs)", "out": "引数展開"}
{"in": "check = set([(d['classname'], d['testname']) for d in list2])", "out": "リスト内包記法 変換"}
{"in": "item_list = [item for item in items if item > 3]", "out": "リスト内包記法 フィルタ"}
{"in": "d = dict(t for t in zip(m[::2], m[1::2]))", "out": "辞書内包記法 ひとつおきの列"}
{"in": "meets = Counter(chain.from_iterable(combinations(line, 2) for line in lines))", "out": "リスト内包記法 変換"}
{"in": "l2.append([x[1] for x in zip(pattern, facs) if not x[0]])", "out": "リスト内包記法 フィルタ"}
{"in": "return super(PictureInline, self).formfield_for_dbfield(db_field, **kwargs)", "out": "引数展開"}
{"in": "[col for col in df.columns if col != 'T1_V6']", "out": "リスト内包記法 フィルタ"}
{"in": "list_regexs = [re.compile(x) for x in list_patterns]", "out": "リスト内包記法 変換 正規表現"}
{"in": "data = [[([0] * h) for _ in range(w)] for _ in range(d)]", "out": "リスト内包記法 変換"}
{"in": "request.setRawHeader('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7')", "out": "引数展開"}
{"in": "min(timeit.repeat(lambda : {k: v for d in (x, y) for k, v in list(d.items())}))", "out": "辞書内包記法"}
{"in": "return any(child.contains(other_node) for child in self.children)", "out": "リスト内包記法 変換"}
{"in": "re.sub('[]/\\\\;,><&*:%=+@!#^()|?^', '', filename)", "out": "正規表現"}
{"in": "[i for i in userInput if i in wordsTask]", "out": "リスト内包記法 フィルタ"}
{"in": "instance.__init__(cls, *args, **kw)", "out": "引数展開"}
{"in": "subs = [l[i:i + n] for i in range(len(l)) if len(l[i:i + n]) == n]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.findall('bus|car|\\\\S', s))", "out": "正規表現"}
{"in": "data = dict((key, request.form.getlist(key)) for key in list(request.form.keys()))", "out": "辞書内包記法"}
{"in": "{key: None for key in keys}", "out": "辞書内包記法"}
{"in": "print('CPU time: {:.4f}'.format(task.cputime))", "out": "少数点表示制限"}
{"in": "return ((1 + sqrt(5)) ** n - (1 - sqrt(5)) ** n) / (2 ** n * sqrt(5))", "out": "累乗演算子"}
{"in": "[(next(it), next(it1)) for _ in range(10)]", "out": "リスト内包記法 変換"}
{"in": "rx = re.compile('[^\\\\W\\\\d_]+', re.UNICODE)", "out": "正規表現"}
{"in": "print({names[i]: df for i, df in enumerate([df_1, df_2, df_3])})", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(my_data)", "out": "リストの文字列化"}
{"in": "print(list(roundrobin(*l)))", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(chr(x) for x in struct.unpack('>2H', emoji.encode('utf-16be')))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[list(g) for k, g in groupby(inp, key=lambda i, j=count(): i - next(j))]", "out": "リスト内包記法 変換"}
{"in": "output = [s.strip() for s in words.split('  ') if s]", "out": "リスト内包記法 フィルタ"}
{"in": "super().__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "l = [input('e' + str(i) + '=') for i in range(N)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\b.{1,15}\\\\b', s)", "out": "正規表現"}
{"in": "print(' '.join(members))", "out": "リストの文字列化"}
{"in": "print(' '.join(str(ord(c)) for c in s))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.split('(<[^>]*>)', '<body><table><tr><td>')[1::2]", "out": "正規表現 ひとつおきの列"}
{"in": "[k for k, v in list(mydict.items()) if c[v] > 1]", "out": "辞書内包記法"}
{"in": "re.sub('<(\\\\w+)>', lambda m: d.get(m.group(1), m.group(1)), s)", "out": "正規表現"}
{"in": "{r[0]: tuple(r[1:-1]) for r in islice(reader(open('sailor.csv')), 1, None)}", "out": "辞書内包記法"}
{"in": "return [x[start:end] for start, end in slices if end - start > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "string1 = 'calvin klein design dress calvin klein'\nwords = string1.split()\nprint(' '.join(sorted(set(words), key=words.index)))", "out": "リストの文字列化"}
{"in": "\"\"\":\"\"\".join([s.lower()[i:i + 2] for i in range(0, len(s) - 1, 2)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "os.system('cls' if os.name == 'nt' else 'clear')", "out": "三項演算子"}
{"in": "seventh_value = next(f(i) for i in range(1, 10) if i == 7)", "out": "リスト内包記法 フィルタ"}
{"in": "any(i in array2 for i in array1)", "out": "リスト内包記法 変換"}
{"in": "[x[1] for x in Counter(n).most_common() if x[0] > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "list_of_pairs = [(p1, p2) for p1 in people for p2 in people]", "out": "リスト内包記法 変換"}
{"in": "any(np.array_equal(b, x) for x in my_list)", "out": "リスト内包記法 変換"}
{"in": "orig = ['He', 'is', 'so', '', 'cool']\nresult = [x for x in orig if x]", "out": "リスト内包記法 フィルタ"}
{"in": "lst = [x for x, in mysql_rows]", "out": "リスト内包記法 変換"}
{"in": "any(e[1] == search for e in data)", "out": "リスト内包記法 変換"}
{"in": "return [day for day in range(len(day_list)) if day_list[day] == inp][0]", "out": "リスト内包記法 フィルタ"}
{"in": "list(itertools.dropwhile(lambda x: x == r[-1], reversed(r)))[::-1] + r[-1:]", "out": "逆順の列 末尾の要素"}
{"in": "somelist = [i for j, i in enumerate(somelist) if j not in remove_indices]", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(map(str, list2)) in ''.join(map(str, list1))", "out": "リストの文字列化"}
{"in": "return sorted_list == list(range(sorted_list[0], sorted_list[-1] + 1))", "out": "末尾の要素"}
{"in": "def count_chars(s, chars):\n    return {c: s.count(c) for c in chars}", "out": "辞書内包記法"}
{"in": "def remove_indices(numbers, indices):\n    return [numbers[i] for i in range(len(numbers)) if i not in indices]", "out": "リスト内包記法 フィルタ"}
{"in": "with open(filename, 'r') as infile:\n    lines = [line for line in infile][:N]", "out": "リスト内包記法 変換"}
{"in": "print([(a, b, z[a]) for a, b in l])", "out": "リスト内包記法 変換"}
{"in": "gb.apply(lambda x: dict(zip(*x))).unstack()", "out": "引数展開"}
{"in": "super(ContestAdminForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print('{:.2f}'.format(i / 100.0))", "out": "少数点表示制限"}
{"in": "print(list(chain(*listOfTuples)))", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(format(ord(x), '08b') for x in st)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[ord(b) for b in bytestr]", "out": "リスト内包記法 変換"}
{"in": "print('%8.3f' * 6 % (x, y, z, p, q, my_python_module.some_function(x, y, p, q)))", "out": "少数点表示制限"}
{"in": "{i: str(i) for i in range(5)}", "out": "辞書内包記法"}
{"in": "return ''.join([c for c in subj if c not in sc])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "upper = tuple(x + 1 for x in upper)", "out": "リスト内包記法 変換"}
{"in": "var1, var2 = [int(x) for x in [var1, var2]]", "out": "リスト内包記法 変換"}
{"in": "reversed_arr = arr[::-1]", "out": "逆順の列"}
{"in": "[[(j if j is not None else maxVal) for k, j in enumerate(i)] for i in l]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[f.closed for f in gen_abc()]", "out": "リスト内包記法 変換"}
{"in": "w = re.sub('\\\\$', '</sub>', w, count=1)", "out": "正規表現"}
{"in": "sc.union([sc.textFile(basepath + '\\n' + f) for f in files])", "out": "リスト内包記法 変換"}
{"in": "view_3_noblock.map(lambda x: x ** 10, list(range(32)))", "out": "累乗演算子"}
{"in": "re.search('([a-z])\\\\1', 'ugknbfddgicrmopn').group()", "out": "正規表現"}
{"in": "answer = re.sub('(\\\\d)\\\\1+', '\\\\1', '12233322155552')", "out": "正規表現"}
{"in": "next(x for x in range(10) if x == 11)", "out": "リスト内包記法 フィルタ"}
{"in": "a = datetime.strptime(f, '%Y-%m-%d')", "out": "日付書式"}
{"in": "super(Fruit, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "b = [(sl + [0] * (len(max(a, key=len)) - len(sl))) for sl in a]", "out": "リスト内包記法 変換"}
{"in": "return [t[i:i + n] for i in range(0, len(t), n)]", "out": "リスト内包記法 変換"}
{"in": "lst = [eval(input('Enter word {}:'.format(i))) for i in range(3)]", "out": "辞書内包記法"}
{"in": "print(df[df['fruitname'] == fruit].iloc[-1].name)", "out": "末尾の要素"}
{"in": "s = ''.join(map(str, numList))", "out": "リストの文字列化"}
{"in": "l2 = map(lambda n: '%.2f' % n, l)", "out": "少数点表示制限"}
{"in": "text2_re1 = re.sub('(\\\\d+)/(\\\\d+)/(\\\\d+)', '\\\\3-\\\\1-\\\\2', text2)", "out": "正規表現"}
{"in": "all(i.isalpha() or i == ' ' for i in 'test#string')", "out": "リスト内包記法 変換"}
{"in": "list_2 = [item for item in list_2 if f(item)]", "out": "リスト内包記法 フィルタ"}
{"in": "print('financial return of outcome 1 = {:.2f}'.format(Decimal('33.505')))", "out": "少数点表示制限"}
{"in": "return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))", "out": "リスト内包記法 変換 リストの文字列化 排他的論理和"}
{"in": "min(hours, key=lambda t: abs(now - datetime.datetime.strptime(t, '%H:%M')))", "out": "時刻書式"}
{"in": "return [day for day in range(len(day_list)) if day_list[day] == inp][0]", "out": "リスト内包記法 フィルタ"}
{"in": "return sorted((k, ordered(v)) for k, v in list(obj.items()))", "out": "リスト内包記法 変換"}
{"in": "[item[0] for item in tl]", "out": "リスト内包記法 変換"}
{"in": "return super(MyModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "print(' '.join(l[n:] + l[:n]))", "out": "リストの文字列化"}
{"in": "{i: words.count(i) for i in words}", "out": "辞書内包記法"}
{"in": "widgets = {field: forms.RadioSelect() for field in ['field_one', 'field_two']}", "out": "辞書内包記法"}
{"in": "my_function(*a)", "out": "引数展開"}
{"in": "return all(x > y for x, y in zip(L, L[1:]))", "out": "リスト内包記法 変換"}
{"in": "textnumbers = [r.find('field/value/text').text for r in results]", "out": "リスト内包記法 変換"}
{"in": "h.append({k: d.get(k) for k in get_keys})", "out": "辞書内包記法"}
{"in": "grid_1.AddMany(wx.StaticText(self.panel, label=str(i)) for i in range(24))", "out": "リスト内包記法 変換"}
{"in": "list([t for t in map(map_to_obj, v_list) if t is not None])", "out": "リスト内包記法 フィルタ"}
{"in": "print(next(zip(*s)))", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(iterable)", "out": "リストの文字列化"}
{"in": "aa = np.array([calc_a_i(rr, i) for i in range(n)]) * GM", "out": "リスト内包記法 変換"}
{"in": "length = sum(1 for x in clusterList)", "out": "リスト内包記法 変換"}
{"in": "lines = [line for line in infile][:N]", "out": "リスト内包記法 変換"}
{"in": "return [i for i in s.split(delimiter) if i != ''][0]", "out": "リスト内包記法 フィルタ"}
{"in": "item.setCheckState(QtCore.Qt.Unchecked)", "out": "正規表現"}
{"in": "eval(input('Press <Enter> for more'))", "out": "リスト内包記法 変換"}
{"in": "v1, v2, v3, v4 = [(x if x > 0 else 0) for x in (A, B, C, D)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "return tuple([x for sublist in base_lists for x in sublist])", "out": "リスト内包記法 変換"}
{"in": "print('Class: {}Subject: {}Term: {}Grade: {}'.format(*tup))", "out": "引数展開"}
{"in": "print('%.5f' % n)", "out": "少数点表示制限"}
{"in": "sum(range(a[0], a[-1] + 1)) - sum(a)", "out": "末尾の要素"}
{"in": "b = [ord(x) for x in s]", "out": "リスト内包記法 変換"}
{"in": "[group for group in groups if a.isdisjoint(group)]", "out": "リスト内包記法 フィルタ"}
{"in": "super(FooSpider, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[idx for idx, el in enumerate(foo) if np.array_equal(el, arr)]", "out": "リスト内包記法 フィルタ"}
{"in": "print(len(re.match('\\\\s*', test, re.UNICODE).group(0)))", "out": "正規表現"}
{"in": "plot(list(range(10)), [(5) for x in range(10)], label='another test')", "out": "リスト内包記法 変換"}
{"in": "points = [(i // sy, i % sy) for i in random.sample(range(sx * sy), n)]", "out": "リスト内包記法 変換"}
{"in": "map(lambda x: 0.4 if 7 <= x <= 22 else 0.2, hourOfDay)", "out": "三項演算子"}
{"in": "[id(x) for x in list(dic.values())]", "out": "リスト内包記法 変換"}
{"in": "def slicedict(d, s):\n    return {k: v for k, v in list(d.items()) if k.startswith(s)}", "out": "辞書内包記法"}
{"in": "return ((i, o) for i in l)", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(s))", "out": "リストの文字列化"}
{"in": "df1[~df1.Y.isin(df2.Y)]", "out": "反転演算子"}
{"in": "val = next([x for x in list if x['id'] == 20])", "out": "リスト内包記法 フィルタ"}
{"in": "re.match('^(?=b*(?:ab*ab*)*ab*$)(?=a*(?:ba*ba*)*ba*$)', 'aab')", "out": "正規表現"}
{"in": "print(re.findall(pattern, string))", "out": "正規表現"}
{"in": "pat = re.compile('[A-Z][a-z]*')", "out": "正規表現"}
{"in": "d2 = [k for k, v in sorted(d.items()) for _ in range(v)]", "out": "リスト内包記法 変換"}
{"in": "re.split('(watch/\\\\d+/)',\n    'http://www.hulu.jp/watch/589851/supernatural-dub-hollywood-babylon/en')", "out": "正規表現"}
{"in": "idx.append(df[df['fruitname'] == fruit].iloc[-1].name)", "out": "末尾の要素"}
{"in": "words = [line.strip() for line in open('/etc/dictionaries-common/words')]\nprint(random.choice(words))", "out": "辞書内包記法"}
{"in": "print(sorted_word_dict[::-1][:20])", "out": "逆順の列"}
{"in": "return sum(x[1] for x in divs)", "out": "リスト内包記法 変換"}
{"in": "print_arg(**{'key': 2, 'foo': 3, 'bar': 4})", "out": "引数展開"}
{"in": "wx.ListCtrl.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "[(S + str(i)) for i in range(1, 11) for S in 'ABCD']", "out": "リスト内包記法 変換"}
{"in": "res = re.findall('\\\\w+', ' '.join(l))", "out": "正規表現 リストの文字列化"}
{"in": "{e: str1.count(e) for e in set(str1)}", "out": "辞書内包記法"}
{"in": "str_list = ['a', 'b', 'c']\n\"\"\"\"\"\".join(str_list)", "out": "リストの文字列化"}
{"in": "y = np.hsplit(x, [((i + 1) * 10) for i in range((129 - 1) // 10)])", "out": "リスト内包記法 変換"}
{"in": "mydict = dict((k, v) for k, v in mydict.items() if k != val)", "out": "辞書内包記法"}
{"in": "tuple(zip(*ii))", "out": "引数展開"}
{"in": "new_dict[datetime.strptime(k, '%Y-%m-%d %H:%M:%S')] = ''", "out": "日付書式 時刻書式"}
{"in": "print('marked nodes: ' + ' '.join(str(x) for x, y in list(d.items()) if y))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "l = [(x * (2 if i % 2 == 1 else 1)) for i, x in enumerate(l)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "any(v > 3000 for v in pairs.values())", "out": "リスト内包記法 変換"}
{"in": "new_points = [do_something_with(x, y, z) for x, y, z in surface.points]", "out": "リスト内包記法 変換"}
{"in": "urllib.request.Request.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "myList[:] = [(a, b) for a, b in myList if myDict.get(a, sentinel) != b]", "out": "リスト内包記法 フィルタ"}
{"in": "groups = [self.getGroup(i, header + i) for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "[x for x in names if re.search('aet', x)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "print([m.start() for m in re.finditer('\\\\btest\\\\b', a)])", "out": "リスト内包記法 変換 正規表現"}
{"in": "df.iloc[:, (np.lexsort(v.T[::-1]))]", "out": "逆順の列"}
{"in": "[a for v, a in sorted((x[a], a) for a in y)]", "out": "リスト内包記法 変換"}
{"in": "return [m.group(1) for m in matches if m]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)", "out": "正規表現"}
{"in": "iter_10 = (i for i in range(10))", "out": "リスト内包記法 変換"}
{"in": "[(i, z) for i in [1, 2] for z in zs_i]", "out": "リスト内包記法 変換"}
{"in": "sum_yearly_data(*list(data.values()))", "out": "引数展開"}
{"in": "print(''.join(l[i * 5:(i + 1) * 5]) + '\\n')", "out": "リストの文字列化"}
{"in": "return datetime.datetime(*eut.parsedate(text)[:6])", "out": "引数展開"}
{"in": "os.system(' '.join(cmd_parts))", "out": "リストの文字列化"}
{"in": "r = re.compile('^/(?!(?:people|dungen)/[^?]+$).+/[^?]+$')", "out": "正規表現"}
{"in": "df1 = df[df['company2'].str.contains('|'.join('^' + df['company1'] + ' '))]", "out": "リストの文字列化"}
{"in": "list_of_tuples = [(1, 2), (4, 5)]\nlist_of_lists = [list(elem) for elem in list_of_tuples]\nlist_of_lists", "out": "リスト内包記法 変換"}
{"in": "argparse.ArgumentParser.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "x = [['565.0', '575.0'], ['1215.0', '245.0'], ['1740.0', '245.0']]\nx = [[int(float(j)) for j in i] for i in x]", "out": "リスト内包記法 変換"}
{"in": "return [subl for subl in _itersplit(l, splitters) if subl]", "out": "リスト内包記法 フィルタ"}
{"in": "s = re.sub('_+$', '', s)", "out": "正規表現"}
{"in": "[(x * y) for x, y in zip(list(range(1, 21)), cycle(list(range(2, 10))))]", "out": "リスト内包記法 変換"}
{"in": "print(repr(''.join(inverse_regex.ipermute('.'))))", "out": "リストの文字列化"}
{"in": "print(timeit.timeit('[d[i] for i in range(9000, 9010)]', setup, number=10000))", "out": "リスト内包記法 変換"}
{"in": "return '%.2f%s' % (num, ['', 'K', 'M', 'G', 'T', 'P'][magnitude])", "out": "少数点表示制限"}
{"in": "any(b == a[i:i + len(b)] for i in range(len(a) - len(b) + 1))", "out": "リスト内包記法 変換"}
{"in": "return super(self.__class__, self).delete(*args, **kwargs)", "out": "引数展開"}
{"in": "1 in set([l[0] for l in a_list])", "out": "リスト内包記法 変換"}
{"in": "[_f for _f in sequence if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "[x.lower() for x in ['A', 'B', 'C']]", "out": "リスト内包記法 変換"}
{"in": "writer.writerow([i[0] for i in cursor.description])", "out": "リスト内包記法 変換"}
{"in": "ffit = np.polyval(coefs[::-1], x_new)", "out": "逆順の列"}
{"in": "result = [convert(i, j) for i, j in enumerate(tlist)]", "out": "リスト内包記法 変換"}
{"in": "[dishes[x] for x in crucial if x in dishes]", "out": "リスト内包記法 フィルタ"}
{"in": "super(DownloadSpider, self).__init__(*a, **kw)", "out": "引数展開"}
{"in": "return [line.split(' ')[5] for line in f]", "out": "リスト内包記法 変換"}
{"in": "[x for x in first_list if x not in secnd_list] + [x for x in secnd_list if \n    x not in first_list]", "out": "リスト内包記法 フィルタ"}
{"in": "['{}{:02}'.format(b_, a_) for a_, b_ in zip(a, b)]", "out": "辞書内包記法"}
{"in": "return sum(abs(item[i] - myCmpItem[i]) for i in range(len(item)))", "out": "リスト内包記法 変換"}
{"in": "res.append(dict((k, None) for k in line))", "out": "辞書内包記法"}
{"in": "pattern = re.compile('profile: ({.*}),', re.MULTILINE | re.DOTALL)", "out": "正規表現"}
{"in": "[remove_cruft(s) for s in sites]", "out": "リスト内包記法 変換"}
{"in": "self.ax.figure.canvas.mpl_connect('button_press_event', self.on_press)", "out": "正規表現"}
{"in": "[p.split() for p in re.findall('\\\\w+\\\\s+\\\\d+', txt)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "xsheet.write(0, 0, ''.join(a))", "out": "リストの文字列化"}
{"in": "s = re.sub('blah', x, s, count=1)", "out": "正規表現"}
{"in": "func2(**locals())", "out": "引数展開"}
{"in": "return ([next(it) for _ in _range(s)] for s in count(1))", "out": "リスト内包記法 変換"}
{"in": "splitted_lines = [line.split(',') for line in lines]", "out": "リスト内包記法 変換"}
{"in": "1 in [len(set(i)) for i in zip(*arr)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "print([sum(daily[x:x + 7]) for x in range(0, len(daily), 7)])", "out": "リスト内包記法 変換"}
{"in": "[x for x in lst if x % 2 == 0][0]", "out": "リスト内包記法 フィルタ"}
{"in": "second_d = dict((k, first_d[k]) for k in (2, 3))", "out": "辞書内包記法"}
{"in": "[s for n in range(12) for s in [square(n)] if s > 50]", "out": "リスト内包記法 フィルタ"}
{"in": "return tuple(totuple(i) for i in a)", "out": "リスト内包記法 変換"}
{"in": "return [tuple(L[i:i + n]) for i in range(len(L) - n + 1)]", "out": "リスト内包記法 変換"}
{"in": "os.system('cls' if os.name == 'nt' else 'clear')", "out": "三項演算子"}
{"in": "[x for x in l if x is not 0] + [x for x in l if x is 0]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('[^\\\\d\\\\.]', '', '$1,000,000.01')", "out": "正規表現"}
{"in": "L.append(L[-1][:] + [L[-1][-1] + 1])", "out": "末尾の要素"}
{"in": "list(itertools.zip_longest(*ll))", "out": "引数展開"}
{"in": "print('\\n'.join(map(' '.join, zip(*([iter(listA)] * 3)))))", "out": "引数展開 リストの文字列化"}
{"in": "ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))", "out": "日付書式"}
{"in": "return re.sub(regex, '', astring)", "out": "正規表現"}
{"in": "return re.sub(regex, '\\\\1', astring)", "out": "正規表現"}
{"in": "sum(j << i for i, j in enumerate(reversed(l)))", "out": "リスト内包記法 変換"}
{"in": "print([a[m:n] for m, n in zip([0] + p, p + [None])])", "out": "リスト内包記法 変換"}
{"in": "count = sum(1 for _ in re.finditer('\\\\b%s\\\\b' % re.escape(word), input_string))", "out": "リスト内包記法 変換 正規表現"}
{"in": "s = s[::-1]", "out": "逆順の列"}
{"in": "list({len(x): x for x in reversed(lst)}.values())", "out": "辞書内包記法"}
{"in": "last = df.val.rolling(3).sum().dropna().sort_values().index[-1]", "out": "末尾の要素"}
{"in": "v1 = inspect.trace()[-1][0].f_locals['v1']", "out": "末尾の要素"}
{"in": "[x for x in locals() if not x.startswith('__')]", "out": "リスト内包記法 フィルタ"}
{"in": "return [s[i:j] for i, j in zip([0] + idx, idx + [None])]", "out": "リスト内包記法 変換"}
{"in": "assert all(regex.match('\\\\w$', c) for c in ['a', '\\u093f', '\\u0915'])", "out": "リスト内包記法 変換 ユニコード"}
{"in": "x = [0] * 10\nx = [(0) for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "list(chain(*zip(list(range(1, 7)), list(range(-7, 0))[::-1])))", "out": "引数展開 逆順の列"}
{"in": "print(','.join(str(i) for i in numbers(1, deltas(), 100)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return super(MySuperModelAdmin, self).get_form(request, obj, **kwargs)", "out": "引数展開"}
{"in": "return self._func(*args, **kw)", "out": "引数展開"}
{"in": "matches = (x for x in lst if x > 6)", "out": "リスト内包記法 フィルタ"}
{"in": "super(SurveyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "re.findall('[^\\\\W\\\\d_]+|\\\\d+', '23Westminister15London')", "out": "正規表現"}
{"in": "re.findall('.{8}', s)", "out": "正規表現"}
{"in": "return super(MyModelAdmin, self).get_form(request, obj, **kwargs)", "out": "引数展開"}
{"in": "return obj if isinstance(obj, dict) else range(len(obj))", "out": "三項演算子"}
{"in": "[x for x in range(2, 13) if all(x % y != 0 for y in range(2, x))]", "out": "リスト内包記法 フィルタ"}
{"in": "return bit[::-1]", "out": "逆順の列"}
{"in": "s = 'abcaratab'\nre.findall('car|rat|[a-z]', s)", "out": "正規表現"}
{"in": "[(a + b) for a, b in x]", "out": "リスト内包記法 変換"}
{"in": "s = ' '.join(str(d) for x in b for d in x.flat)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "new_d = dict((val, d[val]) for val in reverse_d.values())", "out": "辞書内包記法"}
{"in": "first_column = [x[0] for x in mysql_rows]", "out": "リスト内包記法 変換"}
{"in": "super(waypointForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "regex = re.compile('\\\\d+(.*?)(?:\\\\u263a|\\\\U0001f645)')", "out": "正規表現 ユニコード"}
{"in": "\"\"\":\"\"\".join(str(td).split(':')[:2])", "out": "リストの文字列化"}
{"in": "cls._instances[cls].__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "model = get_object_or_404(MyModel, ~Q(status='deleted'), pk=id)", "out": "反転演算子"}
{"in": "myList[:] = [x for x in myList if myDict.get(x[0], sentinel) != x[1]]", "out": "リスト内包記法 フィルタ"}
{"in": "if all(k in foo for k in ('foo', 'bar')):\n    pass", "out": "リスト内包記法 変換"}
{"in": "tk.Canvas.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "[x for x in lst if x % 2 == 0][:1]", "out": "リスト内包記法 フィルタ"}
{"in": "a[slice(*b)]", "out": "引数展開"}
{"in": "set([zip(perm[::2], perm[1::2]) for perm in permutations(list(range(9)))])", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "any(np.array_equal(a, x) for x in my_list)", "out": "リスト内包記法 変換"}
{"in": "print([d.__name__ for d in foo.bar._decorators])", "out": "リスト内包記法 変換"}
{"in": "[v for v in x if v == v]", "out": "リスト内包記法 フィルタ"}
{"in": "json.loads('\"\\\\u003Cp\\\\u003E\"')", "out": "ユニコード"}
{"in": "super(ParameterisedHyperlinkedIdentityField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "df[~df.A.str.contains('Hello|World')]", "out": "反転演算子"}
{"in": "scientific_names = [it.text for it in soup.table.find_all('i')]", "out": "リスト内包記法 変換"}
{"in": "print([key for key, value in query.items() if value == 'on'])", "out": "リスト内包記法 フィルタ"}
{"in": "list([_f for _f in re.split('(plus|[()])', s) if _f])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "return importlib.import_module('.'.join(lambda_.__code__.co_names))", "out": "リストの文字列化"}
{"in": "nums2 = re.compile('[+-]?\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?')", "out": "正規表現"}
{"in": "all(val == testval for val in list(d.values()))", "out": "リスト内包記法 変換"}
{"in": "[x for x in players['SEA'] if x.year == '2001']", "out": "リスト内包記法 フィルタ"}
{"in": "zip(['a', 'c', 'e'], ['b', 'd'])\ndict(zip(l[::2], l[1::2]))", "out": "ひとつおきの列"}
{"in": "df.columns = [c_name.strip() for c_name in df.columns.values.tolist()]", "out": "リスト内包記法 変換"}
{"in": "return re.sub('\\\\s+', ' ', txt)", "out": "正規表現"}
{"in": "with open('~/fileName', 'w') as f:\n    f.write(reversed.encode('utf-8'))", "out": "反転演算子"}
{"in": "np.genfromtxt([l.strip('[]') for l in data['f1']], delimiter=',', dtype=int)", "out": "リスト内包記法 変換"}
{"in": "print('some suggestions: %s' % (', '.join(error.suggestions),))", "out": "リストの文字列化"}
{"in": "groups = re.findall('((\\\\d+)(\\\\D+))', string)", "out": "正規表現"}
{"in": "next((i for i, x in enumerate(myList) if x), None)", "out": "リスト内包記法 フィルタ"}
{"in": "return render_template(tmpl_name, var1=var1, var2=var2, var3=var3, **kwargs)", "out": "引数展開"}
{"in": "df[~df.countries.isin(countries)]", "out": "反転演算子"}
{"in": "pd.concat([c.series for c in [France, Germany]], axis=1)", "out": "リスト内包記法 変換"}
{"in": "print(datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3])", "out": "日付書式 時刻書式"}
{"in": "print(time.strftime('%a, %d %b %Y %H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "super(MyModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "abc = ' '.join((abc, 'and cheese'))", "out": "リストの文字列化"}
{"in": "sum(b[i] << i * 8 for i in range(4))", "out": "リスト内包記法 変換"}
{"in": "axes.xaxis.set_minor_formatter(FormatStrFormatter('%.2f'))", "out": "少数点表示制限"}
{"in": "len(bounds) * '{} '.format(*bounds)", "out": "引数展開"}
{"in": "commands[command](*sys.argv[1:])", "out": "引数展開"}
{"in": "sets = [set(i + j) for i in g for j in g if i != j and set(i) & set(j)]", "out": "リスト内包記法 フィルタ"}
{"in": "any(re.search('\\\\d', s) for s in lst)", "out": "リスト内包記法 変換 正規表現"}
{"in": "return self.a[-1]", "out": "末尾の要素"}
{"in": "[len(s) for s in re.split('0+', mystr) if s]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "max(generate_until_threshold((f(x) for x in range(n)), B), -float('inf'))", "out": "リスト内包記法 変換"}
{"in": "print(max(len(s) for s in row))", "out": "リスト内包記法 変換"}
{"in": "[pattern.sub('', phrase) for phrase in phrases]", "out": "リスト内包記法 変換"}
{"in": "row_ind = [k for k, v in list(d.items()) for _ in range(len(v))]", "out": "リスト内包記法 変換"}
{"in": "np.array(zip(*(A[i:] for i in range(n))))", "out": "リスト内包記法 変換 引数展開"}
{"in": "pd.concat([i for _, i in df.items()]).dropna().reset_index(drop=True)", "out": "リスト内包記法 変換"}
{"in": "[_f for _f in map(func, x) if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "return tuple(int(x) for x in s.split('.'))", "out": "リスト内包記法 変換"}
{"in": "li2 = [y for x in li for y in x]", "out": "リスト内包記法 変換"}
{"in": "'For me, Reddit brings to mind Obi Wan\\u2019s enduring description of the\\nMos Eisley cantina: a wretched hive of scum and villainy. But, you know, one\\nyou still kinda want to hang out in occasionally. The thing is, though,\\nReddit isn\\u2019t some obscure dive bar in a remote corner of the universe\\u2014it\\u2019s a\\nhuge watering hole at the very center of it. The site had some 400 million\\nunique visitors in 2012. They can\\u2019t all be Greedos. So maybe my problem is\\njust that I\\u2019ve never been able to find the places where the decent people\\nhang out.'", "out": "ユニコード"}
{"in": "dict([('name', [x[0] for x in s]), ('age', [x[1] for x in s])])", "out": "辞書内包記法"}
{"in": "print([('%.2f' % x) for x in a])", "out": "リスト内包記法 変換 少数点表示制限"}
{"in": "data.write('\\n'.join('%s%s' % (c, n) for c in s_chars for n in nums))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[int(any(full.endswith(last) for last in B)) for full in A]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\\\\\', '/', 'C:\\\\Users')", "out": "正規表現 ユニコード"}
{"in": "[item for item in my_iterable if my_filter(item)]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall(p, test_str)", "out": "正規表現"}
{"in": "re.sub('(fo+)bar(?=baz)', '\\\\1quux', 'foobarbaz')", "out": "正規表現"}
{"in": "store.put(key, value, table=True, append=False)", "out": "正規表現"}
{"in": "perms = [''.join(p) for p in permutations('stack')]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return [(x % 2 == 0) for x in t_f_list]", "out": "リスト内包記法 変換"}
{"in": "[val for val in a for _ in (0, 1)]", "out": "リスト内包記法 変換"}
{"in": "gevent.killall([obj for obj in gc.get_objects() if isinstance(obj, greenlet)])", "out": "リスト内包記法 フィルタ"}
{"in": "super(ActionModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "printArray([str(x) for x in row])", "out": "リスト内包記法 変換"}
{"in": "title = re.sub('[\\\\W\\\\d]+', '_', title.strip())", "out": "正規表現"}
{"in": "int(b[::-1], 2)", "out": "逆順の列"}
{"in": "[(item + (z[item[0]],)) for item in l]", "out": "リスト内包記法 変換"}
{"in": "output = [re.sub('\\\\$_(.*?)\\\\$|\\\\$\\\\^(.*?)\\\\$', replace, t) for t in w]", "out": "リスト内包記法 変換 正規表現"}
{"in": "[item for item, count in Counter(a).items() if count > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"-\"\"\".join(l)", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join(l)", "out": "リストの文字列化"}
{"in": "ax.scatter(a, b, c, c=[use_colours[x[0]] for x in d], s=50)", "out": "リスト内包記法 変換"}
{"in": "df.loc[[(df.iloc[(i), 1:].duplicated().sum() == 0) for i in df.index]]", "out": "リスト内包記法 変換"}
{"in": "[k[1] for k in d]", "out": "リスト内包記法 変換"}
{"in": "array2[:] = [e for e in array2 if e not in set1]", "out": "リスト内包記法 フィルタ"}
{"in": "min_positions = [i for i, x in enumerate(a) if x == mymin]", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(random.choice(chars) for _ in range(size))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "json.dumps([p.to_dict() for p in Pasta.query(Pasta.name == 'Ravioli').fetch()])", "out": "辞書内包記法"}
{"in": "my_list = [False for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "return [s for s in perms if valid(s)]", "out": "リスト内包記法 フィルタ"}
{"in": "return re.match('(?:%s)+$' % '|'.join(map(re.escape, letters)), word)", "out": "正規表現 リストの文字列化"}
{"in": "count = sum(1 for u in seq if u != 'Z')", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('\\\\W+', 'Words, words, words.')", "out": "正規表現"}
{"in": "[s.index(x) for x in lst]", "out": "リスト内包記法 変換"}
{"in": "m = re.search('(hardware ethernet\\\\s+(\\\\S+));\\\\s+\\\\S+\\\\s+(\\\\S+);', data)", "out": "正規表現"}
{"in": "return a * x ** 2 + b + c * np.sin(x)", "out": "累乗演算子"}
{"in": "return dict((k, dol1.get(k, no) + dol2.get(k, no)) for k in keys)", "out": "辞書内包記法"}
{"in": "print('{0}x^2 + {1}x + {2}'.format(*z))", "out": "引数展開"}
{"in": "c = [('Adi_%s' % s) for s in a]", "out": "リスト内包記法 変換"}
{"in": "return [(item, the_list.count(item)) for item in sorted(set(the_list))]", "out": "リスト内包記法 変換"}
{"in": "return [(x + 1) for x in l]", "out": "リスト内包記法 変換"}
{"in": "zip(a[::2], a[1::2])", "out": "ひとつおきの列"}
{"in": "return [val for sublist in mylist for val in sublist]", "out": "リスト内包記法 変換"}
{"in": "a[np.ix_(*[list(range(0, i, 2)) for i in a.shape])]", "out": "リスト内包記法 変換 引数展開"}
{"in": "list([_ for _ in ['hello', 'good1', '1234'] if not _.isdigit()])", "out": "リスト内包記法 フィルタ"}
{"in": "store.close()", "out": "正規表現"}
{"in": "re.search('((?:ABC){5})(DEF)', 'ABCABCABCABCABCDEF').group(2)", "out": "正規表現"}
{"in": "re.search('[0-9]* (ABC(...))', '123 ABCDEF 456').group(2)", "out": "正規表現"}
{"in": "patjunk = re.compile('<.*?>|\\xc2\\xa0|&', re.DOTALL | re.M)", "out": "正規表現"}
{"in": "def sxor(s1, s2):\n    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(s1, s2))", "out": "リスト内包記法 変換 リストの文字列化 排他的論理和"}
{"in": "b = [i for i in a]", "out": "リスト内包記法 変換"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "return ''.join([chr(int(s[i:i + 3])) for i in range(0, len(s), 3)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return any([(sorted(sub) in range(min(l), max(l) + 1)) for sub in subs])", "out": "リスト内包記法 変換"}
{"in": "dictionary_of_bindings = {x: variables[x] for x in ('foo', 'flip')}", "out": "辞書内包記法"}
{"in": "[var for var in l if var]", "out": "リスト内包記法 フィルタ"}
{"in": "return [audio[i // 2] for i in range(0, len(audio) * 2)]", "out": "リスト内包記法 変換"}
{"in": "process_names = [proc.name() for proc in psutil.process_iter()]", "out": "リスト内包記法 変換"}
{"in": "return ','.join(reduce(Rangify, zip(zones, deltas), ([], None))[0])", "out": "リストの文字列化"}
{"in": "return [j for j in range(2, n) if isprime(n)]", "out": "リスト内包記法 フィルタ"}
{"in": "final_dict = {key: t[key] for key in t if key not in [key1, key2]}", "out": "辞書内包記法"}
{"in": "dict(re.findall(pattern, json_string))", "out": "正規表現"}
{"in": "[cube(i) for i in range(1, 11)]", "out": "リスト内包記法 変換"}
{"in": "s = s.split('\\n', 1)[-1]", "out": "末尾の要素"}
{"in": "next((x for x in seq if predicate(x)))", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join(args)", "out": "リストの文字列化"}
{"in": "x, y = zip(*points)", "out": "引数展開"}
{"in": "return chain.from_iterable(combinations(xs, n) for n in range(len(xs) + 1))", "out": "リスト内包記法 変換"}
{"in": "fout.write(' '.join(row))", "out": "リストの文字列化"}
{"in": "dict(d1, **d2)", "out": "引数展開"}
{"in": "[(k, len(list(g))) for k, g in groupby(s)]", "out": "リスト内包記法 変換"}
{"in": "Counter(item for lst in listOfLists for item in set(lst))", "out": "リスト内包記法 変換"}
{"in": "datetime.datetime.strptime(time_str, '%Y-%m-%dT%H:%M:%S%z')", "out": "日付書式 時刻書式"}
{"in": "f.strip('\\ufeff')", "out": "ユニコード"}
{"in": "lines = [map(float, l[:3]) for l in lines if len(l) >= 3]", "out": "リスト内包記法 フィルタ"}
{"in": "print(recursive_lambda(lambda a, b: b * a(a, b - 1) if b > 0 else 1)(6))", "out": "三項演算子"}
{"in": "[('%x' % ord(c)) for c in chars]", "out": "リスト内包記法 変換"}
{"in": "return np.sqrt(np.sum(w ** 2, axis=1))", "out": "累乗演算子"}
{"in": "{x for x in a if x == x}", "out": "辞書内包記法"}
{"in": "return list(itertools.chain.from_iterable([l[x] for x in lslice]))", "out": "リスト内包記法 変換"}
{"in": "return QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable", "out": "正規表現"}
{"in": "return (x + 1 for x in l)", "out": "リスト内包記法 変換"}
{"in": "print(' '.join('%5d' % nCk(n, k) for k in range(n + 1)).center(100))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(newdate.strftime('%Y%m%d'))", "out": "日付書式"}
{"in": "'%.2f' % 2606.89579999999", "out": "少数点表示制限"}
{"in": "[item for item in 'abc']", "out": "リスト内包記法 変換"}
{"in": "stopwords = '|'.join(f.read().lower().split())", "out": "リストの文字列化"}
{"in": "a = '\\u0420\\u0443\\u0441\\u0441\\u043a\\u0438\\u0439 \\xd0\\xb5\\xd0\\xba'", "out": "ユニコード"}
{"in": "[map(counter.__getitem__, all_features) for counter in counters]", "out": "リスト内包記法 変換"}
{"in": "~pd.isnull(df[list_of_cols])", "out": "反転演算子"}
{"in": "print(''.join(my_encoder(my_string)))", "out": "リストの文字列化"}
{"in": "count_array = [int(i.count) for i in mvv_list.collect()]", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('\\\\(\\\\?P<(.*?)>\\\\\\\\w\\\\+\\\\)')", "out": "正規表現"}
{"in": "np.vstack([np.diag(c[:, (i), (i)]) for i in range(A.shape[0])]).T", "out": "リスト内包記法 変換"}
{"in": "return QtCore.Qt.ItemIsEnabled", "out": "正規表現"}
{"in": "return ', '.join(l[:-1]) + ', and ' + l[-1]", "out": "リストの文字列化 末尾の要素"}
{"in": "dict((k, json.dumps(v)) for k, v in list(json.loads(val).items()))", "out": "辞書内包記法"}
{"in": "rows = soup.find_all('tr', {'class': re.compile('class1.*')})", "out": "正規表現"}
{"in": "print(re.findall('bus|car|\\\\w', s))", "out": "正規表現"}
{"in": "subsampled = df.ix[(choice(x) for x in grouped.groups.values())]", "out": "リスト内包記法 変換"}
{"in": "return ''.join(_iter())", "out": "リストの文字列化"}
{"in": "time.strptime('0,0,62', '%H,%M,%S')", "out": "時刻書式"}
{"in": "[y for x in it for y in x + (None,)]", "out": "リスト内包記法 変換"}
{"in": "urljoin('http://example1.com/', '/picture.png')", "out": "正規表現"}
{"in": "c = re.compile('(\\\\w+).s(\\\\d+)(?:e(\\\\d+)(?:e(\\\\d+))?)?', re.X)", "out": "正規表現"}
{"in": "s = re.search('[a-zA-Z+](\\\\d{3})$', 'string123')", "out": "正規表現"}
{"in": "listOfStuff = [doSomethingWith(v) for v in range(n // 2, -1, -1)]", "out": "リスト内包記法 変換"}
{"in": "for i in range(1, 6):\n    for c1 in itertools.combinations(c, i):\n        c1 = set(c1)\nc2 = set(c) - c1\nprint(c1, c2)", "out": "リスト内包記法 変換"}
{"in": "print(''.join(my_encoder('this is a\\x97n exam\\x97ple')))", "out": "リストの文字列化"}
{"in": "other_app.other_view(request, **kwargs)", "out": "引数展開"}
{"in": "print(dt.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "[x for x in s.split('\\t')]", "out": "リスト内包記法 変換"}
{"in": "dict_lol = dict((item[1], item) for item in lol)", "out": "辞書内包記法"}
{"in": "print(' '.join(similar_words))", "out": "リストの文字列化"}
{"in": "print(re.sub('\\\\$_(.*?)\\\\$|\\\\$\\\\^(.*?)\\\\$', replace, text))", "out": "正規表現"}
{"in": "kwargs_new = {str(k): v for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "return f(*args, **kwargs)", "out": "引数展開"}
{"in": "[(a if C else b) for i in items]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "with open('input.txt') as matrixfile:\n    matrix = [list(line.strip()) for line in matrixfile]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\ {2,}', '', yourstring)", "out": "正規表現"}
{"in": "[get(get(d, 'x.' + k), 'a.b') for k in list(get(d, 'x').keys())]", "out": "リスト内包記法 変換"}
{"in": "largest_names = [x[0] for x in heapq.nlargest(6, your_list, key=itemgetter(1))]", "out": "リスト内包記法 変換"}
{"in": "print([filters.get(word) for word in sentence.split() if word in filters])", "out": "リスト内包記法 フィルタ"}
{"in": "s = 'Hello how are you today Joe'\ns = ' '.join(s[i:i + 2] for i in range(0, len(s), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return tuple(x[0] for x in G)", "out": "リスト内包記法 変換"}
{"in": "subversion = re.compile('(?<=SDK )\\\\d*.\\\\d*.\\\\d*.\\\\d*')\nsubversion.search(s).group()", "out": "正規表現"}
{"in": "re.split('(?<!\\\\d)\\\\.|\\\\.(?!\\\\d)', text)", "out": "正規表現"}
{"in": "'Matches!' if re.match(smiley_pattern, s) else \"Doesn't match.\"", "out": "三項演算子 正規表現"}
{"in": "\"\"\"{:.2f}\"\"\".format(1.2345)", "out": "少数点表示制限"}
{"in": "str_list = [item for item in str_list if item]", "out": "リスト内包記法 フィルタ"}
{"in": "s = '110101001'\nnumbers = [int(s[i:i + 3], 2) for i in range(0, len(s), 3)]\nprint(numbers)", "out": "リスト内包記法 変換"}
{"in": "all(x == 0 for x in list(d.values()))", "out": "リスト内包記法 変換"}
{"in": "super(B, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print([''.join(i) for i in window('2316515618', 3)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "mystr = ' '.join(['Why, hello there', 'wonderful stackoverflow people!'])", "out": "リストの文字列化"}
{"in": "return '&'.join(l)", "out": "リストの文字列化"}
{"in": "result = [sum(data) for data in zip(*args)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "print('{} -> {{{}}}'.format(key, ', '.join(value)))", "out": "リストの文字列化"}
{"in": "with open('new_file.txt', 'w') as out_file:\n    out_file.write('\\n'.join(data))", "out": "リストの文字列化"}
{"in": "return [row for row in listOfLists if re.match('-?\\\\d+$', row[x])]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "return [x for x in mylist if not any(c.isdigit() for c in x)]", "out": "リスト内包記法 フィルタ"}
{"in": "def square(vals):\n    return [(v * v) for v in vals]", "out": "リスト内包記法 変換"}
{"in": "dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)", "out": "正規表現"}
{"in": "stack[-1].append([])", "out": "末尾の要素"}
{"in": "return match.group(1) if match else None", "out": "三項演算子"}
{"in": "list(map(chr, list(range(ord(s[0]), ord(s[-1]) + 1))))", "out": "末尾の要素"}
{"in": "a, result = a[:-1], a[-1]", "out": "末尾の要素"}
{"in": "arraymean = sum([int(i[0]) for i in array]) / len(array)", "out": "リスト内包記法 変換"}
{"in": "result.append(list[-1])", "out": "末尾の要素"}
{"in": "words = [x for x in words if x not in bad_words]", "out": "リスト内包記法 フィルタ"}
{"in": "return list(set([x for x in l if l.count(x) > 1]))", "out": "リスト内包記法 フィルタ"}
{"in": "result = [s[i:j] for i, j in zip([None] + b, b + [None])]", "out": "リスト内包記法 変換"}
{"in": "return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))", "out": "リスト内包記法 変換"}
{"in": "[element for element in arr if 'xx' in element]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[A-Z][a-z]*', 'SplitAString')", "out": "正規表現"}
{"in": "mycollapsedstring = ' '.join(mystring.split())", "out": "リストの文字列化"}
{"in": "return function(self, *args, **kwargs)", "out": "引数展開"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "c = ''.join(b)", "out": "リストの文字列化"}
{"in": "AB = [(a + b) for a, b in itertools.zip_longest(A, B, fillvalue=0)]", "out": "リスト内包記法 変換"}
{"in": "any(some_func(x) for x in some_list if x > 5)", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\",\"\"\".join(k for k, g in groupby(sorted(nums)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "cmd = '\\n'.join(['line %d' % 1, 'line %d' % 2, 'line %d' % 3])", "out": "リストの文字列化"}
{"in": "return [('self.' + name) for name in self.__dict__]", "out": "辞書内包記法"}
{"in": "b = dict([i.split(': ') for i in a])", "out": "辞書内包記法"}
{"in": "QtCore.QAbstractListModel.__init__(self)", "out": "正規表現"}
{"in": "lines.append(' '.join(words))", "out": "リストの文字列化"}
{"in": "week = ''.join(week)", "out": "リストの文字列化"}
{"in": "words = re.findall('\\\\w+', open('1976.03.txt').read().lower())", "out": "正規表現"}
{"in": "zip(*lol)", "out": "引数展開"}
{"in": "subList = [tempList[n:n + N] for n in range(0, len(theList), N)]", "out": "リスト内包記法 変換"}
{"in": "now.strftime('%Y-%m-%d %H:%M:%S.%f').rstrip('0')", "out": "日付書式 時刻書式"}
{"in": "keys = ['name', 'last_name', 'phone_number', 'email']\ndict1 = {x: dict1[x] for x in keys}", "out": "辞書内包記法"}
{"in": "version = re.compile('(?<=Version: )\\\\d*-[a-z]*-\\\\d')", "out": "正規表現"}
{"in": "anims = [f for f in files if f[2].lower() not in IMAGE_TYPES]", "out": "リスト内包記法 フィルタ"}
{"in": "print('True' if mydict.get('key') else 'False')", "out": "三項演算子"}
{"in": "zip(*r)", "out": "引数展開"}
{"in": "[(i + j) for i, j in zip(list_of_urls, string.lowercase[:14])]", "out": "リスト内包記法 変換"}
{"in": "re.escape('a') == 'a'", "out": "正規表現"}
{"in": "myarray = array([float(x) for x in vals])", "out": "リスト内包記法 変換"}
{"in": "return np.sum(np.linalg.solve(L, xdiff.T) ** 2, axis=0)", "out": "累乗演算子"}
{"in": "num = 1234\nlst = [int(i) for i in str(num)]", "out": "リスト内包記法 変換"}
{"in": "print(all(int(a) in b for a, b in zip(test_ip.split('.'), toks)))", "out": "リスト内包記法 変換"}
{"in": "return m[:, :, ::-1]", "out": "逆順の列"}
{"in": "rans.execute('https://-----.pythonanywhere.com/api/story', json.toString())", "out": "正規表現"}
{"in": "[(y1 - x1, y2 - x2) for (x1, x2), (y1, y2) in combinations(myList, 2)]", "out": "リスト内包記法 変換"}
{"in": "[var for var in combinations([1, 2, 3, 4, 5], 2)]", "out": "リスト内包記法 変換"}
{"in": "[(x * next(cyc)) for x in lis[0]]", "out": "リスト内包記法 変換"}
{"in": "print(df.to_string(float_format='${:,.2f}'.format))", "out": "少数点表示制限"}
{"in": "tested = [i for i in input if i > 2]", "out": "リスト内包記法 フィルタ"}
{"in": "return re.sub('[' + re.escape(''.join(chars)) + ']', '', subj)", "out": "正規表現 リストの文字列化"}
{"in": "even = list(next(iter(())) if n == 412 else n for n in numbers if 0 == n % 2)", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "file = open('file.txt', 'rb')\ntable = [row.strip().split('\\t') for row in file]", "out": "リスト内包記法 変換"}
{"in": "jfile = json.loads(''.join(lines))", "out": "リストの文字列化"}
{"in": "map(func, *sequences)", "out": "引数展開"}
{"in": "[ips_data[ip] for ip in sorted_ips]", "out": "リスト内包記法 変換"}
{"in": "return self.fcall(*args)", "out": "引数展開"}
{"in": "return int(''.join('01'[i] for i in bitlist), 2)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "numpy.fromiter((your_func(row) for row in X), dtype=bool, count=len(X))", "out": "リスト内包記法 変換"}
{"in": "zip(*data)", "out": "引数展開"}
{"in": "re.sub(':([a-z]+)', '<span>\\\\1</span>', method)", "out": "正規表現"}
{"in": "H.add_edge(''.join(p_node), ''.join(node))", "out": "リストの文字列化"}
{"in": "\"\"\"{:f}\"\"\".format(10 ** -3).rstrip('0')", "out": "累乗演算子"}
{"in": "ainb = np.array([(x in b) for x in a[:, (2)]])", "out": "リスト内包記法 変換"}
{"in": "return [str[i:i + chunk_size] for i in range(0, len(str), chunk_size)]", "out": "リスト内包記法 変換"}
{"in": "with open('/path/to/some/file', 'r') as fp:\n    hex_list = ['{:02x}'.format(ord(c)) for c in fp.read()]", "out": "辞書内包記法"}
{"in": "print([v for v in values if len(v[1]) > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "return f(*args)", "out": "引数展開"}
{"in": "lines = [line for line in f if line.strip()]", "out": "リスト内包記法 フィルタ"}
{"in": "print(any(sd['serial'] == '00000000762c1d3c' for sd in d['device']))", "out": "リスト内包記法 変換"}
{"in": "reversed_phrase = ' '.join([word[::-1] for word in phrase.split()])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "Text.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "super(LockedSet, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(dict(re.findall('(.+?)\\\\((.*?)\\\\)', s)))", "out": "正規表現"}
{"in": "def slicedict(d, s):\n    return {k: v for k, v in d.items() if k.startswith(s)}", "out": "辞書内包記法"}
{"in": "data = [(x if x.isalpha() else float(x)) for x in line.split()]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "result_utc_datetime.strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "dict([(elem, 0) for elem in s])", "out": "辞書内包記法"}
{"in": "store.append('df_result', m)", "out": "正規表現"}
{"in": "y = ''.join('0' if i == j else '1' for i, j in zip(a, b))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "keys = [k for k, v in Arr]", "out": "リスト内包記法 変換"}
{"in": "np.genfromtxt(' '.join(ln.split()[N:]) for ln in f)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "A = alpha * x * y + beta * x ** 2 + gamma * y ** 2", "out": "累乗演算子"}
{"in": "foo(**{key: 1, foo: 2})", "out": "引数展開"}
{"in": "vfunc(*np.ix_(xv, yv, zv))", "out": "引数展開"}
{"in": "return [push(D, k, K) for K, D in list(c.items())]", "out": "リスト内包記法 変換"}
{"in": "return words[0] == words[-1] == check_str", "out": "末尾の要素"}
{"in": "print('Invoke the bpython interpreter for this stack frame. To exit bpython and return to a standard pdb press Ctrl-d')", "out": "リスト内包記法 変換"}
{"in": "print([arr[i][i][i] for i in range(len(arr))])", "out": "リスト内包記法 変換"}
{"in": "VIstring = ','.join([('%.5f' % num) for num in VI])", "out": "リスト内包記法 変換 少数点表示制限 リストの文字列化"}
{"in": "print(re.sub('(?s)(.)(?=\\\\1)', '', 'aabbcc'))", "out": "正規表現"}
{"in": "[k for k, v in groupby(sorted(a))]", "out": "リスト内包記法 変換"}
{"in": "c = [(x + [y]) for x, y in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "list(x for x in string.letters if x in (y for y in 'BigMan on campus'))", "out": "リスト内包記法 フィルタ"}
{"in": "print([name for name in dir(B) if isbuiltin(getattr(B, name))])", "out": "リスト内包記法 フィルタ"}
{"in": "list(range(*args))", "out": "引数展開"}
{"in": "day_of_year = time.strptime('2012.11.07', '%Y.%m.%d').tm_yday", "out": "日付書式"}
{"in": "d = {k: v for dct in l for k, v in list(dct.items())}", "out": "辞書内包記法"}
{"in": "print(', '.join(urls))", "out": "リストの文字列化"}
{"in": "return ''.join(padding + line for line in text.splitlines(True))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "l = [cond(i) for i in range(1, n)]", "out": "リスト内包記法 変換"}
{"in": "return re.sub('</p>$', '', re.sub('^<p>', '', cleaned_html))", "out": "正規表現"}
{"in": "input = 'Item 1 | Item 2 | Item 3 <> Item 4 <> Item 5'\nre.split('\\\\||<>', input)\n['Item 1 ', ' Item 2 ', ' Item 3 ', ' Item 4 ', ' Item 5']", "out": "正規表現"}
{"in": "[i for i in a if i != [0]]", "out": "リスト内包記法 フィルタ"}
{"in": "x = np.linspace(0, 10, 50)\ny = 3 * x ** 2 + 5 + 2 * np.sin(x)", "out": "累乗演算子"}
{"in": "[solution for solution in solve(4)]", "out": "リスト内包記法 変換"}
{"in": "stream = sys.argv[1] if len(sys.argv) > 1 else sys.stdin", "out": "三項演算子"}
{"in": "a = [Decimal(x) for x in '2.3,1.5,5.7,4.6,5.5,1.5'.split(',')]", "out": "リスト内包記法 変換"}
{"in": "match = re.search('[^f]', line)", "out": "正規表現"}
{"in": "food = [random.choice(i) for i in list(my_dict.values())]", "out": "辞書内包記法"}
{"in": "re.sub('[a-z]([A-Z])', '-\\\\1', inputstring).lower()", "out": "正規表現"}
{"in": "indices = zip(*sp_matrix.nonzero())", "out": "引数展開"}
{"in": "add(*l)", "out": "引数展開"}
{"in": "pattern = re.compile('\\\\B(\\\\d+)\\\\B')", "out": "正規表現"}
{"in": "pattern = re.compile('\\\\s+')", "out": "正規表現"}
{"in": "super(SplitAddressField, self).__init__(fields, *args, **kwargs)", "out": "引数展開"}
{"in": "print(' '.join(row))", "out": "リストの文字列化"}
{"in": "array.sort(key=lambda k: (k[0] - point[0]) ** 2 + (k[1] - point[1]) ** 2)", "out": "累乗演算子"}
{"in": "[i for i, (a1, a2) in enumerate(zip(s1, s2)) if a1 != a2]", "out": "リスト内包記法 フィルタ"}
{"in": "input = ['a/b', 'g', 'c/d', 'h', 'e/f']\nprint([i.split('/')[1] for i in input if i.find('/') == 1])", "out": "リスト内包記法 フィルタ"}
{"in": "parts = [x.replace('\"', '') for x in line.strip().split(',')]", "out": "リスト内包記法 変換"}
{"in": "[bool(re.search('String', i)) for i in strings]", "out": "リスト内包記法 変換 正規表現"}
{"in": "ax1.set_color_cycle([cm(1.0 * i / (NPOINTS - 1)) for i in range(NPOINTS - 1)])", "out": "リスト内包記法 変換"}
{"in": "struct.pack('BBB', *rgb).encode('hex')", "out": "引数展開"}
{"in": "self.figure.canvas.draw()", "out": "正規表現"}
{"in": "re.search('\\\\(.*?\\\\)', x).group()", "out": "正規表現"}
{"in": "print(all(hasattr(obj, attr) for attr in ('keys', '__getitem__')))", "out": "リスト内包記法 変換"}
{"in": "[x for x in data if func(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in range(len(self.states)) if self.states[x]]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" {:0.4f}\"\"\".format(1.0 / 2.0).rstrip('0')", "out": "少数点表示制限"}
{"in": "dict((x, duplicates(List, x)) for x in set(List) if List.count(x) > 1)", "out": "辞書内包記法"}
{"in": "print('Entry point for qrproject. Happily imports qrencode module')", "out": "リスト内包記法 変換"}
{"in": "unicodedata.normalize('NFC', '\\u272e')", "out": "ユニコード"}
{"in": "ax1.set_color_cycle([colormap(i) for i in np.linspace(0, 1, number_of_plots)])", "out": "リスト内包記法 変換"}
{"in": "print('Instantiated in {0}:{1}'.format(*obj.traceback))", "out": "引数展開"}
{"in": "list(chunk((i for i in range(8)), 3))", "out": "リスト内包記法 変換"}
{"in": "ax.fill_between(np.arange(1, 10), 1, 2, zorder=-1, **kwargs)", "out": "引数展開"}
{"in": "df.columns = zip(*col_names)[1]", "out": "引数展開"}
{"in": "series.apply(lambda x: x.strftime('%Y-%m-%d')).to_json()", "out": "日付書式"}
{"in": "[x for x in l1 if not any(fnmatch(x, p) for p in l2)]", "out": "リスト内包記法 フィルタ"}
{"in": "dict((k, find_key(v, 'md5')) for k, v in list(json_result.items()))", "out": "辞書内包記法"}
{"in": "mylist = [1, 1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5]\n{k: mylist.count(k) for k in set(mylist)}", "out": "辞書内包記法"}
{"in": "a[::-1]", "out": "逆順の列"}
{"in": "return zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "data = [str(float(fractions.Fraction(x))) for x in data]", "out": "リスト内包記法 変換"}
{"in": "return None if x is None else something_else", "out": "三項演算子"}
{"in": "thedata = [{'date': '2002-02', 'data': 2.0}, {'date': '2002-03', 'data': \n    2.0017}]\nprint([a['data'] for a in thedata])", "out": "辞書内包記法"}
{"in": "l = [3, 0, 2]\nsum(j ** i for i, j in enumerate(l, 1))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "super(B, self).__init__(*args)", "out": "引数展開"}
{"in": "b = a.decode('utf8')[::-1]", "out": "逆順の列"}
{"in": "re.search('\\\\d+', 'foo123bar').group()", "out": "正規表現"}
{"in": "return list({k.partition(':')[0]: k for k in workers}.values())", "out": "辞書内包記法"}
{"in": "return [Factorial(x) for x in it]", "out": "リスト内包記法 変換"}
{"in": "time.strftime('%H:%M:%S', t)", "out": "時刻書式"}
{"in": "print(', '.join(map(str, cheapest_path(path_list))))", "out": "リストの文字列化"}
{"in": "[list(g) for k, g in groupby(a)]", "out": "リスト内包記法 変換"}
{"in": "max(n for n in a if n < 0.7)", "out": "リスト内包記法 フィルタ"}
{"in": "a if b else c", "out": "三項演算子"}
{"in": "pprint({key: getattr(f, key) for key in dir(f)})", "out": "辞書内包記法"}
{"in": "print({i: f.lower() for i in nums for f in fruit})", "out": "辞書内包記法"}
{"in": "print(lastHourDateTime.strftime('%Y-%m-%d %H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "df['color'] = [('red' if x == 'Z' else 'green') for x in df['Set']]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "time.strftime('%m/%d/%Y', ts)", "out": "日付書式"}
{"in": "newList = [word for word, mask in zip(s, b) if mask]", "out": "リスト内包記法 フィルタ"}
{"in": "zip(*([iter(l)] * 2))", "out": "引数展開"}
{"in": "open('newfile', 'w').writelines([line for line in open('textfile') if \n    'apple' in line])", "out": "リスト内包記法 フィルタ"}
{"in": "df.loc[i] = [float(d) for d in data]", "out": "リスト内包記法 変換"}
{"in": "len([i for i in x if 60 < i < 70])", "out": "リスト内包記法 フィルタ"}
{"in": "result = re.findall(\"[\\\\w']+|[.,!?;]\", ' '.join(a))", "out": "正規表現 リストの文字列化"}
{"in": "server.test(**{'arg1': 1, 'arg2': 2})", "out": "引数展開"}
{"in": "[x for x in l if x not in f]", "out": "リスト内包記法 フィルタ"}
{"in": "return [x for i, x in enumerate(a) if i in indices]", "out": "リスト内包記法 フィルタ"}
{"in": "self.widget.insert('end', '\\n'.join(self.content))", "out": "リストの文字列化"}
{"in": "[''.join(x) for x in itertools.combinations('abcd', 2)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[id(i) for i in x]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(map(lambda x: chr(ord(x) + 1), value))", "out": "リストの文字列化"}
{"in": "fruit = re.compile('|'.join(fruit_list))", "out": "正規表現 リストの文字列化"}
{"in": "def num_groups(regex):\n    return re.compile(regex).groups", "out": "正規表現"}
{"in": "any(i in '<string>' for i in '123')", "out": "リスト内包記法 変換"}
{"in": "values = ','.join(str(v) for v in value_list)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return wrapper(fn(*args, **kw))", "out": "引数展開"}
{"in": "pattern = re.compile('[\\\\uD800-\\\\uDFFF].', re.UNICODE)", "out": "正規表現 ユニコード"}
{"in": "[ulist.append(x) for x in l if x not in ulist]", "out": "リスト内包記法 フィルタ"}
{"in": "dict_you_want = {your_key: old_dict[your_key] for your_key in your_keys}", "out": "辞書内包記法"}
{"in": "return ''.join([ch for ch in s if ch not in exclude])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "list_comprehension = [i for i in range(4) if i > 0]", "out": "リスト内包記法 フィルタ"}
{"in": "return [item for item in mylist if item.isalpha()]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"dict((c, string.count(c)) for c in set(string))\"\"\"", "out": "辞書内包記法"}
{"in": "text2_re2 = re.sub('(\\\\d+)/(\\\\d+)/(\\\\d+)', '\\x03-\\x01-\\x02', text2)", "out": "正規表現"}
{"in": "l = [s.name for s in sections]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\B([A-Z])', '-\\\\1', 'ThisIsMyText').lower()", "out": "正規表現"}
{"in": "def chunkstring(string, length):\n    return (string[0 + i:length + i] for i in range(0, len(string), length))", "out": "リスト内包記法 変換"}
{"in": "key = ' = '.join((key, str(value).replace('\\n', '\\n\\t')))", "out": "リストの文字列化"}
{"in": "print([[(each - x) for x in l] for each in l])", "out": "リスト内包記法 変換"}
{"in": "ax.plot(np.arange(0, 9) ** 2, label='$y=x^2$')", "out": "累乗演算子"}
{"in": "lesser = qsort([x for x in inlist[1:] if x < pivot])", "out": "リスト内包記法 フィルタ"}
{"in": "a = 1 if x < 1 else 10 if x > 10 else x", "out": "三項演算子"}
{"in": "ImageOps.fit(image, (min(*image.size),) * 2, Image.ANTIALIAS, 0, (0.5, 0.5))", "out": "引数展開"}
{"in": "return pd.concat(vals, axis=1, keys=keys, **kwargs)", "out": "引数展開"}
{"in": "map(list, zip(*lis))", "out": "引数展開"}
{"in": "size = sum(1 for _ in bucket.objects.all())", "out": "リスト内包記法 変換"}
{"in": "df['Min'] = [min(x) for x in df.Lists.tolist()]", "out": "リスト内包記法 変換"}
{"in": "''.join(reversed(to_bytes(456))) or chr(0)", "out": "リストの文字列化"}
{"in": "[row.tostring() for row in data]", "out": "リスト内包記法 変換"}
{"in": "super(FlaskCelery, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "tk.Frame.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "data = dict(re.findall('(Spec \\\\d+ (?:Included|Label))\\\\s*:\\\\s*(\\\\S+)', data))", "out": "正規表現"}
{"in": "ii = (s1 ** 2 + s2 ** 2 < 1).sum()", "out": "累乗演算子"}
{"in": "def __init__(self, *args, **kwargs):\n    super(ChildClass, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "all(a != b for a, b in itertools.combinations(['a', 'b', 'c', 'd', 'a'], 2))", "out": "リスト内包記法 変換"}
{"in": "{k: (v() if callable(v) else v) for k, v in a.items()}", "out": "辞書内包記法 三項演算子"}
{"in": "mylist = ['x', 3, 'b']\nprint('[%s]' % ', '.join(map(str, mylist)))", "out": "リストの文字列化"}
{"in": "m = re.match('(\\\\d+) (@(\\\\w+)@ )?(\\\\w+)( (.*))?', s)", "out": "正規表現"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[(a, b, c) for a in range(x + 1) for b in range(y + 1) for c in range(z + 1)]", "out": "リスト内包記法 変換"}
{"in": "chars = '\\u4132'.encode('utf-16be')", "out": "ユニコード"}
{"in": "entry_list.extend(x.title.text for x in feed.entry)", "out": "リスト内包記法 変換"}
{"in": "return [multiply(*pair) for pair in zip(iterA, iterB)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "fruits_text = ', '.join(fruits)", "out": "リストの文字列化"}
{"in": "x, y = zip(*li)", "out": "引数展開"}
{"in": "datetime.datetime.strptime('Sun, 09 Mar 1997 13:45:00', '%a, %d %b %Y %H:%M:%S'\n    )", "out": "日付書式 時刻書式"}
{"in": "b = [x for x in a if x is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "[(x[0] * x[1]) for x in result]", "out": "リスト内包記法 変換"}
{"in": "return any(lst[i:i + ln] == sub for i in range(len(sub) - ln + 1))", "out": "リスト内包記法 変換"}
{"in": "return [idx for idx, value in enumerate(bool_list, 1) if value]", "out": "リスト内包記法 フィルタ"}
{"in": "[node() for _ in range(100)]", "out": "リスト内包記法 変換"}
{"in": "lst[:] = [i for i in lst if i > 3]", "out": "リスト内包記法 フィルタ"}
{"in": "re.search('hello', testString)", "out": "正規表現"}
{"in": "return '\\n'.join(lines)", "out": "リストの文字列化"}
{"in": "[(y - x) for x, y in it.combinations(a, 2)]", "out": "リスト内包記法 変換"}
{"in": "print([k for k, v in list(count.items()) if v == highest])", "out": "リスト内包記法 フィルタ"}
{"in": "print('.'.join(str(x) for x in reversed(bytes)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print([(i, sum(j)) for i, j in list(d.items())])", "out": "リスト内包記法 変換"}
{"in": "d = dict((k, eval(k)) for k in ('foo', 'bar'))", "out": "辞書内包記法"}
{"in": "return ''.join(result)", "out": "リストの文字列化"}
{"in": "ax.plot(x, x ** 2 - 8.8)", "out": "累乗演算子"}
{"in": "s = '%i:%02i:%06.3f' % (hours, minutes, seconds)", "out": "少数点表示制限"}
{"in": "super(UserCreateForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "path = 'C:\\\\Users\\\\Deusdies\\\\Documents\\\\Work\\\\myapp'", "out": "ユニコード"}
{"in": "now.strftime('%B %d, %Y')", "out": "日付書式"}
{"in": "re.sub('@', lambda _: next(subs), some_text)", "out": "正規表現"}
{"in": "print(re.sub('(.{0,%d}).{0,%d}' % (n, m), '\\\\1', input[start:]))", "out": "正規表現"}
{"in": "re.match('a\\\\w\\\\w\\\\wz', normalize('NFC', 'aoo\\u0301oz'), re.UNICODE)", "out": "正規表現 ユニコード"}
{"in": "list2 = [[item[i] for item in list if len(item) > i] for i in range(0, 100)]", "out": "リスト内包記法 フィルタ"}
{"in": "mycards = ['0H', '8H', '7H', '6H', 'AH', 'QS']\nall(x == 'QS' or 'H' in x for x in mycards)", "out": "リスト内包記法 変換"}
{"in": "[list(zip(a, p)) for p in permutations(b)]", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nreturn reduce(operator.xor, lst[::2])", "out": "ひとつおきの列"}
{"in": "mylist = [1, 2, 3, '', 4]\nmylist = [i for i in mylist if i != '']", "out": "リスト内包記法 フィルタ"}
{"in": "out[mask] = np.core.defchararray.add('t:', series2[mask].astype(str))", "out": "正規表現"}
{"in": "return list.pop(self, *args, **kwargs)", "out": "引数展開"}
{"in": "set().union(*lis)", "out": "引数展開"}
{"in": "a = ''.join([str(random.randint(0, 9)) for i in range(x)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "matrix = [line.rstrip() for line in infile]", "out": "リスト内包記法 変換"}
{"in": "mylist = [p for i, p in enumerate(mylist) if i not in remove]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in ['id1', 'x', 'x', 'x'] if x != 'x']", "out": "リスト内包記法 フィルタ"}
{"in": "queue.put((True, function(*args, **kwargs)))", "out": "引数展開"}
{"in": "re.sub('\\\\sAND\\\\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)", "out": "正規表現"}
{"in": "int(hashlib.sha256(s.encode('utf-8')).hexdigest(), 16) % 10 ** 8", "out": "累乗演算子"}
{"in": "dupemask = ~df.duplicated(subset=['id'])", "out": "反転演算子"}
{"in": "return function(*args, **kwargs)", "out": "引数展開"}
{"in": "match = re.search(pat, s)", "out": "正規表現"}
{"in": "print(os.path.dirname(os.path.dirname('C:\\\\Users\\\\myFile.txt')))", "out": "ユニコード"}
{"in": "[(x == y) for x, y in zip(s, t)]", "out": "リスト内包記法 変換"}
{"in": "json_part = log_line.split(None, 4)[-1]", "out": "末尾の要素"}
{"in": "return ((int(x), int(y)) for x, y in split)", "out": "リスト内包記法 変換"}
{"in": "soup.findAll('td', 'altRow')[1].findAll('a', href=re.compile('/.a\\\\w+'),\n    recursive=False)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(re.findall('..?', '123456', flags=re.S)[::-1])", "out": "正規表現 リストの文字列化 逆順の列"}
{"in": "m = re.match('going to the ((?:\\\\w+\\\\s*(?!to try)){1,3})', line)", "out": "正規表現"}
{"in": "cv_image = cv_image[:, :, ::-1]", "out": "逆順の列"}
{"in": "k.append('{0:.2f}'.format(c))", "out": "少数点表示制限"}
{"in": "super(SomeMixin, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return TaskBase.__call__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "objectArrray = [c() for c in classArray]", "out": "リスト内包記法 変換"}
{"in": "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(time.mktime(time.strptime(\n    '2008-09-17 14:04:00', '%Y-%m-%d %H:%M:%S'))))", "out": "日付書式 時刻書式"}
{"in": "area += (p1[0] - p0[0]) * ((p1[1] + p0[1]) / 2 if trapezoid else p0[1])", "out": "三項演算子"}
{"in": "return mark_safe('\\n'.join(output))", "out": "リストの文字列化"}
{"in": "print('Column:', ','.join(list(df.columns.values)))", "out": "リストの文字列化"}
{"in": "{k: (v / len(list_of_dicts)) for k, v in list(summed.items())}", "out": "辞書内包記法"}
{"in": "return func(*args, **kw)", "out": "引数展開"}
{"in": "print(' '.join(item))", "out": "リストの文字列化"}
{"in": "csv.write(''.join([(FMT % dict[k][i]) for k in keys]) + '\\n')", "out": "辞書内包記法 リストの文字列化"}
{"in": "sudo('~/install_script.py')", "out": "反転演算子"}
{"in": "re.sub(\"x(?=[^']*'([^']|'[^']*')*$)\", 'P', \"axbx'cxdxe'fxgh'ixj'k\")", "out": "正規表現"}
{"in": "s = re.sub(' +', ' ', s)", "out": "正規表現"}
{"in": "with open('test.csv', 'r') as textfile:\n    for row in reversed(list(csv.reader(textfile))):\n        pass", "out": "リスト内包記法 変換"}
{"in": "a = list(range(1, 10))\n[x for x in a if x not in [2, 3, 7]]", "out": "リスト内包記法 フィルタ"}
{"in": "foo in (obj.id for obj in bar if hasattr(obj, 'id'))", "out": "リスト内包記法 フィルタ"}
{"in": "{k: c[k] for k in li}", "out": "辞書内包記法"}
{"in": "[zip(x, list2) for x in itertools.permutations(list1, len(list2))]", "out": "リスト内包記法 変換"}
{"in": "exampleItem.exampleName(name=name, *function1())", "out": "引数展開"}
{"in": "return all(x >= y for x, y in zip(L, L[1:]))", "out": "リスト内包記法 変換"}
{"in": "[v for v in x2 if v[1] == optimal[0] and v[2] == optimal[1]]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join([w for w in msg.split() if w not in stopWords])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "good = [x for x in mylist if x in goodvals]\nbad = [x for x in mylist if x not in goodvals]", "out": "リスト内包記法 フィルタ"}
{"in": "cursor.execute('desc table_name')\nprint([columns[0] for column in cursor.fetchall()])", "out": "リスト内包記法 変換"}
{"in": "[list(comb) for i in range(1, n + 1) for comb in itertools.combinations(x, i)]", "out": "リスト内包記法 変換"}
{"in": "object_list = [c for c in Content.objects.all() if random.random() < fraction]", "out": "リスト内包記法 フィルタ"}
{"in": "df[[iscomedy(l) for l in df.genre.values.tolist()]]", "out": "リスト内包記法 変換 正規表現"}
{"in": "diags.extend(a.diagonal(i) for i in range(a.shape[1] - 1, -a.shape[0], -1))", "out": "リスト内包記法 変換"}
{"in": "list_of_tuples = [('day1', 'name1', 'value1'), ('day2', 'name2', 'value2'),\n    ('day3', 'name3', 'value3')]\n[list(t) for t in zip(*list_of_tuples)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "sorted(L, key=lambda v: [int(p) for p in v.split('.') if p.isdigit()])", "out": "リスト内包記法 フィルタ"}
{"in": "list.append(run(*i))", "out": "引数展開"}
{"in": "print('.'.join(item.upper() for item in Arr['strings']))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "tups = [(1, 2), (3, 4)]\n\"\"\", \"\"\".join(map(str, tups))", "out": "リストの文字列化"}
{"in": "np.vstack([A[i:i - width] for i in range(width)]).T", "out": "リスト内包記法 変換"}
{"in": "[word.strip(string.punctuation) for word in text.split()]", "out": "リスト内包記法 変換"}
{"in": "return [i for i, elem in enumerate(lst) if condition(elem)]", "out": "リスト内包記法 フィルタ"}
{"in": "df['date'][df.index[0]]\ndf['date'][df.index[-1]]", "out": "末尾の要素"}
{"in": "return '/'.join([res.geturl(), 'financial-ratios'])", "out": "リストの文字列化"}
{"in": "[mapping[value] for value in a1 if value in mapping]", "out": "リスト内包記法 フィルタ"}
{"in": "dave = next(person for person in a.pList if person.num == 123)", "out": "リスト内包記法 フィルタ"}
{"in": "with open(outputfilename, 'wb') as output:\n    output.write(bytearray(int(i, 16) for i in yoursequence))", "out": "リスト内包記法 変換"}
{"in": "lst = [maybe_int(s) for s in lst]", "out": "リスト内包記法 変換"}
{"in": "[x for x in a if x not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "graph[node_id] = [other_node_id for other_node_id in neighbors(node_id)]", "out": "リスト内包記法 変換"}
{"in": "newurl = ''.join(random.choice(string.lowercase) for _ in range(30))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "with open(filename) as file:\n    found = any(word in line.split() for line in file)", "out": "リスト内包記法 変換"}
{"in": "print([', '.join([k, str(v)]) for k, v in list(d.items())])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "f1(localvariable=localvariable, *args)", "out": "引数展開"}
{"in": "b = zip(*a)", "out": "引数展開"}
{"in": "Counter(protein[i:i + 6] for i in range(len(protein) - 5))", "out": "リスト内包記法 変換"}
{"in": "col_dict = {x: col for x, col in enumerate(df.columns)}", "out": "辞書内包記法"}
{"in": "nlistnew = [([a] + row) for row in nlist]", "out": "リスト内包記法 変換"}
{"in": "b = a[4] if a[4:] else 'sss'", "out": "三項演算子"}
{"in": "re.sub('<.*?>', '', st)", "out": "正規表現"}
{"in": "QtGui.QTableWidget.__init__(self, *args)", "out": "引数展開"}
{"in": "re.sub('@', lambda _: substitutions.pop(0), some_text)", "out": "正規表現"}
{"in": "per_column = zip(*per_row)", "out": "引数展開"}
{"in": "return ''.join(rtf_encode_char(c) for c in unistr)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(', '.join(row))", "out": "リストの文字列化"}
{"in": "z = np.sqrt(x ** 2 + y ** 2) + np.sin(x ** 2 + y ** 2)", "out": "累乗演算子"}
{"in": "p.dumps(re.compile('a*b+c*'))", "out": "正規表現"}
{"in": "tk.Toplevel.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "re.split('\\n\\\\s*\\n', s)", "out": "正規表現"}
{"in": "base_lists = [[a, b] for a in range(1, 3) for b in range(1, 6)]", "out": "リスト内包記法 変換"}
{"in": "joint = [[sum(x) for x in zip(a, b)] for a, b in zip(incoming, outgoing)]", "out": "リスト内包記法 変換"}
{"in": "print(sum(sum(map(int, r.findall(line))) for line in data))", "out": "リスト内包記法 変換"}
{"in": "return int(s) if s else 0", "out": "三項演算子"}
{"in": "mydict = dict((k.strip(), v.strip()) for k, v in (item.split('-') for item in\n    s.split(',')))", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(next(it) + x for x in it)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(a if tC else b) for i in items if fC]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[e for sub in tgt if isinstance(sub, (list, tuple)) for e in sub][-5:]", "out": "リスト内包記法 フィルタ"}
{"in": "print(sum(a * b for a, b in combinations(xList, 2)))", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('[a-z]')", "out": "正規表現"}
{"in": "print([dict(zip(keys, items)) for items in res])", "out": "辞書内包記法"}
{"in": "return [(key, other) for key in keys for other in prefixes[key[1:]]]", "out": "リスト内包記法 変換"}
{"in": "any('c' == x[1] for x in the_list)", "out": "リスト内包記法 変換"}
{"in": "[item for item in re.split('(\\\\*)', 'abc*bbc') if item]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "a[np.core.defchararray.rfind(a.astype(str), 'dd') == 2]", "out": "正規表現"}
{"in": "return [file for file in os.listdir('.') if fnmatch.fnmatch(file, '*.txt')]", "out": "リスト内包記法 フィルタ"}
{"in": "[dataset2D[row_idx] for row_idx in row_indices]", "out": "リスト内包記法 変換"}
{"in": "N = np.array([np.random.randint(0, 10, 3) for i in range(1000)])", "out": "リスト内包記法 変換"}
{"in": "iso = time.strftime('%Y-%m-%dT%H:%M:%SZ', timetup)", "out": "日付書式 時刻書式"}
{"in": "iso = time.strftime('%Y-%m-%dT%H:%M:%S', timetup)", "out": "日付書式 時刻書式"}
{"in": "return f.replace('Y', '%Y').replace('m', '%m').replace('d', '%d')", "out": "日付書式"}
{"in": "my_list.sort(key=lambda elem: [my_alphabet.index(c) for c in elem[0]])", "out": "リスト内包記法 変換"}
{"in": "dict((k, sum(map(itemgetter(k), dict1))) for k in dict1[0])", "out": "辞書内包記法"}
{"in": "print(re.search(pattern, string_).groups(1)[0])", "out": "正規表現"}
{"in": "m[list(zip(*map(range, m.shape)))] = 0", "out": "引数展開"}
{"in": "with open('datafile') as f:\n    for line in f:\n        numbers_float = map(float, line.split())", "out": "リスト内包記法 変換"}
{"in": "a, b = zip(*my_list)", "out": "引数展開"}
{"in": "print('Printing the full traceback as if we had not caught it here...')", "out": "正規表現"}
{"in": "del L[len(L) % 2::2]", "out": "ひとつおきの列"}
{"in": "new_list = [foo for foo in foos if foo.location == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "return str(''.join(ascii.isprint(c) and c or '?' for c in text))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "out[-1]", "out": "末尾の要素"}
{"in": "return next((s.index(t) for t in map(str.lower, targ) if t in s), None)", "out": "リスト内包記法 フィルタ"}
{"in": "all(i.isalpha() or i.isspace() for i in 'test       string')", "out": "リスト内包記法 変換"}
{"in": "return [random.randint(1, 100) for _ in range(3)]", "out": "リスト内包記法 変換"}
{"in": "super(BaseModel, self).clean(*args, **kwargs)", "out": "引数展開"}
{"in": "datetime.datetime(*map(int, values))", "out": "引数展開"}
{"in": "[i for i in regex.split('(<(?:(?R)|[^<>])*>)|\\\\s*:\\\\s*', s) if i]", "out": "リスト内包記法 フィルタ"}
{"in": "return [x for x in s.lower() if x in string.ascii_lowercase]", "out": "リスト内包記法 フィルタ"}
{"in": "fline = re.sub('[' + string.punctuation + ']', '', fline)", "out": "正規表現"}
{"in": "xmlText = str(xmlText, errors='replace').replace('\\ufffd', '?')", "out": "ユニコード"}
{"in": "[map(second, row) for row in data]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\d+|$', 'aazzzbbb')[0]", "out": "正規表現"}
{"in": "raise Exception(''.join(traceback.format_exception(*sys.exc_info())))", "out": "引数展開 リストの文字列化"}
{"in": "n = re.findall(pattern, string)", "out": "正規表現"}
{"in": "row = [item[0] for item in cursor.fetchall()]\nrow", "out": "リスト内包記法 変換"}
{"in": "m = re.search('(hardware ethernet\\\\s+(\\\\S+));\\\\s+\\\\S+\\\\s+(\\\\S+);', data)\nprint(m.groups())", "out": "正規表現"}
{"in": "super(MyModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return [value for value in the_list if value != val]", "out": "リスト内包記法 フィルタ"}
{"in": "return self.request.route_url(name, id=self.id, **kw)", "out": "引数展開"}
{"in": "self.target(*args, **kwargs)", "out": "引数展開"}
{"in": "print(locale.atof(re.sub('^\\\\((.*?)\\\\)$', '-\\\\1', a)))", "out": "正規表現"}
{"in": "data = (1,), (3,)\nprint([x[0] for x in data])", "out": "リスト内包記法 変換"}
{"in": "notices = soup.find('div', {'class': 'middlecontent'})\ncontents = ''.join([str(item) for item in notices.contents])", "out": "辞書内包記法 リストの文字列化"}
{"in": "return cls(os.path.expanduser('~'))", "out": "反転演算子"}
{"in": "t.astype(np.int64) / 10 ** 3", "out": "累乗演算子"}
{"in": "second_d = dict([(k, first_d[k]) for k in (2, 3)])", "out": "辞書内包記法"}
{"in": "model.setData(index, newValue, QtCore.Qt.EditRole)", "out": "正規表現"}
{"in": "def save(self, *args, **kwargs):\n    super(Klass, self).save(*args, **kwargs)\nself._original_state = self._as_dict()", "out": "引数展開"}
{"in": "raw_data['Mycol'] = pd.to_datetime(raw_data['Mycol'], format=\n    '%d%b%Y:%H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "sum(1 for i in x if 60 < i < 70)", "out": "リスト内包記法 フィルタ"}
{"in": "m = re.search('\\\\[([A-Za-z0-9_]+)\\\\]', s)", "out": "正規表現"}
{"in": "print(Decimal(2) ** Decimal(2))", "out": "累乗演算子"}
{"in": "text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)", "out": "正規表現"}
{"in": "print('t-statistic = %6.3f pvalue = %6.4f' % stats.ttest_1samp(x, m))", "out": "少数点表示制限"}
{"in": "print(', '.join(row))", "out": "リストの文字列化"}
{"in": "print(date_object.strftime('%B %d, %Y'))", "out": "日付書式"}
{"in": "yield ''.join(loop())", "out": "リストの文字列化"}
{"in": "name_list = [re.findall('(\\\\w+)\\\\(\\\\d+\\\\)', s) for s in L1]", "out": "リスト内包記法 変換 正規表現"}
{"in": "list_of_lists = [['aa', '2'], ['bb', '3']]\n[[try_int(x) for x in lst] for lst in list_of_lists]", "out": "リスト内包記法 変換"}
{"in": "super(Feed, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(d.strftime('%m/%d/%Y'))", "out": "日付書式"}
{"in": "return [Link(url, text) for url, text in urlstext]", "out": "リスト内包記法 変換"}
{"in": "[round_to_nearest(i, 6) for i in range(20)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\$\\\\[([^\\\\]]*)\\\\]', lambda x: d.get(x.group(1)), msg)", "out": "正規表現"}
{"in": "return super(DeleteQueueItem, self).put(**kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(reversed(s))", "out": "リストの文字列化"}
{"in": "lst = ['aaaa8', 'bb8', 'ccc8', 'dddddd8']\nprint([s.strip('8') for s in lst])\nprint([s.replace('8', '') for s in lst])", "out": "リスト内包記法 変換"}
{"in": "return tuple(int(i * 255) for i in colorsys.hsv_to_rgb(h, s, v))", "out": "リスト内包記法 変換"}
{"in": "return [a[i] for i in b]", "out": "リスト内包記法 変換"}
{"in": "asyncore.loop()", "out": "正規表現"}
{"in": "re.sub(rx, '', subj)", "out": "正規表現"}
{"in": "print(list(chain(*A)))", "out": "引数展開"}
{"in": "datetime.fromtimestamp(ts).strftime('%a, %b %d, %Y at %I:%M %p')", "out": "日付書式"}
{"in": "my_list.extend([int(i) for i in row if i.isdigit()])", "out": "リスト内包記法 フィルタ"}
{"in": "r = re.compile(': (.*) \\\\(based on SDK (.*)\\\\)')", "out": "正規表現"}
{"in": "return [lst[i::n] for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "super(CustomHandler, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "match = next((x for x in a if x in str), False)", "out": "リスト内包記法 フィルタ"}
{"in": "datetime.datetime.strptime(ds[:-3], '%Y-%m-%d %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "[x.extract() for x in soup.findAll(['script', 'style'])]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"{},{},{}\"\"\".format(*(x + (y,)))", "out": "引数展開"}
{"in": "[int(next(h).strip()) for _ in range(4)]", "out": "リスト内包記法 変換"}
{"in": "return array([np.linalg.solve(x, identity) for x in A])", "out": "リスト内包記法 変換"}
{"in": "[x for x in a if x.size > 0]", "out": "リスト内包記法 フィルタ"}
{"in": "AllItems = [QComboBoxName.itemText(i) for i in range(QComboBoxName.count())]", "out": "リスト内包記法 変換"}
{"in": "all(is_okay(s) for s in some_array)", "out": "リスト内包記法 変換"}
{"in": "list(int(x, 0) for x in ['0x28', '0x0', '0x0', '0x0'])", "out": "リスト内包記法 変換"}
{"in": "print(fixurl('http://\\xc5sa:abc123@\\u27a1.ws:81/admin'))", "out": "ユニコード"}
{"in": "dict((k, [v[1] for v in vs]) for k, vs in itertools.groupby(l, lambda x: x[0]))", "out": "辞書内包記法"}
{"in": "my_list = [tuple(i) for i in my_list]", "out": "リスト内包記法 変換"}
{"in": "sum(letterGoodness[c] for c in yourstring)", "out": "リスト内包記法 変換"}
{"in": "pruned = ''.join(c for i, c in enumerate(s) if i not in exclusions)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "regex = re.compile('\\\\d+(.*?)[\\\\u263a-\\\\U0001f645]')", "out": "正規表現 ユニコード"}
{"in": "return 'I received {}!'.format(', '.join(str(arg) for arg in args))", "out": "辞書内包記法 リストの文字列化"}
{"in": "max_product = max(mul(*l[:2]), mul(*l[-2:]))", "out": "引数展開"}
{"in": "print(time.strftime('%d/%m/%Y'))", "out": "日付書式"}
{"in": "re.sub('(.)\\\\1\\\\1+', '\\\\1\\\\1', 'jeeeep')", "out": "正規表現"}
{"in": "[y for x in map(None, lis_a, lis_b) for y in x]", "out": "リスト内包記法 変換"}
{"in": "text2_re3 = re.sub('(\\\\d+)/(\\\\d+)/(\\\\d+)', '\\x03-\\x01-\\x02', text2)", "out": "正規表現"}
{"in": "return list(zip(*G))[0]", "out": "引数展開"}
{"in": "y = [a for a in x]", "out": "リスト内包記法 変換"}
{"in": "lambda s: int(s) if s.isdigit() else 0", "out": "三項演算子"}
{"in": "rules.update(rule.split('=', 1) for rule in recurrence.split(';'))", "out": "リスト内包記法 変換"}
{"in": "directories = [item['name'] for item in itertools.islice(gen(), x)]", "out": "リスト内包記法 変換"}
{"in": "[mean(cluster) for cluster in cl.getlevel(2)]", "out": "リスト内包記法 変換"}
{"in": "return max(dict_depth(v, depth + 1) for k, v in d.items())", "out": "辞書内包記法"}
{"in": "ax.figure.autofmt_xdate()", "out": "正規表現"}
{"in": "x[1::2]", "out": "ひとつおきの列"}
{"in": "print([str(r) for r in _package.requires()])", "out": "リスト内包記法 変換"}
{"in": "args = parser.parse_args()\nresult = my_func(**vars(args))", "out": "引数展開"}
{"in": "trimmed.setdefault((k[0], k[-1]), []).append(v)", "out": "末尾の要素"}
{"in": "plt.xlim(bins[0], bins[-1])", "out": "末尾の要素"}
{"in": "s = '2014-04-07'\ndatetime.datetime.strptime(s, '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "return ' '.join(out)", "out": "リストの文字列化"}
{"in": "return mapping[frozenset(list(d.keys()))](**d)", "out": "引数展開"}
{"in": "print(re.sub('([\\\\\"])', '\\\\\\\\\\\\1', 'it\\'s \"this\"'))", "out": "正規表現"}
{"in": "return ''.join(chr(ord(c)) for c in s.decode(encoding)).decode(encoding)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "l = [1, 5, 7]\nprint([y for x in l for y in (x, x + 1)])", "out": "リスト内包記法 変換"}
{"in": "[(L1[i] + L2[i]) for i in range(min(len(L1), len(L2)))]", "out": "リスト内包記法 変換"}
{"in": "zip(*([it] * 2))", "out": "引数展開"}
{"in": "def rev(l):\n    return l[::-1]", "out": "逆順の列"}
{"in": "print('.2f' % d)", "out": "少数点表示制限"}
{"in": "combs = [i for j in range(1, len(atom) + 1) for i in combinations(atom, j)]", "out": "リスト内包記法 変換"}
{"in": "raise ValueError('x must be {} long'.format(n ** 2))", "out": "累乗演算子"}
{"in": "noop = lambda *args, **kwargs: None", "out": "引数展開"}
{"in": "RNA_integers = [RNA_dictionary[i] for i in RNA_list if i in RNA_dictionary]", "out": "辞書内包記法"}
{"in": "dict((k, json.dumps(v)) for k, v in list(json.loads(val).items()))", "out": "辞書内包記法"}
{"in": "('%.4f' % k).lstrip('0')", "out": "少数点表示制限"}
{"in": "eval(''.join(token.lstrip('0') for token in s.split()))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[''.join(v) for k, v in groupby(list_1, key=lambda s: s.startswith('>') and s)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "'d' in (x[0] for x in tups)", "out": "リスト内包記法 変換"}
{"in": "m = re.match('\\\\W*productId[^:]*:\\\\D*(\\\\d+)', t)", "out": "正規表現"}
{"in": "with open('test.txt') as f:\n    size = sum(1 for _ in f)", "out": "リスト内包記法 変換"}
{"in": "return ''.join(shift(i[0]) + i[1:] for i in answer.split('[SHIFT]') if i)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "m = [(x.start(), x.end()) for x in re.finditer('(\\\\w)\\\\1\\\\1', s)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "super().__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[[next(a_iter) for _ in range(n)] for n in b]", "out": "リスト内包記法 変換"}
{"in": "cleanr = re.compile('<.*?>')", "out": "正規表現"}
{"in": "str = ''.join([('%s_%s' % (k, v)) for k, v in dict.items()])", "out": "辞書内包記法 リストの文字列化"}
{"in": "print([dict[i] for i in dict if dict[i] >= x])", "out": "辞書内包記法"}
{"in": "PyOS_snprintf(buffer, sizeof(buffer), 'invalid literal for float(): %.200s', s)", "out": "リスト内包記法 変換"}
{"in": "x = [[i] for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "[len(set(i)) for i in data.reshape(data.shape[0], -1)]", "out": "リスト内包記法 変換"}
{"in": "min(timeit.repeat(lambda : dict([(k, v) for k, v in zip(keys, values)])))", "out": "辞書内包記法"}
{"in": "inFile.split('/')[-1].split('.')[0]", "out": "末尾の要素"}
{"in": "'\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439'", "out": "ユニコード"}
{"in": "fruit = [df.columns[row.astype(bool)].tolist() for row in df.values]", "out": "リスト内包記法 変換"}
{"in": "keys = [k for k in scores if scores[k] == scores[key]]", "out": "リスト内包記法 フィルタ"}
{"in": "[{k: d[k]} for k in sorted(d)]", "out": "辞書内包記法"}
{"in": "r = re.compile('(?:[^,(]|\\\\([^)]*\\\\))+')", "out": "正規表現"}
{"in": "re.match('world', testString)", "out": "正規表現"}
{"in": "df.select(lambda x: not re.search('Test\\\\d+', x), axis=1)", "out": "正規表現"}
{"in": "[dic[k] for k in sorted(dic)]", "out": "リスト内包記法 変換"}
{"in": "dates = pd.to_datetime(pd.Series(['20010101', '20010331']), format='%Y%m%d')", "out": "日付書式"}
{"in": "self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)", "out": "正規表現"}
{"in": "s = ['1', '2', '3.4', '5.6', '7.8']\n[(int(i) if i.isdigit() else float(i)) for i in s]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[s[i:i + 3] for i in range(len(s) - 2)]", "out": "リスト内包記法 変換"}
{"in": "mystr = '0110100001100101011011000110110001101111'\n[mystr[i:i + 8] for i in range(0, len(mystr), 8)]", "out": "リスト内包記法 変換"}
{"in": "[i for i in mysites if i not in list(sites.keys())]", "out": "リスト内包記法 フィルタ"}
{"in": "[index_dict[x] for x in b]", "out": "辞書内包記法"}
{"in": "all(c in string.hexdigits for c in s)", "out": "リスト内包記法 変換"}
{"in": "models.ForeignKey.__init__(self, User, null=True, **kwargs)", "out": "引数展開"}
{"in": "perms = [''.join(p) for p in permutations('stacks')]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return sum(scipy.stats.hypergeom.pmf(k, N, M, Q) for k in range(1, Q + 1))", "out": "リスト内包記法 変換"}
{"in": "data = data[~np.isnan(data).any(axis=1)]", "out": "反転演算子"}
{"in": "print(min(l, key=lambda x: x.rsplit(None, 1)[-1]))", "out": "末尾の要素"}
{"in": "'(\\ud83c[\\udf00-\\udfff]|\\ud83d[\\udc00-\\ude4f\\ude80-\\udeff]|[\\u2600-\\u26ff\\u2700-\\u27bf])+'", "out": "ユニコード"}
{"in": "'[\\U0001f300-\\U0001f64f\\U0001f680-\\U0001f6ff\\u2600-\\u26ff\\u2700-\\u27bf]+'", "out": "ユニコード"}
{"in": "dict_.update((prefix, value) for prefix in prefixes)", "out": "辞書内包記法"}
{"in": "a = ['5', '6']\nsum(Decimal(i) for i in a)", "out": "リスト内包記法 変換"}
{"in": "result = ''.join(i for i in s if not i.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "dt_obj = datetime.datetime.strptime(testeddate, '%m/%d/%Y')", "out": "日付書式"}
{"in": "return {k: v for k, v in list(d.items()) if k not in excluded_keys}", "out": "辞書内包記法"}
{"in": "max(len(i[j]) for i in x)", "out": "リスト内包記法 変換"}
{"in": "result[-1].append(thetext)", "out": "末尾の要素"}
{"in": "[max(min(x, 255), 0) for x in oldList]", "out": "リスト内包記法 変換"}
{"in": "super(SecondBase, self).__init__(**kwargs)", "out": "引数展開"}
{"in": "return [self[i] for i in index]", "out": "リスト内包記法 変換"}
{"in": "plt.legend(title='Line', loc='upper left', handles=handles[::-1])", "out": "逆順の列"}
{"in": "d['k'] = d['k'] + 1 if 'k' in d else 0", "out": "三項演算子"}
{"in": "store.insert(None, -1, ['B', 'Task B'])", "out": "正規表現"}
{"in": "store.insert(None, -1, ['C', 'Task C'])", "out": "正規表現"}
{"in": "print(', '.join(map(str, chain(a, b))))", "out": "リストの文字列化"}
{"in": "c_mat1 = np.tensordot(Q, a1, axes=([-1], [0]))", "out": "末尾の要素"}
{"in": "print([elm['data-js'] for elm in soup.find_all(attrs={'data-js': True})])", "out": "辞書内包記法"}
{"in": "Entry.objects.bulk_create([Entry(name=x) for x in a])", "out": "リスト内包記法 変換"}
{"in": "return list(product(*map(lambda x: list(range(x[0], x[1] + 1)), args)))", "out": "引数展開"}
{"in": "Row(**OrderedDict(sorted(row_dict.items())))", "out": "引数展開"}
{"in": "d3 = {v: k for k, v in list(d1.items())}", "out": "辞書内包記法"}
{"in": "print('%.3f' % round(0.3125, 3))", "out": "少数点表示制限"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "struct.pack('B' * len(integers), *integers)", "out": "引数展開"}
{"in": "def removearticles(text):\n    re.sub('\\\\s+(a|an|and|the)(\\\\s+)', '\\x02', text)", "out": "正規表現"}
{"in": "re.search('\\\\[\\\\[([^\\\\]|]*)(?=.*\\\\]\\\\])', '[[aaa|bbb]]').group(1)", "out": "正規表現"}
{"in": "self.figure.set_facecolor((1, 1, 1))", "out": "正規表現"}
{"in": "elements = [e for e in bs.find_all('a') if reg.match(e.text)]", "out": "リスト内包記法 フィルタ"}
{"in": "return [dict(zip(columns, row)) for row in cursor]", "out": "辞書内包記法"}
{"in": "\"\"\"First item: {:d}, second item: {:d} and third item: {:d}.\"\"\".format(*t)", "out": "引数展開"}
{"in": "return [x for x, y in zip(t1, t2) if x == y]", "out": "リスト内包記法 フィルタ"}
{"in": "reduced_list = [x for x in full_list if not omit.intersection(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "print(sys.argv[0], ' '.join([pipes.quote(s) for s in sys.argv[1:]]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print('%8.2f   %8.2f' % (v1, v2))", "out": "少数点表示制限"}
{"in": "datetime.datetime.strptime(datestring, '%Y-%m-%d')", "out": "日付書式"}
{"in": "[output.write(';'.join(list(map(str, list(r.values())))) + '\\n') for r in res]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "blobstore.delete(key)", "out": "正規表現"}
{"in": "re.findall(str_in_doublequotes, text)", "out": "正規表現"}
{"in": "return ' '.join(reversed(words))", "out": "リストの文字列化"}
{"in": "[(barcode(productId), metric(size)) for name, size in [lookup(productId)]][0]", "out": "リスト内包記法 変換"}
{"in": "def square(list):\n    return map(lambda x: x ** 2, list)", "out": "累乗演算子"}
{"in": "[x for x in individual(nest)]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(fibs))", "out": "リストの文字列化"}
{"in": "date = datetime.datetime.strptime('2012-02-11', '%Y-%m-%d')", "out": "日付書式"}
{"in": "rjs = '[\\\\s]*(&#x.{1,7})?'.join(list('javascript:'))", "out": "リストの文字列化"}
{"in": "list([val for val in range(10) if val & 1])", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(new_cipher)", "out": "リストの文字列化"}
{"in": "[num for num in range(1, 6)]", "out": "リスト内包記法 変換"}
{"in": "print(dict(re.findall(r, z)))", "out": "正規表現"}
{"in": "list2 = [int(y) for y in list(itertools.chain(*[str(x) for x in list1]))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "pixels = [pixels[i * width:(i + 1) * width] for i in range(height)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('([\\ud800-\\udbff])([\\udc00-\\udfff])', lambda m: chr((ord(m.group\n    (1)) - 55296 << 10) + ord(m.group(2)) - 56320 + 65536), s)", "out": "正規表現 ユニコード"}
{"in": "float('\\u0127')", "out": "ユニコード"}
{"in": "re.sub('url(#[0-9]+|$)', 'new_url\\\\1', test1)", "out": "正規表現"}
{"in": "parent_map = dict((c, p) for p in tree.getiterator() for c in p)", "out": "辞書内包記法"}
{"in": "l[1::2]", "out": "ひとつおきの列"}
{"in": "print(re.sub(\"(?<!s)'(?!(?:t|ll|e?m)\\\\b)\", '\"', input))", "out": "正規表現"}
{"in": "print(''.join(traceback.format_exception_only(type(e), e)))", "out": "リストの文字列化"}
{"in": "return [i for i, var in enumerate(l[1:], start=1) if var - l[i - 1] >= num]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in names if 'aet' in x]", "out": "リスト内包記法 フィルタ"}
{"in": "a2.ravel()[:] = [tuple(l) for l in m.reshape(2, -1).T]", "out": "リスト内包記法 変換"}
{"in": "l = ['element1\\t0238.94', 'element2\\t2.3904', 'element3\\t0139847', '']\n[i.partition('\\t')[-1] for i in l]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "l[1::2]", "out": "ひとつおきの列"}
{"in": "filtered_list = [x for x in your_list if all(f(x) for f in filters)]", "out": "リスト内包記法 フィルタ"}
{"in": "{file: find_mime_with_file(file) for file in files}", "out": "辞書内包記法"}
{"in": "f(*args, **kwargs)", "out": "引数展開"}
{"in": "print(re.escape('\\\\ a.*$'))", "out": "正規表現"}
{"in": "return ', '.join(listing)", "out": "リストの文字列化"}
{"in": "[ord(c) for c in struct.pack('!I', number)]", "out": "リスト内包記法 変換"}
{"in": "l = [item for sublist in list for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "stuff = [item for item in stuff if not item.endswith('pie')]", "out": "リスト内包記法 フィルタ"}
{"in": "myvalues = [i['d'] for i in mylist if 'd' in i]", "out": "リスト内包記法 フィルタ"}
{"in": "bin(a ^ b)", "out": "排他的論理和"}
{"in": "return all(x < y for x, y in zip(L, L[1:]))", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('(\"[^\"]*)\"')", "out": "正規表現"}
{"in": "df[df.genre.map(iscomedy)]", "out": "正規表現"}
{"in": "sum(sys.getsizeof(x) for x in s)", "out": "リスト内包記法 変換"}
{"in": "re.findall('//.*?(?=\\\\r|\\\\n|(?!.))', input, re.DOTALL | re.MULTILINE)", "out": "正規表現"}
{"in": "def num_there(s):\n    return any(i.isdigit() for i in s)", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(s))", "out": "リストの文字列化"}
{"in": "re.split('\\\\s(?=[a-z]:)', s)", "out": "正規表現"}
{"in": "zip(*[L[i::4] for i in range(4)])", "out": "リスト内包記法 変換 引数展開"}
{"in": "messages = re.split('(?:(?:\\xff){8})+', re.sub('^(?:(?:\\xff){8})+', '',\n    payload))", "out": "正規表現"}
{"in": "result = ''.join(l)", "out": "リストの文字列化"}
{"in": "ax = self.figure.add_subplot(111)", "out": "正規表現"}
{"in": "'%f' % (1 / 10 ** 8)", "out": "累乗演算子"}
{"in": "x = 314159\nx = int(str(x)[::-1])\nprint(x)", "out": "逆順の列"}
{"in": "print(' '.join(cleanse(a.split(), 5)) == b)", "out": "リストの文字列化"}
{"in": "hour = time.strftime('%H')", "out": "時刻書式"}
{"in": "dict(alist[i:i + 2] for i in range(0, len(alist), 2))", "out": "辞書内包記法"}
{"in": "L = [{'a': 1}, {'b': 2}, {'c': 1}, {'d': 2}]\ndict(list(i.items())[0] for i in L)", "out": "辞書内包記法"}
{"in": "result += sum([int(x) for x in re.findall('\\\\d+', str(word))])", "out": "リスト内包記法 変換 正規表現"}
{"in": "return tobin(x / 2) + [x % 2] if x > 1 else [x]", "out": "三項演算子"}
{"in": "regex = re.compile('(\\\\d+,?)+')", "out": "正規表現"}
{"in": "my_list = [run(a, b, c) for a, b, c in product(range(100), repeat=3)]", "out": "リスト内包記法 変換"}
{"in": "{k: g['value'].tolist() for k, g in ptest.groupby('id')}", "out": "辞書内包記法"}
{"in": "re.findall('\\\\s', stri)", "out": "正規表現"}
{"in": "f = np.array([(df * n if n < N / 2 else df * (n - N)) for n in range(N)])", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "my_dict = {x: (x ** 2) for x in range(10)}", "out": "辞書内包記法 累乗演算子"}
{"in": "value = re.sub('\\\\s+', '', value)", "out": "正規表現"}
{"in": "re.sub('([a-z]+)(\\\\d+)', lambda m: m.group(1) + m.group(2).zfill(2), text)", "out": "正規表現"}
{"in": "[os.path.join(*choices[:i + 1]) for i in range(len(choices))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "return {c: counter.get(c, 0) for c in chars}", "out": "辞書内包記法"}
{"in": "return fun(*args, **kwargs)", "out": "引数展開"}
{"in": "ax = self.figure.add_subplot(111)", "out": "正規表現"}
{"in": "fixed_phone = re.sub('[^\\\\d]+', '-', raw_phone)", "out": "正規表現"}
{"in": "strings = ['first', '', 'second']\n[x for x in strings if x]", "out": "リスト内包記法 フィルタ"}
{"in": "string_input = input()\ninput_list = string_input.split()\ninput_list = [int(a) for a in input_list]", "out": "リスト内包記法 変換"}
{"in": "all_pairs += [((nA, 0), (nC, 2)) for nA, nC in itertools.product(listA, listC)]", "out": "リスト内包記法 変換"}
{"in": "result = [s for s in my_list if not s.strip('abc')]", "out": "リスト内包記法 フィルタ"}
{"in": "return self.function(*args, **kwargs)", "out": "引数展開"}
{"in": "print(' '.join([(i.text + i.type) for i in f]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "my_list = [item for item in range(10)]", "out": "リスト内包記法 変換"}
{"in": "qualifier = re.sub('[-_]+', '', os.environ['BUILD_ID'])[0:12]", "out": "正規表現"}
{"in": "QtCore.QAbstractTableModel.__init__(self, parent)", "out": "正規表現"}
{"in": "outfile.write(' '.join(line.split()).replace(' ', ','))", "out": "リストの文字列化"}
{"in": "getattr(web, 'input')(*my_args_list)", "out": "引数展開"}
{"in": "return QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsDropEnabled", "out": "正規表現"}
{"in": "d = dict(item.split(':', 1) for item in list1)", "out": "辞書内包記法"}
{"in": "return next(i for i, string in enumerate(strings) if substring in string)", "out": "リスト内包記法 フィルタ"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "{value: key for key in my_map for value in my_map[key]}", "out": "辞書内包記法"}
{"in": "mask = df['some column'].isin(['this', 'that', 'other'])\ndf[~mask]", "out": "反転演算子"}
{"in": "result = [x for k, v in list(d.items()) for x in k * v]", "out": "リスト内包記法 変換"}
{"in": "allmodules = [sys.modules[name] for name in modulenames]", "out": "リスト内包記法 変換"}
{"in": "myunicode = 'i\\u015f\\u011f\\xfc\\u0131'", "out": "ユニコード"}
{"in": "somelist = [i for j, i in enumerate(somelist) if j not in indices]", "out": "リスト内包記法 フィルタ"}
{"in": "[fac(n) for n in nums]", "out": "リスト内包記法 変換"}
{"in": "all(i.isalpha() or i.isspace() for i in 'test@string')", "out": "リスト内包記法 変換"}
{"in": "times = [match.group(1) for match in pattern.finditer(ifile.read())]", "out": "リスト内包記法 変換"}
{"in": "any(unique.update(line) for line in codecs.open(filename, encoding='UTF-8'))", "out": "リスト内包記法 変換"}
{"in": "\"\"\"System: System uptime (sorted) - Use parallel for best effect\"\"\"", "out": "リスト内包記法 変換"}
{"in": "print('Initiating capture...')", "out": "正規表現"}
{"in": "st = 'wordW wordX wordY wordZ'\nre.findall('(?=(\\\\b\\\\w+\\\\s\\\\b\\\\w+))', st)", "out": "正規表現"}
{"in": "print(rf.predict([testdataset[-1]]))", "out": "末尾の要素"}
{"in": "[i for i in x]", "out": "リスト内包記法 変換"}
{"in": "return [Factorial(x) for x in arg]", "out": "リスト内包記法 変換"}
{"in": "a[::2] = 1\na[1::2] = -1", "out": "ひとつおきの列"}
{"in": "(float(d.strftime('%j')) - 1) / 366 + float(d.strftime('%Y'))", "out": "日付書式"}
{"in": "print('Blocking on semaphore - waiting for SIGTERM')", "out": "リスト内包記法 変換"}
{"in": "row = [item['id'] for item in cursor.fetchall()]\nrow", "out": "リスト内包記法 変換"}
{"in": "return sum(float(embedding) for embedding in listOfEmb) / len(listOfEmb)", "out": "リスト内包記法 変換"}
{"in": "hpattern = ' | '.join(hformats)", "out": "リストの文字列化"}
{"in": "print(''.join(traceback.format_exception_only(*__exception__)))", "out": "引数展開 リストの文字列化"}
{"in": "flt = np.array([x for x in lrg if x == 0])", "out": "リスト内包記法 フィルタ"}
{"in": "res += [os.path.join(root, d) for d in dirs]", "out": "リスト内包記法 変換"}
{"in": "min(map(lambda x: s.index(x) if x in s else len(s), a))", "out": "三項演算子"}
{"in": "print(re.sub(pattern, '<b>\\\\1</b>', myInput))", "out": "正規表現"}
{"in": "datetime.date(2011, 1, 3).strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "print('Running test_callback, just for kicks')", "out": "リスト内包記法 変換"}
{"in": "[groups[k] for k in sorted(groups.keys())]", "out": "リスト内包記法 変換"}
{"in": "s = ''.join(s)", "out": "リストの文字列化"}
{"in": "return [(arr[i], i) for i in indices]", "out": "リスト内包記法 変換"}
{"in": "re.findall('([' + string.letters + '])+', st)", "out": "正規表現"}
{"in": "return ', '.join(words)", "out": "リストの文字列化"}
{"in": "self.mplvl.setGeometry(QtCore.QRect(150, 150, 251, 231))", "out": "正規表現"}
{"in": "print([sum(x) for x in itertools.zip_longest(fillvalue=0, *lists)])", "out": "リスト内包記法 変換 引数展開"}
{"in": "def remove_abnormalities(values, indices):\n    return [val for i, val in enumerate(values) if i not in indices]", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(table))", "out": "リストの文字列化"}
{"in": "int_list = [int(x) for x in line.split()]", "out": "リスト内包記法 変換"}
{"in": "documents = [doc[0] for doc in documents]", "out": "リスト内包記法 変換"}
{"in": "print([b(5) for b in bases])", "out": "リスト内包記法 変換"}
{"in": "fout.writelines('{}\\t{}'.format(line, next(fin2)) for line in fin1)", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(sorted(['1', '5', '2', '9'], reverse=True))", "out": "リストの文字列化"}
{"in": "df[~df.filter(regex='^sps(?!1$)\\\\d+$').eq(df.sps1, axis='rows').any(1)]", "out": "反転演算子"}
{"in": "print(re.findall('(\\\\S[^:]+):\\\\s*(.*\\\\S)', r))", "out": "正規表現"}
{"in": "str1 = 'a    b     c      d'\nre.split(' +', str1)", "out": "正規表現"}
{"in": "[sum(i) for i in zip_longest(fillvalue=0, *l)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[i for i, _ in enumerate(L) if _['name'] == 'Tom'][0]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\n\"\"\".join(['\\t'.join(b) for b in p])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "cleaned = [i for i in map(str.strip, words) if i]", "out": "リスト内包記法 フィルタ"}
{"in": "print([element for element in lst])", "out": "リスト内包記法 変換"}
{"in": "matrix[:] = [([0] * len(row) if 0 in row else row) for row in matrix]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "super(MyGrid, self).__init__(**kwargs)", "out": "引数展開"}
{"in": "transform = {'type_id': 'type', 'type_name': 'name'}\nnew_list = [dict((transform[k], v) for k, v in list(d.items())) for d in old_list]", "out": "辞書内包記法"}
{"in": "strint('abc'[::-1])", "out": "逆順の列"}
{"in": "zip(*list_of_values[i:i + len(pattern)])", "out": "引数展開"}
{"in": "super(FirstBase, self).__init__(**kwargs)", "out": "引数展開"}
{"in": "[item for item in items if item.col2 == 2006]", "out": "リスト内包記法 フィルタ"}
{"in": "asyncore.dispatcher.__init__(self)", "out": "正規表現"}
{"in": "return DataFrame([row for i in range(1000)])", "out": "リスト内包記法 変換"}
{"in": "sum(y > 2 for y in x)", "out": "リスト内包記法 変換"}
{"in": "s = 'aabbccdd'\n\"\"\"-\"\"\".join(s[i:i + 2] for i in range(0, len(s), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[x[i:i + chunk_size] for i in range(0, chunks, chunk_size)]", "out": "リスト内包記法 変換"}
{"in": "regex = re.compile('\\\\b(' + remove + ')\\x08', flags=re.IGNORECASE)", "out": "正規表現"}
{"in": "new_list2 = [list2[i] for i in indicies]", "out": "リスト内包記法 変換"}
{"in": "lst = [[3, 1], [3, 2], [3, 3]]\nx, y = zip(*lst)", "out": "引数展開"}
{"in": "print('{FamilyN} {Name} {Age}'.format(**data))", "out": "引数展開"}
{"in": "yield key, sum(d.get(key, 0) for d in dict_list)", "out": "辞書内包記法"}
{"in": "re.sub('\\\\.txt$', '', 'Boat.txt.txt')", "out": "正規表現"}
{"in": "writer.writerows(zip(*test_data[1:]))", "out": "引数展開"}
{"in": "return super(ProtectedView, self).dispatch(*args, **kwargs)", "out": "引数展開"}
{"in": "groups_no_a = [i for i in groups if a not in i]", "out": "リスト内包記法 フィルタ"}
{"in": "return render_template('users/iscrizione.html', **ctx)", "out": "引数展開"}
{"in": "lst = [1, 2, 3]\nprint('\\n'.join('{}: {}'.format(*k) for k in enumerate(lst)))", "out": "辞書内包記法 引数展開 リストの文字列化"}
{"in": "text = '\\\\u0631\\\\u064e\\\\u062c\\\\u0627'\nprint(text.encode().decode('unicode-escape'))", "out": "ユニコード"}
{"in": "data = super().get_context_data(**kwargs)", "out": "引数展開"}
{"in": "return re.search('\\\\d', string)", "out": "正規表現"}
{"in": "def is_prime(n):\n    for i in range(3, n):\n        if n % i == 0:\n            return False\nreturn True", "out": "リスト内包記法 フィルタ"}
{"in": "[(a['pos'][name] > b['pos'][name]) for name in ['x', 'y']]", "out": "リスト内包記法 変換"}
{"in": "return tuple([x for x in map(itemgetter(0), G)])", "out": "リスト内包記法 変換"}
{"in": "print(['|'.join(line) for line in join_lines(data) if line])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "format(nine_hours_from_now, '%H:%M:%S')", "out": "時刻書式"}
{"in": "[x for x in filename if x.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "return os.path.split(x)[-1]", "out": "末尾の要素"}
{"in": "commom = [item for item in list(dict_b.values()) if item in list(dict_a.values())]", "out": "辞書内包記法"}
{"in": "return v[np.lexsort(tuple(v[:, (i)] for i in order[::-1]))]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "return ''.join(reversed(s))", "out": "リストの文字列化"}
{"in": "return itertools.zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "re.sub('(this)(.*)(string)', '<markup>\\\\1</markup>\\\\2<markup>\\\\3</markup>',\n    text)", "out": "正規表現"}
{"in": "[list(range(s, s + step + 1, step)) for s in range(start, stop, step)]", "out": "リスト内包記法 変換"}
{"in": "fn(*args, **kwargs)", "out": "引数展開"}
{"in": "app('Finder').desktop_picture.set(mactypes.File('/your/filename.jpg'))", "out": "正規表現"}
{"in": "a = 'Hello\\\\u2026'\nprint(a.decode('unicode-escape'))", "out": "ユニコード"}
{"in": "sum(int(c) for c in s if c.isdigit())", "out": "リスト内包記法 フィルタ"}
{"in": "print([(k, out[k]) for k in sorted(out.keys())])", "out": "リスト内包記法 変換"}
{"in": "attributes = [attr for attr in dir(a) if not attr.startswith('__')]", "out": "リスト内包記法 フィルタ"}
{"in": "return [x for x in seq if x not in seen and not seen.add(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(format_exception(etype, value, tb, limit))", "out": "リストの文字列化"}
{"in": "str.__init__(self, *args)", "out": "引数展開"}
{"in": "yield ''.join(newblah)", "out": "リストの文字列化"}
{"in": "s = re.sub(' \\\\d+', ' ', s)", "out": "正規表現"}
{"in": "super(AttrDict, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "{file: check_image_with_pil(file) for file in files}", "out": "辞書内包記法"}
{"in": "set(x[0] for x in zip(a, a[1:]) if x[0] == x[1])\nset(x[0] for x in zip(a, a[1:]) if x[0] == x[1])", "out": "リスト内包記法 フィルタ"}
{"in": "fulltxt = open(mifilepath, 'rb').read()\nlaststring = fulltxt.split(',')[-1]", "out": "末尾の要素"}
{"in": "return int(f) if f.is_integer() else f", "out": "三項演算子"}
{"in": "return [('site:%d' % s.id) for s in sites]", "out": "リスト内包記法 変換"}
{"in": "return super(MyClient, self).send(**kwargs)", "out": "引数展開"}
{"in": "return ' '.join(words)", "out": "リストの文字列化"}
{"in": "list(zip(a, b, zip(*gr), d))", "out": "引数展開"}
{"in": "pattern = re.compile('|'.join(map(re.escape, keys)), re.IGNORECASE)", "out": "正規表現 リストの文字列化"}
{"in": "return ''.join(ch for ch in s if ch not in exclude)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "Counter(tok['Value'] for tok in tokens)", "out": "リスト内包記法 変換"}
{"in": "edge_dict[e[0]][e[-1]] += 1", "out": "末尾の要素"}
{"in": "return lambda s, *args, **kw: not v(s, *args, **kw)", "out": "引数展開"}
{"in": "print('\\n'.join(''.join(x) for x in itertools.permutations(a, 2)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "max_value = max(scores.values())\nkeys = [i for i, v in scores.items() if v == max_value]", "out": "リスト内包記法 フィルタ"}
{"in": "regex = re.compile('^([A-Z])(?!.?\\\\1)([A-Z])(?!\\\\2)([A-Z])[a-z]\\\\1\\\\1\\\\3$')", "out": "正規表現"}
{"in": "with open('original_filename') as original:\n    data = [[int(i) for i in line.split()] for line in original]", "out": "リスト内包記法 変換"}
{"in": "x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nzip(*([iter(x)] * 3))", "out": "引数展開"}
{"in": "for t in some_list:\n    f.write(' '.join(str(s) for s in t) + '\\n')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "ctx.set_ciphers(':'.join(ciphers))", "out": "リストの文字列化"}
{"in": "ax.figure.canvas.draw()", "out": "正規表現"}
{"in": "return func(*args, **kwds)", "out": "引数展開"}
{"in": "print((find_interval(tlist, item) for item in newlist))", "out": "リスト内包記法 変換"}
{"in": "return np.array([row[:num_cols] for row in arr])", "out": "リスト内包記法 変換"}
{"in": "return ''.join(data)", "out": "リストの文字列化"}
{"in": "return r.getvalue().encode('ascii')[::-1]", "out": "逆順の列"}
{"in": "gens = [(lambda v: (i for i in deck if i % 13 == v))(v) for v in range(13)]", "out": "リスト内包記法 フィルタ"}
{"in": "k = [(ord(x) - 96) for x in l]", "out": "リスト内包記法 変換"}
{"in": "next((barcode(productId), metric(size)) for name, size in [lookup(productId)])", "out": "リスト内包記法 変換"}
{"in": "next((i for i, x in enumerate(a) if 99 in x), None)", "out": "リスト内包記法 フィルタ"}
{"in": "{i: (IDsums[itr], value_sums[itr]) for itr, i in enumerate(unqID)}", "out": "辞書内包記法"}
{"in": "all_lines = [[int(num) for num in line.split()] for line in fobj]", "out": "リスト内包記法 変換"}
{"in": "formatted_time = datetime.fromtimestamp(utc_secs).strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "to_call(*args, **kwargs)", "out": "引数展開"}
{"in": "urllib.parse.urlencode([('criterias[]', i) for i in criterias])", "out": "リスト内包記法 変換"}
{"in": "any(x in mystr for x in ls)", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('(..)').findall(s)", "out": "正規表現"}
{"in": "lists = [[] for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "new_list = [g(f(x)) for x in old_list]", "out": "リスト内包記法 変換"}
{"in": "my_data = [[int(val) for val in line.split()] for line in lines_list[1:]]", "out": "リスト内包記法 変換"}
{"in": "[hex(c) for c in chars]", "out": "リスト内包記法 変換"}
{"in": "df = concat([reader(f) for f in files], keys=files)", "out": "リスト内包記法 変換"}
{"in": "dirs = list(set([os.path.dirname(x) for x in z.namelist()]))", "out": "リスト内包記法 変換"}
{"in": "OrderedDict((word, True) for word in words)", "out": "リスト内包記法 変換"}
{"in": "connection = sqlite3.connect('~/foo.sqlite')", "out": "反転演算子"}
{"in": "blobKey = blobstore.create_gs_key('/gs' + gcs_filename)", "out": "正規表現"}
{"in": "super(TagForm, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "[re.match('\\\\/?([^\\\\/]+)', p).groups()[0] for p in paths]", "out": "リスト内包記法 変換 正規表現"}
{"in": "np.savetxt('file.txt', output, fmt='%10.5f', delimiter='\\t')", "out": "少数点表示制限"}
{"in": "random.choice([p for p in itertools.product(x, repeat=2)])", "out": "リスト内包記法 変換"}
{"in": "def listRightIndex(alist, value):\n    return len(alist) - alist[-1::-1].index(value) - 1", "out": "逆順の列"}
{"in": "{file: mimetypes.guess_type(file) for file in files}", "out": "辞書内包記法"}
{"in": "[([None] * 5) for i1 in range(4)]", "out": "リスト内包記法 変換"}
{"in": "return getattr(self.ham, func)(*args, **kwargs)", "out": "引数展開"}
{"in": "[[max(first[0], second[0]), min(first[1], second[1])] for first in a for\n    second in b if max(first[0], second[0]) <= min(first[1], second[1])]", "out": "リスト内包記法 フィルタ"}
{"in": "return [list_a for list_a in list_a if list_a[0] in list_b]", "out": "リスト内包記法 フィルタ"}
{"in": "print('{0:.3f} {1}'.format(t, f.__name__))", "out": "少数点表示制限"}
{"in": "repo.diff('HEAD', 'HEAD~1')", "out": "反転演算子"}
{"in": "print([type(x) for x in htmldata])\nSeries([str(x) for x in htmldata])", "out": "リスト内包記法 変換"}
{"in": "return list(islice((x for x in a if x not in bset), 100))", "out": "リスト内包記法 フィルタ"}
{"in": "print(datetime.now(EST).strftime('%m/%d/%Y %H:%M:%S %Z'))", "out": "日付書式 時刻書式"}
{"in": "return ''.join(v for v in list(locals().values()) if v is not None)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "to_find = re.compile('cat|fish|dog')", "out": "正規表現"}
{"in": "pd.DatetimeIndex([i.replace(tzinfo=None) for i in t])", "out": "リスト内包記法 変換"}
{"in": "[(x, y) for x in nums for y in nums]", "out": "リスト内包記法 変換"}
{"in": "data = {a: int(float(sum(b)) / float(len(b))) for a, b in list(data.items())}", "out": "辞書内包記法"}
{"in": "list(zip_longest(*a))", "out": "引数展開"}
{"in": "super(ExcludedDateForm, self).__init__(**kwargs)", "out": "引数展開"}
{"in": "def removearticles(text):\n    re.sub('(\\\\s+)(a|an|and|the)(\\\\s+)', '\\x01\\x03', text)", "out": "正規表現"}
{"in": "return datetime.datetime(*time.gmtime()[:6])", "out": "引数展開"}
{"in": "[x for x in list_1 if x[3] <= 0.3 and x[2] < 5]", "out": "リスト内包記法 フィルタ"}
{"in": "super().__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "x = EqM_list(bah * 2 for bah in buh)", "out": "リスト内包記法 変換"}
{"in": "print('I slept for ' + str(seconds_till_future) + ' seconds!')", "out": "リスト内包記法 変換"}
{"in": "return [list_[v:indices[k + 1]] for k, v in enumerate(indices[:-1])]", "out": "リスト内包記法 変換"}
{"in": "print([(x, text.count(x)) for x in set(text)])", "out": "リスト内包記法 変換"}
{"in": "res = {k: coords[nzvals == k] for k in range(1, num_labels + 1)}", "out": "辞書内包記法"}
{"in": "test1 = re.compile('cat|catdog')", "out": "正規表現"}
{"in": "b_any(word in x for x in lst)", "out": "リスト内包記法 変換"}
{"in": "file.write('\\ufeff')\nfile.close()", "out": "ユニコード"}
{"in": "[o for o in gc.get_objects() if isinstance(o, Foo)]", "out": "リスト内包記法 フィルタ"}
{"in": "return min((s.index(t) for t in map(str.lower, targ) if t in s), default=None)", "out": "リスト内包記法 フィルタ"}
{"in": "day_string = d.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "location_out.append(', '.join(loci))", "out": "リストの文字列化"}
{"in": "a = [1, 2, 3, 4, 5, 7, 8, 9, 10]\nsum(range(a[0], a[-1] + 1)) - sum(a)", "out": "末尾の要素"}
{"in": "[bool(x) for x in [[], {}, np.array([])]]", "out": "辞書内包記法"}
{"in": "strftime('%m_%d_%y_%H_%M_%S')", "out": "時刻書式"}
{"in": "return list(itertools.chain.from_iterable(line.split() for line in f))", "out": "リスト内包記法 変換"}
{"in": "return {key: d.get(key, default) for key in keys}", "out": "辞書内包記法"}
{"in": "gb = df.groupby('ZZ')\n[gb.get_group(x) for x in gb.groups]", "out": "リスト内包記法 変換"}
{"in": "return ''.join(s)", "out": "リストの文字列化"}
{"in": "getattr(obj, 'func')(*arr)", "out": "引数展開"}
{"in": "result = [i for s in S for i, row in enumerate(X) if (s == row).all()]", "out": "リスト内包記法 フィルタ"}
{"in": "return np.broadcast_arrays(*output)", "out": "引数展開"}
{"in": "inv_map = {v: k for k, v in my_map.items()}", "out": "辞書内包記法"}
{"in": "sum(dct[k] for k in lst if k in dct)", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in s if x in printable]", "out": "リスト内包記法 フィルタ"}
{"in": "re.match('^/by_tag/(?P<tag>\\\\w+)/(?P<filename>(\\\\w|[.,!#%{}()@])+)$',\n    '/by_tag/p\\xe5ske/\\xf8yfjell.jpg', re.UNICODE).groupdict()", "out": "正規表現"}
{"in": "[eval(i, {'__builtins__': None}) for i in ['6.2', '\"Hello, world!\"', '7']]", "out": "辞書内包記法"}
{"in": "[min(y, max(x, z)) for x, y, z in zip(a, b, c)]", "out": "リスト内包記法 変換"}
{"in": "return [list(v) for k, v in groupby(a, np.isfinite) if k]", "out": "リスト内包記法 フィルタ"}
{"in": "DATE_FORMAT = '%a, %d %b %Y %H:%M:%S UTC'", "out": "日付書式 時刻書式"}
{"in": "rows = [(1, 2), (3, 4), (5, 6)]\n[x[0] for x in rows]", "out": "リスト内包記法 変換"}
{"in": "return function(*args, **kwargs)", "out": "引数展開"}
{"in": "return self(*args, **kwargs) + other(*args, **kwargs)", "out": "引数展開"}
{"in": "print(datetime.now(GMT).strftime('%m/%d/%Y %H:%M:%S %Z'))", "out": "日付書式 時刻書式"}
{"in": "x[~np.isnan(x)]", "out": "反転演算子"}
{"in": "return calling_func(*args, **kw)", "out": "引数展開"}
{"in": "axnum.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.2f'))", "out": "少数点表示制限"}
{"in": "return function(*args, **kwargs)", "out": "引数展開"}
{"in": "pairs = [(a, b, None) for a, b in L]", "out": "リスト内包記法 変換"}
{"in": "f = {x: make_func(x) for x in range(10)}", "out": "辞書内包記法"}
{"in": "[i for i in dbm.neo_nodes.find({'_id': ObjectId(obj_id_to_find)})]", "out": "辞書内包記法"}
{"in": "np.savetxt(outfile, data_slice, fmt='%-7.2f')", "out": "少数点表示制限"}
{"in": "[x[n:n + 3] for n in range(len(x) - 2)]", "out": "リスト内包記法 変換"}
{"in": "(fn for fn in os.listdir('.') if fn.endswith('.gif') or fn.endswith('.GIF'))", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join([tup[0] for tup in yourList]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "result = []\nfor s in l:\n    result.extend(re.split('_(?:f?or|and)_', s))", "out": "正規表現"}
{"in": "Sensor.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "s = [(e + d) for e in line.split(d) if e]", "out": "リスト内包記法 フィルタ"}
{"in": "return self._lock.__exit__(*args, **kwargs)", "out": "引数展開"}
{"in": "[(4 - x, x) for x in range(5)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('[%s]+$' % ''.join(bad_chars), '', example_line)", "out": "正規表現 リストの文字列化"}
{"in": "print([i for r in ranges for i in range(int(r[0]), int(r[-1]) + 1)])", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "return any(sublst == lst[i:i + n] for i in range(len(lst) - n + 1))", "out": "リスト内包記法 変換"}
{"in": "print([x for x in list_dirs if x.split('\\\\')[-1] not in unwanted_files])", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "item.setCheckState(QtCore.Qt.Unchecked)", "out": "正規表現"}
{"in": "getattr(web, 'input')(**my_args)", "out": "引数展開"}
{"in": "output.write(' '.join(line_split) + '\\n')", "out": "リストの文字列化"}
{"in": "int(x) if x else 0", "out": "三項演算子"}
{"in": "li = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\nli2 = [y for x in li for y in x]", "out": "リスト内包記法 変換"}
{"in": "result = [x.rsplit('[', 1)[0] for x in flattened]", "out": "リスト内包記法 変換"}
{"in": "f.write('\\n'.join(result))", "out": "リストの文字列化"}
{"in": "return [d[i] for i in k]", "out": "リスト内包記法 変換"}
{"in": "return f(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"-\"\"\".join(item for item in your_list if item)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "\"\"\"{0:.2f}\"\"\".format(pi)", "out": "少数点表示制限"}
{"in": "from functools import reduce\ndef magic(numList):\n    s = map(str, numList)\ns = ''.join(s)\ns = int(s)\nreturn s\n\ndef magic(numList):\n    s = ''.join(map(str, numList))\nreturn int(s)\nnum = int(''.join(map(str, numList)))\ns = reduce(lambda x, y: x + str(y), numList, '')\nnum = int(s)\ns = list(filter(str.isdigit, repr(numList)))\nnum = int(s)", "out": "リストの文字列化"}
{"in": "return sum((y_pred - y_true) ** 2, axis=-1)", "out": "累乗演算子"}
{"in": "s = datetime.datetime.strptime('20091229050936', '%Y%m%d%H%M%S')", "out": "日付書式 時刻書式"}
{"in": "wx.PyControl.__init__(self, parent, id, **kwargs)", "out": "引数展開"}
{"in": "{y: x for x, y in t}", "out": "辞書内包記法"}
{"in": "regex = re.compile('[^atgc]')", "out": "正規表現"}
{"in": "r = dict(list(a.items()) + list(b.items()) + [(k, a[k] + b[k]) for k in set(b) & set(a)])", "out": "辞書内包記法"}
{"in": "return super().formfield_for_foreignkey(db_field, request, **kwargs)", "out": "引数展開"}
{"in": "super(EuDateFormField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print('\\n'.join(('dog', 'cat')))", "out": "リストの文字列化"}
{"in": "super(MathQuestion, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print([item for items, c in Counter(a).most_common() for item in [items] * c])", "out": "リスト内包記法 変換"}
{"in": "b = map(list, zip(*a))", "out": "引数展開"}
{"in": "super(PersonChangeListForm, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "client.load_host_keys(os.path.expanduser('~/.ssh/known_hosts'))", "out": "反転演算子"}
{"in": "re.split('\\\\||<>', input)\n['Item 1 ', ' Item 2 ', ' Item 3 ', ' Item 4 ', ' Item 5']", "out": "正規表現"}
{"in": "b, c = zip(*[(m.group(0), (m.start(), m.end() - 1)) for m in re.finditer(\n    '\\\\S+', a)])", "out": "リスト内包記法 変換 正規表現 引数展開"}
{"in": "return format(f, '.2f').rstrip('0').rstrip('.')", "out": "少数点表示制限"}
{"in": "s = 'Tue Oct 04 2016 12:13:00 GMT+0200 (CEST)'\ndatetime.strptime(s, '%a %b %d %Y %H:%M:%S GMT%z (%Z)')", "out": "日付書式 時刻書式"}
{"in": "numbers = {'a': 1, 'b': 0, 'c': 1, 'd': 3, 'e': 3}\n[k for k, v in numbers.items() if v == max(numbers.values())]", "out": "辞書内包記法"}
{"in": "super(MyMixin, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "z = {(s[x:] + s[:x]) for x in range(len(s))}", "out": "辞書内包記法"}
{"in": "re.sub('[%]\\\\s*[^%]+\\\\s*[%]', lambda k: d.get(k[1, -1].strip(), k), s)", "out": "正規表現"}
{"in": "return {chr(i): L[i] for i in range(65536) if L[i]}", "out": "辞書内包記法"}
{"in": "cdata = soup.find(text=re.compile('CDATA'))", "out": "正規表現"}
{"in": "\"\"\", \"\"\".join(map(lambda x: \"'\" + x + \"'\", parameters))", "out": "リストの文字列化"}
{"in": "print(' | '.join(parser.parseString(line)))", "out": "リストの文字列化"}
{"in": "print([('%E' % e) for e in a.flat])", "out": "リスト内包記法 変換"}
{"in": "arr = [[] for _ in range(5)]", "out": "リスト内包記法 変換"}
{"in": "re2 = re.compile('two')", "out": "正規表現"}
{"in": "command = ' '.join(sys.argv[1:])", "out": "リストの文字列化"}
{"in": "print(re.findall(r, s))", "out": "正規表現"}
{"in": "bool(re.match('he', 'Hello', re.I))\nbool(re.match('el', 'Hello', re.I))", "out": "正規表現"}
{"in": "re.search('^\\\\d+\\\\Z', s)", "out": "正規表現"}
{"in": "super(testForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "list_list = [[] for Null in range(2)]", "out": "リスト内包記法 変換"}
{"in": "os1 = imp.load_module('os1', *imp.find_module('os'))", "out": "引数展開"}
{"in": "matches = [string for string in l if re.match(regex, string)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "[math.sqrt(sum([(i * i) for i in vec])) for vec in x]", "out": "リスト内包記法 変換"}
{"in": "myproject / myapp / middleware / globalrequestmiddleware.py", "out": "正規表現"}
{"in": "datetime.now().strftime('mylogfile_%H_%M_%d_%m_%Y.log')", "out": "日付書式 時刻書式"}
{"in": "arr_ip = [tuple(i) for i in X.as_matrix()]", "out": "リスト内包記法 変換"}
{"in": "ans = {d['pw'] for d in data}.issubset({'', '*sss*'})", "out": "辞書内包記法"}
{"in": "[(b.index(x) if x in b else None) for x in a]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "output.write(','.join(row) + '\\n')", "out": "リストの文字列化"}
{"in": "re.sub(myre, '<markup>\\\\1</markup>', 'this is my string with many words!')", "out": "正規表現"}
{"in": "store.select_column('df', 'one')", "out": "正規表現"}
{"in": "b = [(b[i] if i % 3 == 0 else int(b[i])) for i in range(0, len(b))]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "c = [tuple([(i + j) for i, j in zip(e, b)]) for e in a]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(random.sample(string.ascii_lowercase, X))", "out": "リストの文字列化"}
{"in": "M(**vars(args))", "out": "引数展開"}
{"in": "['-'.join(x) for x in zip(i, i)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "newList = [elem for elem in oldlist]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(x for x in 'make IT camel CaSe'.title() if not x.isspace())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "datetime.datetime.strptime(re.sub('[+-]([0-9])+', '',\n    'Tue May 08 15:14:45 +0800 2012'), '%a %b %d %H:%M:%S %Y')", "out": "正規表現 日付書式 時刻書式"}
{"in": "s = 'hello, world'\ns = s[::-1]\nprint(s)", "out": "逆順の列"}
{"in": "all(error2() for i in range(2))", "out": "リスト内包記法 変換"}
{"in": "sum(str(abs(x)).startswith('3') for x in (a, b, c, d, e))", "out": "リスト内包記法 変換"}
{"in": "QtCore.QThread.__init__(self)", "out": "正規表現"}
{"in": "[x for x in lis if x != '']", "out": "リスト内包記法 フィルタ"}
{"in": "print([int(ch) for i in list1 for ch in str(i)])", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string -30\")", "out": "正規表現"}
{"in": "d = datetime.strptime('2007-07-18 10:03:19', '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "return (w for w in wordlist if is_neighbors(word, w))", "out": "リスト内包記法 フィルタ"}
{"in": "names[:] = (name for name in names if name[-5:] != 'Smith')", "out": "リスト内包記法 フィルタ"}
{"in": "dict = {'one': 1, 'two': 2}\nprint([y for x in list(dict.items()) for y in x])", "out": "辞書内包記法"}
{"in": "return 'H' if random.random() < p else 'T'", "out": "三項演算子"}
{"in": "[('r' if x else 'k') for x in bool_arr]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "np.index_exp[10:4, ::-1, ...]", "out": "逆順の列"}
{"in": "return path.split('.')[0], '.'.join(path.split('.')[-2:])", "out": "リストの文字列化"}
{"in": "t1 = datetime.datetime.strptime(s, '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "c = [random.random() for _ in range(500)]", "out": "リスト内包記法 変換"}
{"in": "ip = '192.168.1.1'\nprint('.'.join([bin(int(x) + 256)[3:] for x in ip.split('.')]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "f(*args, **kwds)", "out": "引数展開"}
{"in": "soup = BeautifulSoup(''.join(html))", "out": "リストの文字列化"}
{"in": "print([x.split('.')[-2] for x in sites])", "out": "リスト内包記法 変換"}
{"in": "{x.split(':')[0]: x.split(':')[1] for x in a}", "out": "辞書内包記法"}
{"in": "super(AB, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(re.sub('([\\\\.])([^\\\\s])', '\\\\1 \\\\2', para))", "out": "正規表現"}
{"in": "super(ImageEx, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "strs = ' '.join('{' + '{0}{1}'.format(i, ':^2}') for i in range(7))", "out": "辞書内包記法 リストの文字列化"}
{"in": "return ''.join(self.fed)", "out": "リストの文字列化"}
{"in": "tk.Frame.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "list(itertools.zip_longest(fillvalue='', *l))", "out": "引数展開"}
{"in": "{k: v for k, v in zip(list(range(1, 5)), list(range(7, 11)))}\n{x: (x + 6) for x in range(1, 5)}", "out": "辞書内包記法"}
{"in": "return {k: (v[0] if len(v) == 1 else v) for k, v in qdict.lists()}", "out": "辞書内包記法 三項演算子"}
{"in": "regex = '|'.join('\\\\b%s\\\\b' % state for state in states)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "m = [i for i in l if i[0] == 'a']", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[^>]+>', s)", "out": "正規表現"}
{"in": "worker.run(**options)", "out": "引数展開"}
{"in": "return '_'.join([tok.orth_, tok.tag_])", "out": "リストの文字列化"}
{"in": "re.findall('(?=(\\\\d+(?:\\\\.\\\\d+)?))\\\\d+(?:\\\\.\\\\d+(?!\\\\.?\\\\d))?', i)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(['a', 'b', 'b'])", "out": "リストの文字列化"}
{"in": "fruit = [df.columns[row.astype(bool)].tolist() for row in df.values]\npprint.pprint(fruit)", "out": "リスト内包記法 変換"}
{"in": "super(Asset, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "print(ascii_num[::-1])", "out": "逆順の列"}
{"in": "print([(r / s) for s in [psum(raw)] for r in raw])", "out": "リスト内包記法 変換"}
{"in": "{x: (0) for x in alphabet}", "out": "辞書内包記法"}
{"in": "print([(2 ** ((N - abs(N - k)) % N)) for k in range(2 * N + 1)])", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "unicodedata.name('\\ua62c')", "out": "ユニコード"}
{"in": "print(PATTERN.split(data)[1::2])", "out": "ひとつおきの列"}
{"in": "return X[::-1, ::-1, ::-1]", "out": "逆順の列"}
{"in": "x = a if b else 0", "out": "三項演算子"}
{"in": "s = ['1', '2', '3.4', '5.6', '7.8']\n[(float(i) if '.' in i else int(i)) for i in s]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "df\n{k: list(v) for k, v in df.groupby('Address')['ID']}", "out": "辞書内包記法"}
{"in": "df['time'] = [time.strftime(format='%Y-%m-%d %H:%M:%S%z') for time in times]", "out": "リスト内包記法 変換 日付書式 時刻書式"}
{"in": "numpy.apply_along_axis(lambda args: [complex(*args)], 3, Data)", "out": "引数展開"}
{"in": "QApplication.__init__(self, *args)", "out": "引数展開"}
{"in": "result = re.search('asdf=5;(.*)123jasd', s)", "out": "正規表現"}
{"in": "Cal2 = sum(n for n in domain if n % 2 == 0)", "out": "リスト内包記法 フィルタ"}
{"in": "harmonic_number = lambda n: sum(Fraction(1, d) for d in range(1, n + 1))", "out": "リスト内包記法 変換"}
{"in": "[1, 2][::-1]", "out": "逆順の列"}
{"in": "return zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "list_words = [fs.format(a) for x in l for a in x.split()]", "out": "リスト内包記法 変換"}
{"in": "l = [1, 3, 7, 2, 6, 8, 10]\nsum(1 for i in l if i % 4 == 3)", "out": "リスト内包記法 フィルタ"}
{"in": "list_of_pairs = [(p1, p2) for p1 in people for p2 in people if p1 != p2]", "out": "リスト内包記法 フィルタ"}
{"in": "a, b = 'DEFAULT_LENGTH'.partition('=')[::2]", "out": "ひとつおきの列"}
{"in": "li = [id_s[c] for c in list]", "out": "リスト内包記法 変換"}
{"in": "worker_function(**args)", "out": "引数展開"}
{"in": "c = re.compile('(?P<%s>%s)' % (fname, f.__doc__), re.VERBOSE | self.reflags)", "out": "正規表現"}
{"in": "[(sum(values) / float(len(my_list))) for values in zip(*[my_dict[key] for\n    key in my_list])]", "out": "辞書内包記法 引数展開"}
{"in": "super(BookForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "a = [a.ix[i] for i in a.index if sorted1[i] < sorted2[i]]\nb = [a.ix[i] for i in a.index if sorted1[i] >= sorted2[i]]", "out": "リスト内包記法 フィルタ"}
{"in": "return [str(v) for v in obj.attrs.all()]", "out": "リスト内包記法 変換"}
{"in": "all_pairs += [((nB, 1), (nC, 2)) for nB, nC in itertools.product(listB, listC)]", "out": "リスト内包記法 変換"}
{"in": "return (data[index] for index in indices[field][key])", "out": "リスト内包記法 変換"}
{"in": "print(''.join(res))", "out": "リストの文字列化"}
{"in": "data = np.array(data)\nout = [np.sum(data[c]) for c in contribs]", "out": "リスト内包記法 変換"}
{"in": "print(os.path.expanduser('~'))", "out": "反転演算子"}
{"in": "s = '\\u5e73\\u621015'\nwith open('yop', 'wb') as f:\n    f.write(s.encode('UTF-8'))", "out": "ユニコード"}
{"in": "ordered = list(list_dict[val] for val in ordering_list)", "out": "辞書内包記法"}
{"in": "t = [(('d', 0), ('g', 0)), (('d', 0), ('d', 1)), (('i', 0), ('g', 0))]\nprint([tuple((a, b + 1) for a, b in group) for group in t])", "out": "リスト内包記法 変換"}
{"in": "a[([0, 1, 3]), ::2]", "out": "ひとつおきの列"}
{"in": "pd.set_option('display.float_format', lambda x: '%.3f' % x)", "out": "少数点表示制限"}
{"in": "print(''.join(result))", "out": "リストの文字列化"}
{"in": "RX = re.compile('([\\\\`*_{}[]()>#+-.!$])')", "out": "正規表現"}
{"in": "matrix[~mask] = 0", "out": "反転演算子"}
{"in": "[match.group(2) for match in re.finditer('(\\\\D|^)(\\\\d{5})(\\\\D|$)', '12345abc')]", "out": "辞書内包記法 正規表現"}
{"in": "[(id(x) == id(y)) for x, y in zip(lis, new_lis1)]", "out": "リスト内包記法 変換"}
{"in": "tuple(map(''.join, zip(*([iter(s)] * 2))))", "out": "引数展開"}
{"in": "pil_im = Image.open('data/empire.jpg', 'r')", "out": "正規表現"}
{"in": "writer.writerows(row[:1] + [0.0] + row[1:] for row in reader)", "out": "リスト内包記法 変換"}
{"in": "[name for _, name, _ in pkgutil.iter_modules(['testpkg'])]", "out": "リスト内包記法 変換"}
{"in": "aList.sort(key=lambda x: (x[idx] for idx in args))", "out": "リスト内包記法 変換"}
{"in": "c_dict = {k: pd.DataFrame(v) for k, v in groups.groups.items()}", "out": "辞書内包記法"}
{"in": "np.array(zip(*[islice(A, i, None) for i in range(n)]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "d[re.compile('a.*')]", "out": "正規表現"}
{"in": "[s[5 * i:5 * i + 5] for i in range(0, math.ceil(len(s) / 5))]", "out": "リスト内包記法 変換"}
{"in": "x = [n.strip() for n in x]", "out": "リスト内包記法 変換"}
{"in": "print('Waiting for server to start...')", "out": "リスト内包記法 変換"}
{"in": "df.loc[-1] = [2, 3, 4]", "out": "末尾の要素"}
{"in": "nlargest(n, your2DList, key=lambda x: x[-1])", "out": "末尾の要素"}
{"in": "words = set(re.findall('[a-z]+', text.lower()))", "out": "正規表現"}
{"in": "myre.sub('', 'Some example text with a sleepy face: \\U0001f62a')", "out": "正規表現 ユニコード"}
{"in": "a[-1].shape", "out": "末尾の要素"}
{"in": "return np.sum((coord[0] - x) ** 2 + (coord[1] - y) ** 2 - r ** 2)", "out": "累乗演算子"}
{"in": "normedA = array(norm(v) for v in A)", "out": "リスト内包記法 変換"}
{"in": "font = {'family': 'normal', 'weight': 'bold', 'size': 22}\nmatplotlib.rc('font', **font)", "out": "引数展開"}
{"in": "names = [prop for prop in dir(self.__class__) if prop[1] != '_']", "out": "リスト内包記法 フィルタ"}
{"in": "def big(func, args):\n    func(*args)", "out": "引数展開"}
{"in": "return [list(islice(i, n)) for n in chain(indices, [None])]", "out": "リスト内包記法 変換"}
{"in": "return arg[::-1]", "out": "逆順の列"}
{"in": "def contains_digits(s):\n    return any(char.isdigit() for char in s)", "out": "リスト内包記法 変換"}
{"in": "return len([letter for letter in word if letter not in BAD_LETTERS])", "out": "リスト内包記法 フィルタ"}
{"in": "return datetime.timedelta(**{unit: float(value)})", "out": "引数展開"}
{"in": "lenient_int = lambda string: int(string) if string.strip() else None", "out": "三項演算子"}
{"in": "s = ', '.join(l + ['']).rstrip(' ')", "out": "リストの文字列化"}
{"in": "print('\\n'.join(it))", "out": "リストの文字列化"}
{"in": "writer(fw, delimiter=',').writerows(zip(*reader(f, delimiter=',')))", "out": "引数展開"}
{"in": "result = [myFunc(p, additionalArgument) for p in pages]", "out": "リスト内包記法 変換"}
{"in": "end_date[-1] = end_date[-1][:4]", "out": "末尾の要素"}
{"in": "return any(big[i:i + l_sml] == small for i in range(l_big - l_sml + 1))", "out": "リスト内包記法 変換"}
{"in": "ainb = np.array([(x in b) for x in a[:, (2)]])\na[ainb]", "out": "リスト内包記法 変換"}
{"in": "ords = (ord(c) for c in s)", "out": "リスト内包記法 変換"}
{"in": "lines = (line.rstrip() for line in f)", "out": "リスト内包記法 変換"}
{"in": "Parent.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"Get a translation for a real name\"\"\"", "out": "リスト内包記法 変換"}
{"in": "alist2 = [item[:] for item in alist]", "out": "リスト内包記法 変換"}
{"in": "pattern2 = re.compile('([0-9a-f]{2}\\\\s){48}')", "out": "正規表現"}
{"in": "return [hash(tpl[0]) for tpl in stackframe[1:]]", "out": "リスト内包記法 変換"}
{"in": "super(Link, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "return itertools.zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "{k: v for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "joint = [[(x + y) for x, y in zip(*row)] for row in zip(outgoing, incoming)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "frozenset().union(*l)", "out": "引数展開"}
{"in": "L = [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100]\n\"\"\"\"\"\".join(chr(i) for i in L)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(locale.format('%.2f', 32757121.33, True))", "out": "少数点表示制限"}
{"in": "[(sentence + '.') for sentence in txt.split('.') if 'apple' in sentence]", "out": "リスト内包記法 フィルタ"}
{"in": "regex = re.compile(ptn % re.escape(punc))", "out": "正規表現"}
{"in": "lis = ['A:1', 'B:2', 'C:3', 'D:4']\ndict(x.split(':') for x in lis)", "out": "辞書内包記法"}
{"in": "return ''.join(d)", "out": "リストの文字列化"}
{"in": "re.findall('\\\\d+|$', 'aa33bbb44')[0]", "out": "正規表現"}
{"in": "return gamma + log(n) + 0.5 / n - 1.0 / (12 * n ** 2) + 1.0 / (120 * n ** 4)", "out": "累乗演算子"}
{"in": "super(SomeForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"this is some text that will have one form or the other url embeded, most will have valid URLs while there are cases where they can be bad. for eg, http://www.google.com and http://www.google.co.uk and www.domain.co.uk and etc.\"\"\"", "out": "リスト内包記法 変換"}
{"in": "re.sub('(?!-)\\\\W', ' ', 'black-white')", "out": "正規表現"}
{"in": "return '\\n'.join(lines)", "out": "リストの文字列化"}
{"in": "return func(*args, **kw)", "out": "引数展開"}
{"in": "'Your Meal Price is %.2f' % mealPrice", "out": "少数点表示制限"}
{"in": "[list(g) for _, g in groupby(sorted(flat, key=len), key=len)]", "out": "リスト内包記法 変換"}
{"in": "a, b, c = [list(g) for k, g in it.groupby(mylist, keyfunc)]", "out": "リスト内包記法 変換"}
{"in": "return axes.hist(x, bins=binedges, weights=weights, *args, **kwargs)", "out": "引数展開"}
{"in": "[remove_bad_substrings(s) for s in sites]", "out": "リスト内包記法 変換"}
{"in": "with open('words.txt', 'r') as f:\n    for line in f:\n        for word in line.split():\n            pass", "out": "リスト内包記法 変換"}
{"in": "re_pattern = re.compile('[^\\x00-\\ud7ff\\ue000-\\uffff]', re.UNICODE)\nfiltered_string = re_pattern.sub('\\ufffd', unicode_string)", "out": "正規表現 ユニコード"}
{"in": "return {n: g.drop('_merge', 1) for n, g in df3.groupby('_merge')}", "out": "辞書内包記法"}
{"in": "return [convert_value(item) for item in lst]", "out": "リスト内包記法 変換"}
{"in": "all_columns = '+'.join(DF.columns - ['y'])", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join('%2.2x' % ord(c) for c in s)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "functools.reduce(op.mul, (sum(x) for x in zip(*list_)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "[list(g) for k, g in groupby(l, bool) if k]", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(c.next()(x) if x else '_' for x in value.split('_'))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "print(', '.join(row[1]))", "out": "リストの文字列化"}
{"in": "f.write('used\\u200bZero')", "out": "ユニコード"}
{"in": "dt_unaware = dt_aware.replace(tzinfo=None)", "out": "正規表現"}
{"in": "s = ', '.join(l) + ','", "out": "リストの文字列化"}
{"in": "[x for xs in a for x in xs]", "out": "リスト内包記法 変換"}
{"in": "results = [do_smth(file.read()) for file in files]", "out": "リスト内包記法 変換"}
{"in": "bools = [True, True, False, True, True, False, True]\nprint(''.join(chr(ord('A') + i) if b else ' ' for i, b in enumerate(bools)))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "out = [float(f_interp(*p)) for p in zip(X, Y)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "def sort_string(string):\n    return ''.join(sorted(string))", "out": "リストの文字列化"}
{"in": "[(x if x is not None else '') for x in l]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[given[i:i + len(sublist)] for i in range(0, len(given) - len(sublist))]", "out": "リスト内包記法 変換"}
{"in": "df1 = DataFrame({'test_set': value for value in test_set})", "out": "辞書内包記法"}
{"in": "return [seq[i:i + k] for i in range(0, len(seq), k)]", "out": "リスト内包記法 変換"}
{"in": "return list(set(x[0]).union(*x[1:]))", "out": "引数展開"}
{"in": "print([str(x) for x in l])", "out": "リスト内包記法 変換"}
{"in": "set.intersection(*lis)", "out": "引数展開"}
{"in": "[[0, 1][name.split()[-1] in set(B)] for name in A]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "print(('Old: ', teststr, ' New: ', ''.join(newchars)))", "out": "リストの文字列化"}
{"in": "self.parser.result.append(' '.join(self.result))", "out": "リストの文字列化"}
{"in": "return ' '.join(s.split())", "out": "リストの文字列化"}
{"in": "regex = re.compile(pattern, re.MULTILINE | re.DOTALL)", "out": "正規表現"}
{"in": "download = text.find_all('a', href=re.compile('\\\\.mp3$'))", "out": "正規表現"}
{"in": "self.setCursor(QtCore.Qt.SplitHCursor)", "out": "正規表現"}
{"in": "df1.columns = [(x + '_' + str(y)) for x, y in df1.columns]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(traceback.format_stack())", "out": "リストの文字列化"}
{"in": "keys[-1] in lastplace", "out": "末尾の要素"}
{"in": "s = re.sub('23$', 'penguins', s)", "out": "正規表現"}
{"in": "df = xl.parse(0, converters={i: str for i in range(ncols)})", "out": "辞書内包記法"}
{"in": "dict_lol = {item[1]: item for item in lol}", "out": "辞書内包記法"}
{"in": "re.findall(regex, statements, re.I)", "out": "正規表現"}
{"in": "s = re.sub('^12', 'penguins', s)", "out": "正規表現"}
{"in": "super(AddRemoteField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "np.all([i for i in range(10)])", "out": "リスト内包記法 変換"}
{"in": "raise ValueError('value %s too large for buffer', repr(value))", "out": "リスト内包記法 変換"}
{"in": "lines.append('\\t'.join(map(str, row)))", "out": "リストの文字列化"}
{"in": "[list(islice(it, i)) for i in b]", "out": "リスト内包記法 変換"}
{"in": "urlpatterns = [url('^', 'core.views.home', name='home')]", "out": "正規表現"}
{"in": "self.treestore.append(piter, ['inconsistent'])", "out": "正規表現"}
{"in": "z = [int(i == j) for i, j in zip(x, y)]", "out": "リスト内包記法 変換"}
{"in": "re.match('(A+)(A)(A+)', 'AAAAAAAAA')", "out": "正規表現"}
{"in": "print([joiner(words) for words in sixgrams])", "out": "リスト内包記法 変換"}
{"in": "zipped = zip(*l)", "out": "引数展開"}
{"in": "for column in zip(*matrix):\n    do_something(column)", "out": "引数展開"}
{"in": "os2 = imp.load_module('os2', *imp.find_module('os'))", "out": "引数展開"}
{"in": "dataArray = np.array(list(chain(*data)), shape=(100, 3))", "out": "引数展開"}
{"in": "len(re.findall('(?=11)', text))", "out": "正規表現"}
{"in": "[getrange(x) for x in newlist]", "out": "リスト内包記法 変換"}
{"in": "return ''.join(s)", "out": "リストの文字列化"}
{"in": "return list(set(x[-1]).union(*x[1:]))", "out": "引数展開 末尾の要素"}
{"in": "[''.join(v) for k, v in groupby(st, key=lambda e: next(it_lst))]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "max(loc for loc, val in enumerate(li) if val == 'a')", "out": "リスト内包記法 フィルタ"}
{"in": "return func(obj, *args, **kw)", "out": "引数展開"}
{"in": "print([(int(num) if float(num).is_integer() else num) for num in li])", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "print(', '.join(map(sep, tags)))", "out": "リストの文字列化"}
{"in": "all(i >= 30 for i in my_list2)", "out": "リスト内包記法 変換"}
{"in": "s = 'abc \\u0430\\u0431\\u0432'\ns.encode('utf8')", "out": "ユニコード"}
{"in": "df.index.to_series().apply(lambda x: x.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "x if f else random.choice(good)", "out": "三項演算子"}
{"in": "'%.2f' % (a if a != 0 else abs(a))", "out": "三項演算子 少数点表示制限"}
{"in": "return super(MyUserAdmin, self).get_form(request, obj, **kwargs)", "out": "引数展開"}
{"in": "super(A, self).__init__(*a, **k)", "out": "引数展開"}
{"in": "[func(mylist) for func in map(globals().get, fxnOfInterest)]", "out": "リスト内包記法 変換"}
{"in": "[tag.text for tag in soup.find_all('a')]", "out": "リスト内包記法 変換"}
{"in": "stack[-1].append(eval(input('some input from the user')))", "out": "末尾の要素"}
{"in": "print([c for c in cumsum((('a',), ('b',), ('c',)))])", "out": "リスト内包記法 変換"}
{"in": "print(',\\t'.join(a))", "out": "リストの文字列化"}
{"in": "a = [([k] + [x[1] for x in g]) for k, g in groupby(r, key=lambda row: row[0])]", "out": "リスト内包記法 変換"}
{"in": "print('{{{}}}'.format(', '.join(str(e) for e in set([1, '2', 3.0]))))", "out": "辞書内包記法 リストの文字列化"}
{"in": "fruit_list = ['apple', 'banana', 'peach', 'plum', 'pineapple', 'kiwi']\nfruit = re.compile('|'.join(fruit_list))", "out": "正規表現 リストの文字列化"}
{"in": "a = 'ZENOVW'\n\"\"\"\"\"\".join(sorted(a))", "out": "リストの文字列化"}
{"in": "myList = [item for item in data if item == 'number1']", "out": "リスト内包記法 フィルタ"}
{"in": "[distance(*pair) for pair in zip(repeat(pts[0]), pts[1:])]", "out": "リスト内包記法 変換 引数展開"}
{"in": "item = next((i for i in items if i == 'value'), None)", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(''.join(row) for row in board))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.search(p, test_str)", "out": "正規表現"}
{"in": "data_table.append(['' for _ in range(len(data_table[0]))])", "out": "リスト内包記法 変換"}
{"in": "return QtCore.QSize(150, 75)", "out": "正規表現"}
{"in": "[item.replace(' ', '') for item in shlex.split(text)]", "out": "リスト内包記法 変換"}
{"in": "headings = [th.get_text() for th in table.find('tr').find_all('th')]", "out": "リスト内包記法 変換"}
{"in": "def magic(numbers):\n    return int(''.join([('%d' % x) for x in numbers]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return f(*args, **kwds)", "out": "引数展開"}
{"in": "older_books = [b.title for b in BSI if b.year < 2000]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('([^=]+)=([^=]+)(?:,|$)',\n    'foo=bar,breakfast=spam,eggs,blt=bacon,lettuce,tomato,spam=spam')", "out": "正規表現"}
{"in": "stack.append(stack[-1][-1])", "out": "末尾の要素"}
{"in": "'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'", "out": "反転演算子"}
{"in": "print(sum([float(x) for x in re.findall(p, test_str)]))", "out": "リスト内包記法 変換 正規表現"}
{"in": "[item.group() for item in IT.islice(re.finditer('\\\\d', text), 3)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "super().__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "dict((k, v) for k, v in list(mydict.items()) if k >= 6)", "out": "辞書内包記法"}
{"in": "tk.Canvas.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "result.append(','.join(map(str, lst[scan:])))", "out": "リストの文字列化"}
{"in": "int(''.join(takewhile(str.isdigit, s)))", "out": "リストの文字列化"}
{"in": "alist, blist, clist, dlist, elist = ([] for i in range(5))", "out": "リスト内包記法 変換"}
{"in": "list(map(lambda l: mean(i for i in l if i != None), zip_longest(*A)))", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "len(regex.findall('\\\\X', 'A\\u0332\\u0305BC'))", "out": "ユニコード"}
{"in": "'[\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303a\\u303b\\u3400-\\u4db5\\u4e00-\\u9fc3\\u8c48-\\u9db4\\u4fae-\\u983b\\u4e26-\\u9f8e]'", "out": "ユニコード"}
{"in": "from functools import reduce\nreduce(lambda x, y: x if len(x) < len(y) else y, mywords)", "out": "三項演算子"}
{"in": "\"\"\"\"\"\".join(x[0] for x in names.split())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re = [y for x, y, z in zip(tmp[2:], tmp[1:-1], tmp[:-2]) if y != x and y != z]", "out": "リスト内包記法 フィルタ"}
{"in": "[''.join(c) for c in combos]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\"\"\"\".join([chr(int(''.join(c), 16)) for c in zip(txt[0::2], txt[1::2])])", "out": "リスト内包記法 変換 リストの文字列化 ひとつおきの列"}
{"in": "[x for xs in a for x in xs]", "out": "リスト内包記法 変換"}
{"in": "any(c in yourString for c in badChars)", "out": "リスト内包記法 変換"}
{"in": "re.findall('{(\\\\w+)}', strs)", "out": "正規表現"}
{"in": "args = dict(arg.split('=', 1) for arg in shlex.split(cmdln_args))", "out": "辞書内包記法"}
{"in": "max = int(input('Type in max value for the loop > '))", "out": "リスト内包記法 変換"}
{"in": "A[:, (~np.triu((A[:, :, (None)] - A[:, (None), :] >= 0).all(0), 1).any(0))]", "out": "反転演算子"}
{"in": "method(*args, **kwargs)", "out": "引数展開"}
{"in": "return super().render_change_form(request, context, *args, **kwargs)", "out": "引数展開"}
{"in": "[(i + j) for i, j in zip(arr[:-2], arr[2:])]", "out": "リスト内包記法 変換"}
{"in": "edge_list = [tuple(map(int, line.split())) for line in data]", "out": "リスト内包記法 変換"}
{"in": "[str(i) for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]", "out": "リスト内包記法 変換"}
{"in": "print(list(itertools.chain(*list(parser_config.keys()))))", "out": "引数展開"}
{"in": "words = re.findall('\\\\w+', open('hamlet.txt').read().lower())", "out": "正規表現"}
{"in": "lemmatizer.lemmatize('\\u0645\\u06cc\\u200c\\u0631\\u0648\\u0645')", "out": "ユニコード"}
{"in": "return ''.join(l)", "out": "リストの文字列化"}
{"in": "fields = (field.strip() for field in line.split(','))", "out": "リスト内包記法 変換"}
{"in": "super(Field, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print([c for c in cumsum([['a'], ['b'], ['c']])])", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\{}|\\\\{}'.format(first, frequent), s)", "out": "正規表現"}
{"in": "stack[-1].append(x)", "out": "末尾の要素"}
{"in": "\"\"\" print the suffix array for debugging purposes. \"\"\"", "out": "リスト内包記法 変換"}
{"in": "newlist = [[y[0] for y in list if y[1] == x] for x in values]", "out": "リスト内包記法 フィルタ"}
{"in": "urllib.request.Request.__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "entry_list = [x.title.text for x in feed.entry]", "out": "リスト内包記法 変換"}
{"in": "result_dict = dict((n, res_list[i]) for i, n in enumerate(header))", "out": "辞書内包記法"}
{"in": "def cap(s, l):\n    return s if len(s) <= l else s[0:l - 3] + '...'", "out": "三項演算子"}
{"in": "return None if self.x == 0 else self.y / self.x", "out": "三項演算子"}
{"in": "file_writer.writerow([x[i] for x in lol])", "out": "リスト内包記法 変換"}
{"in": "print([('%d %d %s' % x) for x in group(mystuff, 3)].join('\\n'))", "out": "リスト内包記法 変換"}
{"in": "return '{} and {}'.format(', '.join(lst[:-1]), lst[-1])", "out": "リストの文字列化 末尾の要素"}
{"in": "self.figure.set_canvas(self.figurecanvas)", "out": "正規表現"}
{"in": "self.ui.main_plot.figure.subplots_adjust(bottom=0.4)", "out": "正規表現"}
{"in": "print(sum(ord(char) - base for char in mystring))", "out": "リスト内包記法 変換"}
{"in": "def sum_even(a, b):\n    return sum(i for i in range(a, b + 1) if i % 2 == 0)", "out": "リスト内包記法 フィルタ"}
{"in": "rdate1 = datetime.datetime.strptime(rdate, '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "\"\"\" \"\"\".join(str(part) for part in parts if part is not None)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "'C:\\\\Users\\\\user\\\\Desktop\\\\File_%s.pdf',", "out": "ユニコード"}
{"in": "ndprint(x, 'Element[{1:d}]={0:.2f}')", "out": "少数点表示制限"}
{"in": "values = ','.join([str(i) for i in value_list])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "any(e in s for e in b)", "out": "リスト内包記法 変換"}
{"in": "return func(self, *args, **kwargs)", "out": "引数展開"}
{"in": "import re\nre.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)", "out": "正規表現"}
{"in": "l_without_empty = [x for x in l if x]", "out": "リスト内包記法 フィルタ"}
{"in": "s = ' \\t foo \\n bar '\n\"\"\"\"\"\".join(s.split())", "out": "リストの文字列化"}
{"in": "l = [i for sub in l for i in sub]", "out": "リスト内包記法 変換"}
{"in": "print(int(number) - int(number[::-1]))", "out": "逆順の列"}
{"in": "l = [1, 2, 3, 4]\n[(i ** 2) for i in l]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "text, xoff = line_data[k][-1]", "out": "末尾の要素"}
{"in": "data_tuple = Item(**dict(zip(fields, raw_data)))", "out": "引数展開"}
{"in": "[e for e in lst if 1 < e < 3][:10]", "out": "リスト内包記法 フィルタ"}
{"in": "s = re.sub('\\\\w', '#', s)", "out": "正規表現"}
{"in": "regex = re.compile('^page/(?P<slug>[-\\\\w]+)/(?P<page_id>[0-9]+)/$')", "out": "正規表現"}
{"in": "return self.post(request, *args, **kwargs)", "out": "引数展開"}
{"in": "b_set = set(tuple(x) for x in a)", "out": "リスト内包記法 変換"}
{"in": "return s == s[::-1]", "out": "逆順の列"}
{"in": "a = [('650', '724', '6354', '', '', ''), ('', '', '', '650', '723', '4539')]\n[tuple(y for y in x if y) for x in a]", "out": "リスト内包記法 フィルタ"}
{"in": "return function(str, *args, **kwargs)", "out": "引数展開"}
{"in": "a = 632382 ** 518061", "out": "累乗演算子"}
{"in": "primes = {p for p in primes if '0' not in str(p)}", "out": "辞書内包記法"}
{"in": "numpairs = [nums[i:i + 2] for i in range(0, len(nums), 2)]", "out": "リスト内包記法 変換"}
{"in": "[(i.start(), i.end()) for i in re.finditer('o', test)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "[(a + b) for a, b in zip(l, l[1:])[::2]]", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "valid_date = time.strptime(date, '%m/%d/%Y')", "out": "日付書式"}
{"in": "result = [{'type': type}.update(defaults) for type in strings]", "out": "辞書内包記法"}
{"in": "x = '(1,2,3)'\nt = tuple(int(v) for v in re.findall('[0-9]+', x))", "out": "リスト内包記法 変換 正規表現"}
{"in": "isinstance(re.compile('goodbye'), retype)", "out": "正規表現"}
{"in": "return [row[colidx] for row in self._getrow(rowidx)]", "out": "リスト内包記法 変換"}
{"in": "my_randoms = [random.randrange(1, 101, 1) for _ in range(10)]", "out": "リスト内包記法 変換"}
{"in": "return ','.join(map(str, lst)), []", "out": "リストの文字列化"}
{"in": "{data[k].append(v) for line_dict in dr for k, v in list(line_dict.items())}", "out": "辞書内包記法"}
{"in": "a = [i for i in range(2, 10)]", "out": "リスト内包記法 変換"}
{"in": "matches = {x for x in a if x in str}", "out": "辞書内包記法"}
{"in": "data = [tryconvert(x, int, float) for x in line.split()]", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nreturn df.loc[reduce(and_, (df[column] == value for column in columns))]", "out": "リスト内包記法 変換"}
{"in": "mask = x ** 2 + y ** 2 + z ** 2 < radius ** 2", "out": "累乗演算子"}
{"in": "ax2.plot(list(range(6))[::-1], color='green')", "out": "逆順の列"}
{"in": "result = next((i for i in (f(somedata) for f in funcs) if i is not None))", "out": "リスト内包記法 フィルタ"}
{"in": "k = sum(x for x in chain.from_iterable(my_list) if x)", "out": "リスト内包記法 フィルタ"}
{"in": "return [(k, v) for k, v in list(item_list.items()) if v['slot'] == slot]", "out": "リスト内包記法 フィルタ"}
{"in": "super(ReportResults, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "QtGui.QFileDialog.__init__(self, *args)", "out": "引数展開"}
{"in": "return self.func(self.parent_obj, *args, **kwargs)", "out": "引数展開"}
{"in": "line_strings.append('\\t'.join(line.astype(str)).replace('\\n', ''))", "out": "リストの文字列化"}
{"in": "def a(*args, **kwargs):\n    print(len(args) + len(kwargs))", "out": "引数展開"}
{"in": "return ' '.join(unique_everseen(string.split(), key=key))", "out": "リストの文字列化"}
{"in": "re.sub('[^0-9a-zA-Z]', '', 'this is a test!!')", "out": "正規表現"}
{"in": "return super(RestFacebookLogin, self).dispatch(*args, **kwargs)", "out": "引数展開"}
{"in": "propnames = [name for name, value in inspect.getmembers(SomeClass, isprop)]", "out": "リスト内包記法 変換"}
{"in": "line = re.sub('\\\\(+as [a-zA-Z]*\\\\)', '', line)", "out": "正規表現"}
{"in": "super(Vote, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "df['C'] = df['C'].str.split('\\n').str[-1]", "out": "末尾の要素"}
{"in": "return zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "with open('large_text_file') as fd:\n    input = [x.strip('|').split('|') for x in fd.readlines()]\nto_search = {x[0]: x for x in input}", "out": "辞書内包記法"}
{"in": "result = ''.join(no_digits)", "out": "リストの文字列化"}
{"in": "[chr(x) for x in [66, 53, 0, 94]]", "out": "リスト内包記法 変換"}
{"in": "s = ' '.join(lst)", "out": "リストの文字列化"}
{"in": "return ' '.join([str(x) for x in args])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "self.ax.figure.canvas.mpl_connect('button_release_event', self.on_release)", "out": "正規表現"}
{"in": "matches.extend([os.path.join(root, fn) for fn in filenames])", "out": "リスト内包記法 変換"}
{"in": "search_for = re.compile('|'.join(words))", "out": "正規表現 リストの文字列化"}
{"in": "return s if len(s) <= l else s[0:l - 3] + '...'", "out": "三項演算子"}
{"in": "print('\\n'.join(label + '\\n' + '---'.join(vals) for label, vals in zipped))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "next((i for i, ch in enumerate(s) if ch in a), None)", "out": "リスト内包記法 フィルタ"}
{"in": "print('Sleep for 1 second...')", "out": "リスト内包記法 変換"}
{"in": "re.sub('(?<=<)(\\\\w+)(?=>)', lambda m: d.get(m.group(), m.group()), s)", "out": "正規表現"}
{"in": "re.sub('<(\\\\w+)>', lambda m: d.get(m.group(), m.group()), s)", "out": "正規表現"}
{"in": "words.append(''.join(word))", "out": "リストの文字列化"}
{"in": "dct = {k: sum(1 for _ in g) for k, g in groupby(words)}", "out": "辞書内包記法"}
{"in": "print('\\n'.join(blurb))", "out": "リストの文字列化"}
{"in": "return subj.translate(None, ''.join(chars))", "out": "リストの文字列化"}
{"in": "unicodedata.numeric('\\u2155')", "out": "ユニコード"}
{"in": "ax.plot(x, 0.5 * (3 * x ** 2 - 1), color='green', ls='--', label='$P_2(x)$')", "out": "累乗演算子"}
{"in": "print(map(str, rr[::2]))", "out": "ひとつおきの列"}
{"in": "plt.savefig('mixture.pdf')", "out": "正規表現"}
{"in": "val, weight = zip(*[(k, v) for k, v in list(counted_data.items())])\nplt.hist(val, weights=weight)", "out": "リスト内包記法 変換 引数展開"}
{"in": "result = {k: d1[k] for k in keys}", "out": "辞書内包記法"}
{"in": "OrderedDict.__init__(self, *args, **kwds)", "out": "引数展開"}
{"in": "next(i for i, v in enumerate(list) if v.lower() == 'mg')", "out": "リスト内包記法 フィルタ"}
{"in": "return [''.join(it.chain.from_iterable(x)) for x in zipped]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('([A-Z])\\\\1', replacement, 'start TT end')", "out": "正規表現"}
{"in": "d.append(', '.join(g))", "out": "リストの文字列化"}
{"in": "a = 'test'\nprint(' '.join(format(ord(x), 'b') for x in a))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print([x for x in range(1, 1000) if pred(x)])", "out": "リスト内包記法 フィルタ"}
{"in": "Animal = Enum('Animal', [(a, a) for a in ('horse', 'dog')], type=str)", "out": "リスト内包記法 変換"}
{"in": "return text.translate({ord(i): None for i in 'aeiouAEIOU'})", "out": "辞書内包記法"}
{"in": "super(FooAdminForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "model_to_dict(instance, fields=[field.name for field in instance._meta.fields])", "out": "辞書内包記法"}
{"in": "print([f for f in glob.glob('/tmp/*') if os.path.isfile(f)])\nprint(sum(os.path.isfile(f) for f in glob.glob('/tmp/*')))", "out": "リスト内包記法 フィルタ"}
{"in": "np.array([x for x in aset & bset])", "out": "リスト内包記法 変換"}
{"in": "[[-2], [9, 5], [3, -6, 3], [-1, 2, 5, 2], [8, 7, 1], [-4, 3], [8], [2], [3,\n    1], [5, 5, 3], [-2, -6, 7, 8], [9, 2, -4], [3, 8], [-1]]", "out": "末尾の要素"}
{"in": "match = re.search('\\\\(([^()]*)\\\\)(\\\\d|s)', s)", "out": "正規表現"}
{"in": "w, h = 8, 5\nMatrix = [[(0) for x in range(w)] for y in range(h)]", "out": "リスト内包記法 変換"}
{"in": "yield list(list(row) for row in itertools.islice(iterator, size))", "out": "リスト内包記法 変換"}
{"in": "wx.NO_BORDER ^ wx.SYSTEM_MENU ^ wx.MINIMIZE_BOX ^ wx.MAXIMIZE_BOX ^ wx.CLOSE_BOX", "out": "排他的論理和"}
{"in": "def __init__(self, *args, **kwargs):\n    super(UsuarioForm, self).__init__(*args, **kwargs)\nself.fields.pop('is_staff')", "out": "引数展開"}
{"in": "d = dict(zip(m[::2], m[1::2]))", "out": "ひとつおきの列"}
{"in": "self.response.headers.add_header(*jar.output().split(': ', 1))", "out": "引数展開"}
{"in": "re.findall('\\\\[([^]]*)\\\\]', sample)", "out": "正規表現"}
{"in": "for i in range(101):\n    rgb = colorsys.hsv_to_rgb(i / 300.0, 1.0, 1.0)\nprint((i, [round(255 * x) for x in rgb]))", "out": "リスト内包記法 変換"}
{"in": "sum(x is 0 for x in arr)", "out": "リスト内包記法 変換"}
{"in": "return ''.join(self._lines)", "out": "リストの文字列化"}
{"in": "second = [y for x, y in data]", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('\\\\([^()]*\\\\)')", "out": "正規表現"}
{"in": "\"\"\"((?<=[\\\\s:~])(\\\\w+)\\\\s*\\\\(([\\\\w\\\\s,<>\\\\[\\\\].=&':/*]*?)\\\\)\\\\s*(const)?\\\\s*(?={))\"\"\"", "out": "反転演算子"}
{"in": "sizes = [display.GetGeometry().GetSize() for display in displays]", "out": "リスト内包記法 変換"}
{"in": "re.findall(p, 'abbbcppq')", "out": "正規表現"}
{"in": "matches = re.finditer('(?=(\\\\d{10}))', s)", "out": "正規表現"}
{"in": "[match.group(0) for match in regex.finditer(\n    '1 1.1 .1 1. 1e1 1.04E-1 -.1 -1. e1 .1e1')]", "out": "リスト内包記法 変換"}
{"in": "print([x for x in a if x not in b] + [x for x in b if x not in a])", "out": "リスト内包記法 フィルタ"}
{"in": "strings = [('%.2f' % number) for number in numbers]", "out": "リスト内包記法 変換 少数点表示制限"}
{"in": "func(**r._asdict())", "out": "引数展開"}
{"in": "dict(re.findall('(\\\\w+)=(\\\\w+)', ''.join(lis)))", "out": "正規表現 リストの文字列化"}
{"in": "answer = [line.strip().split(',') for line in infile]", "out": "リスト内包記法 変換"}
{"in": "return getattr(self, cb)(*args, **kwargs)", "out": "引数展開"}
{"in": "a = [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]\n[[int(j) for j in i] for i in a]", "out": "リスト内包記法 変換"}
{"in": "l = [['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', 'i1'], ['a2', 'b2',\n    'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'i2'], ['a3', 'b3', 'c3', 'd3',\n    'e3', 'f3', 'g3', 'h3', 'i3'], ['a4', 'b4', 'c4', 'd4', 'e4', 'f4',\n    'g4', 'h4', 'i4'], ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n    'i5'], ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'i6'], ['a7',\n    'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'i7'], ['a8', 'b8', 'c8',\n    'd8', 'e8', 'f8', 'g8', 'h8', 'i8'], ['a9', 'b9', 'c9', 'd9', 'e9',\n    'f9', 'g9', 'h9', 'i9']]\nres = []\nfor line in l:\n    res.append(dict((k, None) for k in line))", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(i[0] for i in takewhile(lambda x_y: x_y[1], zip(r, d)))[-1::-1]", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "QApplication.setOverrideCursor(QCursor(QtCore.Qt.WaitCursor))", "out": "正規表現"}
{"in": "def getodds(lst):\n    return lst[1::2]", "out": "ひとつおきの列"}
{"in": "my_list = [int(i) for line in f for i in line.split() if i.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "new_arr = arr.reshape(-1, arr.shape[-1])", "out": "末尾の要素"}
{"in": "int(hashlib.sha1(s).hexdigest(), 16) % 10 ** 8", "out": "累乗演算子"}
{"in": "matches = re.findall('\\\\\"(.+?)\\\\\"', text)", "out": "正規表現"}
{"in": "list1_indices = {item: i for i, item in enumerate(list1)}", "out": "辞書内包記法"}
{"in": "return n if n - 1 < x <= n else n + 1", "out": "三項演算子"}
{"in": "x_str = ','.join(x_arrstr)", "out": "リストの文字列化"}
{"in": "return chain(*map(lambda x: combinations(ss, x), list(range(0, len(ss) + 1))))", "out": "引数展開"}
{"in": "with open('file.to.create', 'w') as file:\n    file.truncate(10 ** 10)", "out": "累乗演算子"}
{"in": "print('{}'.format(' '.join(temp[7:])))", "out": "リストの文字列化"}
{"in": "return [tuple(getattr(obj, field) for field in fields) for obj in listobj]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(cols))", "out": "リストの文字列化"}
{"in": "diags.extend(matrix.diagonal(i) for i in range(3, -4, -1))", "out": "リスト内包記法 変換"}
{"in": "time.mktime(time.strptime('Mon Jul 09 09:20:28 +0000 2012',\n    '%a %b %d %H:%M:%S +0000 %Y'))", "out": "日付書式 時刻書式"}
{"in": "def get_divs(n):\n    return [i for i in range(1, n) if n % i == 0]\n\ndef classify(num):\n    divs_sum = sum(get_divs(num))\nif divs_sum > num:\n    print('{} is abundant number'.format(num))\nelif divs_sum < num:\n    print('{} is deficient number'.format(num))\nelif divs_sum == num:\n    pass", "out": "辞書内包記法"}
{"in": "l = ['a', 'b', 'a', 'c']\nk = [(ord(x) - 96) for x in l]", "out": "リスト内包記法 変換"}
{"in": "return any(w.startswith(word_fragment) for w in wordlist)", "out": "リスト内包記法 変換"}
{"in": "return all(x != y for x, y in zip(s[:-1], s[1:]))", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nreturn reduce(operator.mul, [segment_scores[segment] for segment in segments])", "out": "リスト内包記法 変換"}
{"in": "a[np.lexsort(np.transpose(a)[::-1])]", "out": "逆順の列"}
{"in": "splitparts = re.compile('\\\\s*,\\\\s*')", "out": "正規表現"}
{"in": "print(str('{0:<' + str(maxLen) + '} ${1:.2f}').format(t, v))", "out": "少数点表示制限"}
{"in": "regex = re.compile('\\\\d+(.*?)[\\\\u263a-\\\\U0001f645]')\nregex.findall(s)", "out": "正規表現 ユニコード"}
{"in": "print('{:{}s} {:{}d} {:{}f}'.format(*flat_pairs(res, args)))", "out": "引数展開"}
{"in": "return int(x * 10 ** (1 + a) + y)", "out": "累乗演算子"}
{"in": "print([(c.rate(), c.accrualPeriod()) for c in coupons])", "out": "リスト内包記法 変換"}
{"in": "myl2 = [chr(random.randint(65, 90)) for i in range(0, 10000)]", "out": "リスト内包記法 変換"}
{"in": "return tuple(list(zip(*G))[0])", "out": "引数展開"}
{"in": "[id(x) for x in a]", "out": "リスト内包記法 変換"}
{"in": "[word for word, pos in test.pos() if pos == 'NN']", "out": "リスト内包記法 フィルタ"}
{"in": "super(Foo, self).__init__(**kwds)", "out": "引数展開"}
{"in": "print(int(str(random.choice(list(range(1, 10)))) + ''.join(x[:3])))", "out": "リストの文字列化"}
{"in": "sc.textFile(','.join(files))", "out": "リストの文字列化"}
{"in": "super(FooAdminForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return ''.join(result)", "out": "リストの文字列化"}
{"in": "sa, sb, sc = [str(e) for e in [a, b, c]]", "out": "リスト内包記法 変換"}
{"in": "result = func(*args, **kwargs)", "out": "引数展開"}
{"in": "print(re.findall('\\\\blocal\\\\b', 'Hello, locally local test local.'))", "out": "正規表現"}
{"in": "return ''.join(chr(b) for b in arr)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "items.sort(key=lambda obj: (obj.firstname, [(-ord(c) for c in obj.lastname)]))", "out": "リスト内包記法 変換"}
{"in": "print(np.where(~np.isfinite(dep_3)))", "out": "反転演算子"}
{"in": "print(' '.join(add.__code__.co_varnames[:2]) + ' ' + str(z))", "out": "リストの文字列化"}
{"in": "-min((x, -i) for i, x in enumerate(values))[1]", "out": "リスト内包記法 変換"}
{"in": "obj_list = [x.obj for x in set(HashMyAttr(obj) for obj in obj_list)]", "out": "リスト内包記法 変換"}
{"in": "def func1(a=1, b=2, c=3):\n    func2(**locals())", "out": "引数展開"}
{"in": "'\\u041d\\u0430\\u0437\\u0432\\u0430\\u043d\\u0438\\u0435 \\u0441\\u0430\\u0439\\u0442\\u0430 \\u043f\\u043e-\\u0440\\u0443\\u0441\\u0441\\u043a\\u0438'", "out": "ユニコード"}
{"in": "dict((f, getattr(self, f)) for f, _ in self._fields_)", "out": "辞書内包記法"}
{"in": "print([(x, y) for x in range(5) for y in [f(x)] if y != 2])", "out": "リスト内包記法 フィルタ"}
{"in": "plt.xlim(x[0] - 0.5 * width, x[-1] + 1.5 * width)", "out": "末尾の要素"}
{"in": "a.append({mykeys[n]: values[n] for n in range(0, len(mykeys))})", "out": "辞書内包記法"}
{"in": "r = func(*args, **kwargs)", "out": "引数展開"}
{"in": "def save(self, *args, **kwargs):\n    my_value = kwargs.pop('my_value', None)", "out": "引数展開"}
{"in": "datetime.time(*values)", "out": "引数展開"}
{"in": "return ''.join(stripped)", "out": "リストの文字列化"}
{"in": "data = [[td.findChildren(text=True) for td in tr.findAll('td')] for tr in rows]", "out": "リスト内包記法 変換"}
{"in": "cleaned = re.sub(REGEX, '', s).split()", "out": "正規表現"}
{"in": "[x for x, y in pairwise(xs) if x != y]", "out": "リスト内包記法 フィルタ"}
{"in": "def remove_adjacent(nums):\n    return [a for a, b in zip(nums, nums[1:] + [not nums[-1]]) if a != b]", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "PyQt4.QtCore.QPoint(1674, 382)", "out": "正規表現"}
{"in": "PyQt4.QtCore.QPoint(1867, 416)", "out": "正規表現"}
{"in": "PyQt4.QtCore.QPoint(605, 391)", "out": "正規表現"}
{"in": "PyQt4.QtCore.QPoint(439, 372)", "out": "正規表現"}
{"in": "PyQt4.QtCore.QPoint(1971, 391)", "out": "正規表現"}
{"in": "s = 'python is pretty fun to use'\n[len(x) for x in s.split()]", "out": "リスト内包記法 変換"}
{"in": "picture.putpixel((x, y), new_color)", "out": "正規表現"}
{"in": "z = [int(i == j) for i, j in zip(x, y)]", "out": "リスト内包記法 変換"}
{"in": "f = open(os.path.expanduser('~/Desktop/somedir/somefile.txt'))", "out": "反転演算子"}
{"in": "return ('%.2f' % x).rstrip('0').rstrip('.')", "out": "少数点表示制限"}
{"in": "regex = re.compile('[%s]' % re.escape(string.punctuation))", "out": "正規表現"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "good = [x for x in mylist if x in goodvals]", "out": "リスト内包記法 フィルタ"}
{"in": "words = string1.split()\nprint(' '.join(sorted(set(words), key=words.index)))", "out": "リストの文字列化"}
{"in": "\"\"\"\n\"\"\".join(' '.join(x) for x in zip(a, b))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "files = [open(f) for f in glob.glob('*.txt')]", "out": "リスト内包記法 変換"}
{"in": "figure.canvas.draw()", "out": "正規表現"}
{"in": "return [(double(x) if isinstance(x, list) else x * 2) for x in numberlist]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "with open('file') as f:\n    w, h = [int(x) for x in next(f).split()]\narray = [[int(x) for x in line.split()] for line in f]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall(p, test_str))", "out": "正規表現"}
{"in": "return x if x < y else y", "out": "三項演算子"}
{"in": "arrays = [np.array(map(int, line.split())) for line in open(\n    'scienceVertices.txt')]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\d+', ver)", "out": "正規表現"}
{"in": "fig.multi_line(y_err_x, y_err_y, color=color, **error_kwargs)", "out": "引数展開"}
{"in": "all(c in string.printable for c in bell)", "out": "リスト内包記法 変換"}
{"in": "sum(ele[1] == 1 for ele in a)", "out": "リスト内包記法 変換"}
{"in": "super(HiddenSlideForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(max(node.y for node in path.nodes))", "out": "リスト内包記法 変換"}
{"in": "super(Bar, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "matches = re.findall('&#\\\\d+;', s)", "out": "正規表現"}
{"in": "matches = re.findall('&#[xX][0-9a-fA-F]+;', s)", "out": "正規表現"}
{"in": "\"\"\"C:\\\\Users\\\\Myname\\\\Dropbox\\\\Foldes\\\\image.png\"\"\"", "out": "ユニコード"}
{"in": "numpy.array([Register() for i in range(4)])", "out": "リスト内包記法 変換"}
{"in": "s = 'abc\\\\u20ac\\\\U00010302\\\\U0010fffd'", "out": "ユニコード"}
{"in": "b = [indicies[elements == i] for i in range(1, N)]", "out": "リスト内包記法 変換"}
{"in": "do_something_else(array[-1])", "out": "末尾の要素"}
{"in": "(s[0] if len(s) % 2 else '') + ''.join(next(it) + x for x in it)", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "unpack('>d', ''.join(value))[0]", "out": "リストの文字列化"}
{"in": "s[-1]", "out": "末尾の要素"}
{"in": "print('\\n'.join(pkgs))", "out": "リストの文字列化"}
{"in": "np.set_printoptions(**original)", "out": "引数展開"}
{"in": "ax.set_xticklabels(month_series.index.strftime('%Y-%m'))", "out": "日付書式"}
{"in": "A[np.where(~np.isnan(A))[0][0]:]", "out": "反転演算子"}
{"in": "df.stack().str.split().str[-1].unstack()", "out": "末尾の要素"}
{"in": "'\\u4dff' < '\\u4e00'", "out": "ユニコード"}
{"in": "list(chain(*map(lambda x: x.split(',') if ',' in x else x, lis)))", "out": "三項演算子 引数展開"}
{"in": "t = datetime.datetime.strptime(s, '%H:%M:%S')", "out": "時刻書式"}
{"in": "indices_nonzero = numpy.arange(len(array))[~bindices_zero]", "out": "反転演算子"}
{"in": "return super(MyListView, self).get_context_data(**kwargs)", "out": "引数展開"}
{"in": "test = '8743-12083-15'\nlst_int = [int(x) for x in test.split('-')]", "out": "リスト内包記法 変換"}
{"in": "images = [image for seq in images for image in seq]", "out": "リスト内包記法 変換"}
{"in": "print([c for c in cumsum(['a', 'b', 'c'])])", "out": "リスト内包記法 変換"}
{"in": "self.setWindowFlags(self.windowFlags() | QtCore.Qt.FramelessWindowHint)", "out": "正規表現"}
{"in": "[a for a in s if len(a) > 0]", "out": "リスト内包記法 フィルタ"}
{"in": "Signal.send_robust(sender, **kwargs)", "out": "引数展開"}
{"in": "a = myobject.id if myobject is not None else None", "out": "三項演算子"}
{"in": "data = ['3', '7.4', '8.2']\nnew_data = [float(n) for n in data]", "out": "リスト内包記法 変換"}
{"in": "def randomword(length):\n    return ''.join(random.choice(string.lowercase) for i in range(length))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "all(a == b for a, b in zip_longest(gen_1, gen_2, fillvalue=sentinel))", "out": "リスト内包記法 変換"}
{"in": "case(re.search(pattern, st))", "out": "正規表現"}
{"in": "print(\"we don't have an IP address for user\")", "out": "リスト内包記法 変換"}
{"in": "s.map(methodcaller('strftime', '%d-%m-%Y'))", "out": "日付書式"}
{"in": "averaged = {k: (v / len(folds)) for k, v in list(summed.items())}", "out": "辞書内包記法"}
{"in": "print([x for x in Records if x['Price'] != 0])", "out": "リスト内包記法 フィルタ"}
{"in": "int(''.join(map(str, x)), 2)", "out": "リストの文字列化"}
{"in": "sum(i == word for word in str1.split())", "out": "リスト内包記法 変換"}
{"in": "[x[i:i + step] for i in range(0, len(x), step)]", "out": "リスト内包記法 変換"}
{"in": "print([list(b) for b in zip(l, inner)])", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nreturn reduce(lambda x, y: x + y, [len(x) for x in myList], 0)", "out": "リスト内包記法 変換"}
{"in": "g = (x + y for x, y in zip(g1, g2))", "out": "リスト内包記法 変換"}
{"in": "'%.3f' % round(1324343032.3243253 * 1000 / 1000, 3)", "out": "少数点表示制限"}
{"in": "\"\"\", \"\"\".join(str(s) for s in set_4)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "xml.write('</%s>' % sub[-1])", "out": "末尾の要素"}
{"in": "parse('2009-JAN-5').strftime('%B %d, %Y')", "out": "日付書式"}
{"in": "return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))", "out": "リスト内包記法 変換"}
{"in": "return re.sub('(.)(.)(.)', '\\\\g<3>\\\\g<2>\\\\g<1>', txt)", "out": "正規表現"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "test = [A() for _ in range(3)]", "out": "リスト内包記法 変換"}
{"in": "texts = [textOf(n) for n in soup.findAll('a', href=re.compile(\n    '^notizia.php\\\\?idn=\\\\d+'))]", "out": "リスト内包記法 変換 正規表現"}
{"in": "sum(1 if int(line) % k == 0 else 0 for line in sys.stdin)", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "file.write('Multiple of 1000!\\r\\n' * sum([i for i in a2 if i % 1000 == 0]))", "out": "リスト内包記法 フィルタ"}
{"in": "letters = 'asdfHRbySFss'\nuppers = [l for l in letters if l.isupper()]", "out": "リスト内包記法 フィルタ"}
{"in": "[s[a:b] for a, b in pairwise(accumulate(chain([0], keys)))]", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(actorsByMovies()))", "out": "リストの文字列化"}
{"in": "elem = next((s for s in selectionsFromTable if data['elements'] in s), None)", "out": "リスト内包記法 フィルタ"}
{"in": "with open('C:\\\\path\\\\to\\\\logons.txt', 'r') as f:\n    for line in f:\n        data = line.split()\nprint('{0[0]:<15}{0[1]:<15}{0[2]:<5}{0[3]:<15}{0[4]:>15}'.format(data))", "out": "辞書内包記法"}
{"in": "a = [[1, 2], [3, 3], [4, 4], [5, 2]]\nplt.plot(*zip(*a))", "out": "引数展開"}
{"in": "f.write('\\n'.join(inbuff).encode('utf-8'))", "out": "リストの文字列化"}
{"in": "A[:] = (sub for sub in A if st.issubset(sub))", "out": "リスト内包記法 フィルタ"}
{"in": "print('{}, {}, {}'.format(*islice(tup(1, 2), 3)))", "out": "引数展開"}
{"in": "odeint(func, y0, t, *list1)", "out": "引数展開"}
{"in": "print(re.sub('.(?<!\\\\0)', '(\\\\g<0>)', test))", "out": "正規表現"}
{"in": "list(chain.from_iterable(pattern.split(w) for w in input_list))", "out": "リスト内包記法 変換"}
{"in": "s[~s.index.duplicated()]", "out": "反転演算子"}
{"in": "[(k1[0], k1[1], k2) for k1, k2 in zip(chain.from_iterable(dge), nde)]", "out": "リスト内包記法 変換"}
{"in": "max(zip((x.count(item) for item in set(x)), set(x)))", "out": "リスト内包記法 変換"}
{"in": "'\\u0440\\u0430\\u0437' == '\\u0440\\u0430\\u0437'", "out": "ユニコード"}
{"in": "all(any(f(v) for f in functions) for v in values)", "out": "リスト内包記法 変換"}
{"in": "print('%3d -> (%.3f, %.3f, %.3f)' % ((val,) + pseudocolor(val, 0, 100)))", "out": "少数点表示制限"}
{"in": "words = [''.join(random.sample(word, len(word))) for word in words]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "answer = [[int(i) for i in line.strip().split(',')] for line in infile]", "out": "リスト内包記法 変換"}
{"in": "return [[l[x] for l in lists] for x in range(len(lists[0]))]", "out": "リスト内包記法 変換"}
{"in": "regex = compile('(%s)' % '|'.join(map(escape, list(dict.keys()))))", "out": "リストの文字列化"}
{"in": "ax.set_title('Azim, elev = {}\\xb0, {}\\xb0'.format(*azel))", "out": "引数展開"}
{"in": "{k: [da.get(k, []), db.get(k, [])] for k in set(listanum + listbnum)}", "out": "辞書内包記法"}
{"in": "print(re.findall(pattern, line))", "out": "正規表現"}
{"in": "s = 'Today\\xe2\\x80\\x99s date is 09/01/2014'\nsum(int(x) for x in s if x.isdigit())", "out": "リスト内包記法 フィルタ"}
{"in": "x[0::2]", "out": "ひとつおきの列"}
{"in": "wr.writerows([k] + v for k, v in list(od.items()))", "out": "リスト内包記法 変換"}
{"in": "super(ChoiceType, self).__init__(**kw)", "out": "引数展開"}
{"in": "return datetime.datetime(*dtuple[:6])", "out": "引数展開"}
{"in": "list_1 = [item for item in list_1 if item[2] >= 5 or item[3] >= 0.3]", "out": "リスト内包記法 フィルタ"}
{"in": "list_1 = [i for n, i in enumerate(list_1) if n not in index_list]", "out": "リスト内包記法 フィルタ"}
{"in": "a = [1, 2, 3, 1, 1, 3, 4, 3, 2]\nindex_sets = [np.argwhere(i == a) for i in np.unique(a)]", "out": "リスト内包記法 変換"}
{"in": "max(len(str(x)) for x in [0, 33, 4444522])", "out": "リスト内包記法 変換"}
{"in": "return pd.concat([df[col].apply(pd.Series) for col in cols], axis=1, keys=cols)", "out": "リスト内包記法 変換"}
{"in": "cleantext = re.sub(cleanr, '', raw_html)", "out": "正規表現"}
{"in": "return '[' + ', '.join(str(x) for x in list_or_iterator) + ']'", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "list_2 = [i for n, i in enumerate(list_2) if n not in index_list]", "out": "リスト内包記法 フィルタ"}
{"in": "sorted([2, -1, 3], None, lambda x: x ** 2, True)", "out": "累乗演算子"}
{"in": "if file_out[-1][-1] == '\\n':\n    file_out[-1] = file_out[-1][:-1]", "out": "末尾の要素"}
{"in": "return '\\n'.join(x.strip() for x in _extract_text(t).split('\\n'))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(dict(token.split('=') for token in shlex.split(s)))", "out": "辞書内包記法"}
{"in": "d = dict((an_object.name, an_object) for an_object in object_list)", "out": "辞書内包記法"}
{"in": "[(1 if any(full.endswith(last) for last in B) else 0) for full in A]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "np.allclose([np.where(a <= x)[0][0] for x in b], np.digitize(b, a))", "out": "リスト内包記法 変換"}
{"in": "return x ** 2 + y ** 2 + z ** 2 < radius ** 2", "out": "累乗演算子"}
{"in": "r = csv.reader(open('/tmp/test.csv'))\nlines = [l for l in r]", "out": "リスト内包記法 変換"}
{"in": "any(i() < 3 for i in f)", "out": "リスト内包記法 変換"}
{"in": "res = dict([(t, nt(*t)) for t in pairs])", "out": "辞書内包記法 引数展開"}
{"in": "return [int(line) for line in f]", "out": "リスト内包記法 変換"}
{"in": "next(i for i, x in enumerate(a) if 3 in x)", "out": "リスト内包記法 フィルタ"}
{"in": "return datetime.datetime.strptime(MmmYyyy, '%b-%Y').date()", "out": "日付書式"}
{"in": "s = '543tf'\nsum(int(x) for x in s if x.isdigit())", "out": "リスト内包記法 フィルタ"}
{"in": "return bool(re.search('xen', platform.platform()))", "out": "正規表現"}
{"in": "query = query.filter(and_(*filter_group))", "out": "引数展開"}
{"in": "fulldict = {i: i for i in range(1000)}", "out": "辞書内包記法"}
{"in": "print(list([x for x in words if len(x) > average]))", "out": "リスト内包記法 フィルタ"}
{"in": "print('   '.join(map(str, list(range(1, N + 1)))))", "out": "リストの文字列化"}
{"in": "all_pairs += [((nA, 0), (nB, 1)) for nA, nB in itertools.product(listA, listB)]", "out": "リスト内包記法 変換"}
{"in": "averaged = {k: (sum(d[k] for d in folds) / len(folds)) for k in folds[0]}", "out": "辞書内包記法"}
{"in": "print(','.join(str(a - b) for a, b in pairs(iter(data))))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "im = A2.shape[1] - 1 - np.argmax(A2[:, ::-1] < 0, axis=1)", "out": "逆順の列"}
{"in": "timeit.timeit('s if type(s) is str else str(s)', 's = None')", "out": "三項演算子"}
{"in": "lines = [x for x in open('names.txt', 'r') if x[0:-1] != 'tom']\nopen('names.txt', 'w').write(''.join(lines))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "return [u for u in self.custom_fields if self.cleaned_data[str(u.id)]]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for y in l if len(y) < 4 for x in y if isinstance(x, int)]", "out": "リスト内包記法 フィルタ"}
{"in": "seperator = re.compile('^-- -.*', re.M)", "out": "正規表現"}
{"in": "re.match('%s$' % (c,), cc)", "out": "正規表現"}
{"in": "pp(list(map(list, zip(*grid))))", "out": "引数展開"}
{"in": "list(intersect(*postings))", "out": "引数展開"}
{"in": "allkey = set().union(*alldict)", "out": "引数展開"}
{"in": "[int(c) for c in s if c.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "labels = ['' for item in ax.get_xticklabels()]", "out": "リスト内包記法 変換"}
{"in": "d = {x: i for i, x in enumerate(lis)}", "out": "辞書内包記法"}
{"in": "(i * i for i in range(5))", "out": "リスト内包記法 変換"}
{"in": "super(Room, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "return [''.join(words) for words in sixgrams]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "path = os.path.expanduser('~')", "out": "反転演算子"}
{"in": "re.findall('(<?=(foo))>asdas s[^asd]')", "out": "正規表現"}
{"in": "yield ''.join(itertools.chain.from_iterable(zip(s, t))) + s[-1]", "out": "リストの文字列化 末尾の要素"}
{"in": "add_cols(*x.T)", "out": "引数展開"}
{"in": "x = [1, 2, 3, 2, 2, 2, 3, 4]\nlist([a for a in x if a != 2])", "out": "リスト内包記法 フィルタ"}
{"in": "lists_of_lists = [[1, 2, 3], [4, 5, 6]]\n[sum(x) for x in zip(*lists_of_lists)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "plt.savefig('boxcompare.png')", "out": "正規表現"}
{"in": "self.changeLayout(QtCore.Qt.Vertical)", "out": "正規表現"}
{"in": "nodes.dot(x ** np.array([2, 1, 0])[:, (None)])", "out": "累乗演算子"}
{"in": "return sum(is_monotonic(num, reverse) for num in range(start, end))", "out": "リスト内包記法 変換"}
{"in": "sum(cased(chr(i)) for i in range(65536))", "out": "リスト内包記法 変換"}
{"in": "result = [Decimal(x.strip(' \"')) for x in A1]", "out": "リスト内包記法 変換"}
{"in": "keys = A.keys() & B.keys()\nthe_sum = sum(a[k] * b[k] for k in keys)", "out": "リスト内包記法 変換"}
{"in": "my_array.compress([(x in job_set) for x in my_array['job']])", "out": "リスト内包記法 変換"}
{"in": "return [int(line) for line in f]", "out": "リスト内包記法 変換"}
{"in": "check_call(['mkdir', expanduser('~/mnt/data_dir')])", "out": "反転演算子"}
{"in": "super(Subclass, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "x = ['a1sd', '23df', 'aaa', 'ccc', 'rrrr', 'ssss', 'e', '']\n[(x[i] + x[i + 1]) for i in range(0, len(x), 2)]", "out": "リスト内包記法 変換"}
{"in": "return np.array([float(sym.subs(all_dict)) for sym in syms])", "out": "辞書内包記法"}
{"in": "return '.'.join(url_elements[i - 1:])", "out": "リストの文字列化"}
{"in": "x = re.findall('alpha(.*?)bravo', data, re.DOTALL)", "out": "正規表現"}
{"in": "[sublist for sublist in list_ if sublist[1] != 1]", "out": "リスト内包記法 フィルタ"}
{"in": "super(MyAdAdminForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "tuples = [(freq, word) for word, freq in D.items()]", "out": "リスト内包記法 変換"}
{"in": "return '__getattribute__ has the highest priority for {}'.format(name)", "out": "辞書内包記法"}
{"in": "print([''.join(x) for x in combinations])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "queens = [(i, random.randint(1, 8)) for i in range(1, 9)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(merged)", "out": "リストの文字列化"}
{"in": "map(lambda xy: ''.join(xy), zip(repeat(x), y))", "out": "リストの文字列化"}
{"in": "main(**vars(args))", "out": "引数展開"}
{"in": "return [gu(i) for i in range(len(uo))]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join('{}'.format(k) for k in lsta + lstb + lstc))", "out": "辞書内包記法 リストの文字列化"}
{"in": "divisibleBySeven = [num for num in inputList if meetsCondition(num)]", "out": "リスト内包記法 フィルタ"}
{"in": "exec('\\n'.join(sys.argv[1:]))", "out": "リストの文字列化"}
{"in": "text_re = re.sub('(\\\\d+)/(\\\\d+)/(\\\\d+)', '\\\\3-\\\\1-\\\\2', text2)", "out": "正規表現"}
{"in": "r = re.compile('[{}]'.format(punctuation))", "out": "正規表現"}
{"in": "return os.fdopen(fd, *args, **kwargs)", "out": "引数展開"}
{"in": "return [x for x in pattern.split(s) if x]", "out": "リスト内包記法 フィルタ"}
{"in": "sorted_d = OrderedDict(zip(sorted_keys, [d[k] for k in sorted_keys]))", "out": "リスト内包記法 変換"}
{"in": "return zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "print(min((f(i, j), i, j) for i in l for j in l))", "out": "リスト内包記法 変換"}
{"in": "lines = (line for line in f if line.strip())", "out": "リスト内包記法 フィルタ"}
{"in": "[y for x in lst for y in (x if isinstance(x, tuple) else (x,))]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "a = [1, 2, 3, 4, 5]\n\"\"\" \"\"\".join(map(str, a))", "out": "リストの文字列化"}
{"in": "ansi_escape = re.compile('\\\\x1b[^m]*m')", "out": "正規表現"}
{"in": "l = [x.split('_')[1] for x in s.split(', ') if x]", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(etree.XPath('//text()')(document)))", "out": "リストの文字列化"}
{"in": "print('\\t'.join(map(str, numbers)))", "out": "リストの文字列化"}
{"in": "my_file.write('\\n'.join(output_lines))", "out": "リストの文字列化"}
{"in": "parse('2009.01.05').strftime('%B %d, %Y')", "out": "日付書式"}
{"in": "first = next((lambda set_y: a for a in x if a in set_y)(set(y)), None)", "out": "リスト内包記法 フィルタ"}
{"in": "for i in range(len(meds)):\n    if len(re.findall('[a-zA-Z\\\\d]+ \\\\d+ Cap\\\\(s\\\\)', meds[i])) == 0:\n        meds[i] = meds[i].replace(' Cap(s)', ' 1 Cap(s)')", "out": "正規表現"}
{"in": "[n] = set(sum(sl) for sl in L)", "out": "リスト内包記法 変換"}
{"in": "return [l[0][::-1]] + reve(l[1:]) if l else []", "out": "三項演算子 逆順の列"}
{"in": "regex = re.compile('%s-\\\\d*' % user)", "out": "正規表現"}
{"in": "next(v for k, v in list(my_dict.items()) if k.startswith('Date'))", "out": "辞書内包記法"}
{"in": "return sum(f(x) for f in funcs)", "out": "リスト内包記法 変換"}
{"in": "with open('test.json') as f:\n    data = pd.DataFrame(json.loads(line) for line in f)", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('([-+]?)(?:0?x)([0-9A-Fa-f]+)')", "out": "正規表現"}
{"in": "re.sub(p, '-', a)", "out": "正規表現"}
{"in": "super(MyMixinCharField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "stemmer.stem('\\u06a9\\u062a\\u0627\\u0628\\u200c\\u0647\\u0627')", "out": "ユニコード"}
{"in": "lst = [0, 1], [0, 4], [1, 0], [1, 4], [4, 0], [4, 1]\ndata = {tuple(item) for item in map(sorted, lst)}", "out": "辞書内包記法"}
{"in": "s = ' '.join(map(lambda x: '%s,' % x, l))", "out": "リストの文字列化"}
{"in": "A2 = [float(x.strip('\"')) for x in A1]", "out": "リスト内包記法 変換"}
{"in": "nums = [int(x) for x in num_str.split(',')]", "out": "リスト内包記法 変換"}
{"in": "text.split(a)[-1].split(b)[0]", "out": "末尾の要素"}
{"in": "return [(s, s1.index(s), s2.index(s)) for s in maximal]", "out": "リスト内包記法 変換"}
{"in": "[p for p in itertools.product(x, repeat=2)]", "out": "リスト内包記法 変換"}
{"in": "print(f(a=3, b=5, *[1, 2, 3]))", "out": "引数展開"}
{"in": "list = [i for i in stuff]", "out": "リスト内包記法 変換"}
{"in": "return fmt.format(**d)", "out": "引数展開"}
{"in": "locale.format('%.4f', 12345.678912, grouping=True)", "out": "少数点表示制限"}
{"in": "result = [item for sublist in l for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "df = pd.DataFrame({'Year': ['2014', '2015'], 'quarter': ['q1', 'q2']})\ndf['period'] = df[['Year', 'quarter']].apply(lambda x: ''.join(x), axis=1)", "out": "リストの文字列化"}
{"in": "re.match('hello', testString)", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join([j for j, m in zip(john.split(), mary.split()) if j == m])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "bool(re.match(pattern, '00000'))", "out": "正規表現"}
{"in": "timestamp = datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "regex = re.compile('A')", "out": "正規表現"}
{"in": "return [(s[0], s[1]) for s in (s.split() for s in strings)]", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('^\\\\s+', re.MULTILINE)", "out": "正規表現"}
{"in": "[i.value for i in d]", "out": "リスト内包記法 変換"}
{"in": "match = re.search('1.3', 'abc123xyz')", "out": "正規表現"}
{"in": "inv_map = {v: k for k, v in list(my_map.items())}", "out": "辞書内包記法"}
{"in": "return (np.matrix('1 1; 1 0', dtype=np.object) ** n).item(1)", "out": "累乗演算子"}
{"in": "bisect.insort(my_list, 'query for %s data' % item)", "out": "リスト内包記法 変換"}
{"in": "for line in file:\n    result = re.finditer(regex, line)", "out": "正規表現"}
{"in": "output.write(';'.join(list(res[0].keys())) + '\\n')", "out": "リストの文字列化"}
{"in": "all(x.isalpha() for x in ['abc', 'def'])\nall(x.isalpha() for x in ['ab1', 'def'])", "out": "リスト内包記法 変換"}
{"in": "m = re.match(regex, line)", "out": "正規表現"}
{"in": "compressed = dict([(x['url'], int(x['rank'].replace(',', ''))) for x in ranks])", "out": "辞書内包記法"}
{"in": "return [element for element in people if element['name'] == name]", "out": "リスト内包記法 フィルタ"}
{"in": "np.arange(10)[10::-1]", "out": "逆順の列"}
{"in": "return int(''.join(octets[0:2]))", "out": "リストの文字列化"}
{"in": "get_tags = soup.findAll(re.compile('(hr|strong)'))", "out": "正規表現"}
{"in": "r = re.compile('some[pattern]')", "out": "正規表現"}
{"in": "window.setAttribute(QtCore.Qt.WA_DeleteOnClose)", "out": "正規表現"}
{"in": "print([x.encode('ascii') for x in my_list])", "out": "リスト内包記法 変換"}
{"in": "df[i] = df[i].map('${:,.2f}'.format)", "out": "少数点表示制限"}
{"in": "return v.iloc[-1]", "out": "末尾の要素"}
{"in": "return all(recursively_empty(c) for c in e.getchildren())", "out": "リスト内包記法 変換"}
{"in": "re.sub('0x([0-9a-f]+)', lambda match: '0x' + match.group(1).upper(), '0xfa')", "out": "正規表現"}
{"in": "super(A_2, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "ts = pd.Series(zip(*my_list))", "out": "引数展開"}
{"in": "if any(s.lower() == 'foo' for s in list):\n    pass", "out": "リスト内包記法 変換"}
{"in": "print(my_string.format(**d))", "out": "引数展開"}
{"in": "matched = [c for c in cmds if c.startswith(s)]", "out": "リスト内包記法 フィルタ"}
{"in": "tuple_list = [(1, 'a'), (2, 'b'), (3, 'c')]\n[x[0] for x in tuple_list]", "out": "リスト内包記法 変換"}
{"in": "[k for k, v in sorted(list(dct.items()), key=lambda p: p[1], reverse=True)]", "out": "リスト内包記法 変換"}
{"in": "match = re.search('href=[\\\\\\'\"]?([^\\\\\\'\" >]+)', s)", "out": "正規表現"}
{"in": "'django.contrib.auth.context_processors.auth', 'django.core.context_processors.debug', 'django.core.context_processors.i18n', 'django.core.context_processors.media', 'django.core.context_processors.static', 'django.contrib.messages.context_processors.messages'", "out": "正規表現"}
{"in": "self.response.write(current.strftime('%Y-%m-%d %H:%M:%S %z'))", "out": "日付書式 時刻書式"}
{"in": "re.split('[aeiou]+', 'concertation', flags=re.I)", "out": "正規表現"}
{"in": "print('|'.join(data))", "out": "リストの文字列化"}
{"in": "L = [int('%d%d%d' % (x, y, x)) for x in range(1, 10) for y in range(10)]\nL", "out": "リスト内包記法 変換"}
{"in": "return ''.join([chr(int(p, 2)) for p in wrap(binary, 8)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print_all(x['uid'] for x in users)", "out": "リスト内包記法 変換"}
{"in": "html = \"\"\"    <li><span class=\"plaincharacterwrap break\">\n                    Zazzafooky but one two three!\n                </span></li>\n<li><span class=\"plaincharacterwrap break\">\n                    Zazzafooky2\n                </span></li>\n<li><span class=\"plaincharacterwrap break\">\n                    Zazzafooky3\n                </span></li>\n\"\"\"\nhtml = ''.join(line.strip() for line in html.split('\\n'))\nhtml", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return ''.join(''.join(y for y in x if y is not None) for x in r)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "chars.append(chr(int(''.join([str(bit) for bit in byte]), 2)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "z = np.array([complex(c.m_x, c.m_y) for c in cells])", "out": "リスト内包記法 変換"}
{"in": "s.groupby(s.shift().notnull().cumsum()).transform(lambda g: g[-1] / g.size)", "out": "末尾の要素"}
{"in": "print('\\\\u00a9')\nprint('\\\\N{COPYRIGHT SIGN}')", "out": "ユニコード"}
{"in": "s = 'The dog ran'\n\"\"\" \"\"\".join(w[::-1] for w in s.split())", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "print(''.join(replaced))", "out": "リストの文字列化"}
{"in": "a = a[::-1]", "out": "逆順の列"}
{"in": "return [j for i in lst for j in (replace_with if i == to_replace else [i])]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[sublist for sublist in list_ if not (sublist[1] == 1 and sublist[3] != 1)]", "out": "リスト内包記法 フィルタ"}
{"in": "def distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)", "out": "累乗演算子"}
{"in": "print(sum(itgt(*list(range(0, len(l), 2)))(l)) - sum(itgt(*list(range(1, len(l), 2)))(l)))", "out": "引数展開"}
{"in": "[' '.join(i) for i in product(list1, list2, list3)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[sum(x) for x in zip((1, 2, 3), (10, 20, 30), (100, 200, 300))]", "out": "リスト内包記法 変換"}
{"in": "data = render_template(path, **context)", "out": "引数展開"}
{"in": "[j for j in range(10) if 3 < j < 8]", "out": "リスト内包記法 フィルタ"}
{"in": "print([l[0].strip() for l in re_data_fields.findall(line)])", "out": "リスト内包記法 変換"}
{"in": "m = [1, 2, 3, 4, 5, 6, 7, 8]\nd = {x: y for x, y in zip(m[::2], m[1::2])}", "out": "辞書内包記法 ひとつおきの列"}
{"in": "self.render_template([template], **context)", "out": "引数展開"}
{"in": "a = '\\u0422\\u0435\\u0441\\u0442'\na.encode('utf-8')", "out": "ユニコード"}
{"in": "header = ''.join([str(t).strip() for t in headercell.findAll(text=True)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "xmin, xmax = min([i.min() for i in xs]), max([i.max() for i in xs])", "out": "リスト内包記法 変換"}
{"in": "df2 = pd.read_csv('test.csv', tupleize_cols=True)\ndf2.columns = pd.MultiIndex.from_tuples(eval(','.join(df2.columns)))", "out": "リストの文字列化"}
{"in": "with open(filename) as file:\n    found = any(word == line.strip() for line in file)", "out": "リスト内包記法 変換"}
{"in": "unicode_list = [chr(i) for i in range(sys.maxunicode)]", "out": "リスト内包記法 変換"}
{"in": "data = [(1, 2), (40, 2), (9, 80)]\nzip(*data)", "out": "引数展開"}
{"in": "[(x, y) for x in range(3, 0, -1) for y in range(3, x - 1, -1)]", "out": "リスト内包記法 変換"}
{"in": "ax.text(m[0], m[1], m[2], '$\\\\theta$', **text_options)", "out": "引数展開"}
{"in": "ax.text(m[0], m[1], m[2], '$\\\\phi$', **text_options)", "out": "引数展開"}
{"in": "return zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "scale, goodargs = goodargs[-1], goodargs[:-1]", "out": "末尾の要素"}
{"in": "class CustomBarModelForm(forms.ModelForm):\n\n\n    class Meta:\n        model = Bar\n\ndef __init__(self, *args, **kwargs):\n    super(CustomBarModelForm, self).__init__(*args, **kwargs)\nself.fields['foo'].queryset = Foo.objects.filter(title__isnull=False)\n\n\nclass BarAdmin(admin.ModelAdmin):\n    form = CustomBarModelForm", "out": "引数展開"}
{"in": "super(Foo, self).__init__(**kwargs)", "out": "引数展開"}
{"in": "bananas = [fruit for fruit in fruits if fruit.name == 'banana']", "out": "リスト内包記法 フィルタ"}
{"in": "newNums = (i for i, x in enumerate(nums) if x == 12)", "out": "リスト内包記法 フィルタ"}
{"in": "match = re.search('\\\\<(?P<brackets>.*)\\\\>', text)", "out": "正規表現"}
{"in": "output[-1].append(item)", "out": "末尾の要素"}
{"in": "value = str(re.sub('[-\\\\s]+', '-', value))", "out": "正規表現"}
{"in": "ax.set_ylabel(', '.join(y))", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join(c for c in s if not c.isspace())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "result = solve((x + I * y) ** 2 - z, (x, y))", "out": "累乗演算子"}
{"in": "return sum(v[idx] for k, v in stats.items() if k[ikey] == keyv)", "out": "リスト内包記法 フィルタ"}
{"in": "a = 'abc'\na, result = a[:-1], a[-1]", "out": "末尾の要素"}
{"in": "string_list = re.findall('\"([^\"]*\"', text)", "out": "正規表現"}
{"in": "clean = [x for x in lis if x is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "mystring = '[Bacon], [eggs], and [spam].'\nre.findall('\\\\[(.*?)\\\\]', mystring)", "out": "正規表現"}
{"in": "my_func(*[1, 2, 3, 4])", "out": "引数展開"}
{"in": "ids_list = [item[0] for item in cursor.fetchall()]", "out": "リスト内包記法 変換"}
{"in": "print(set(chain(*array)))", "out": "引数展開"}
{"in": "numbers = zip(*data)", "out": "引数展開"}
{"in": "a = [a.ix[i] for i in a.index if sorted1[i] < sorted2[i]]", "out": "リスト内包記法 フィルタ"}
{"in": "time = datetime.datetime.strptime(time, ' %H:%M:%S.%f')", "out": "時刻書式"}
{"in": "l = ['1', '2', '3', '4']\ns = ', '.join(l) + ','", "out": "リストの文字列化"}
{"in": "pieces = [p for p in re.split('( |\\\\\".*?\\\\\"|\\'.*?\\')', test) if p.strip()]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "mergedgroupdict('(?P<b>.b.)|(?P<i>.i.)', 'abcdefghijk')\nmergedgroupdict('(?P<b>.b.)|(?P<i>.i.)', 'abcdefghijk'[::-1])", "out": "逆順の列"}
{"in": "a = [1, 2, 3, 4]\n['hello{0}'.format(i) for i in a]", "out": "辞書内包記法"}
{"in": "return np.arange(N).reshape(shp).transpose(np.arange(len(shp))[::-1]).ravel()", "out": "逆順の列"}
{"in": "[x for x in the_list if the_list.count(x) == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "s = [['A', 'B', 'C', 'D'], ['B', 'E', 'F'], ['C', 'A', 'B', 'D'], ['D']]\n{t[0]: t[1:] for t in s}", "out": "辞書内包記法"}
{"in": "all(x > 0 for x in [3, -1, 5])", "out": "リスト内包記法 変換"}
{"in": "okay_items = [x for x in all_items if not regex.match(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "re.match(pattern, '4e4')", "out": "正規表現"}
{"in": "df_new = df.groupby('date').ts.apply(lambda x: pd.DataFrame([item for\n    sublist in x.values for item in sublist]))", "out": "リスト内包記法 変換"}
{"in": "Potato(**validated_data)", "out": "引数展開"}
{"in": "culled_list = [item for item in unculledlist if str(item)[-1] in ['0', '2',\n    '4']]", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "return super(IntegerRangeField, self).formfield(**defaults)", "out": "引数展開"}
{"in": "[([_] + list(itertools.takewhile(lambda x: x != 2, a))) for _ in a]", "out": "リスト内包記法 変換"}
{"in": "value = ''.join([str(t).strip() for t in valuecell.findAll(text=True)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "nums = [int(line) for line in open('numbers.txt', 'r')]", "out": "リスト内包記法 変換"}
{"in": "'\\u2603' == '\\u2603'", "out": "ユニコード"}
{"in": "[max(islice(map(abs, array), i, i + 4)) for i in range(0, len(array), 4)]", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(replace_all(my_replacements, x) for x in strings))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "myadd = lambda xs, ys: tuple(x + y for x, y in zip(xs, ys))", "out": "リスト内包記法 変換"}
{"in": "b = ' # '.join(b_elements)", "out": "リストの文字列化"}
{"in": "super(TestForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "format(1.2345, '.2f')", "out": "少数点表示制限"}
{"in": "package.__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "dirList = [name for name in sorted(os.listdir(path)) if name.endswith('.mp3')]", "out": "リスト内包記法 フィルタ"}
{"in": "files = [stack.enter_context(open(fname)) for fname in filenames]", "out": "リスト内包記法 変換"}
{"in": "result = list(set(s for s in stringlist if len(s) == ml))", "out": "リスト内包記法 フィルタ"}
{"in": "x = [1, 2, 3, 2, 2, 2, 3, 4]\n[a for a in x if a != 2]", "out": "リスト内包記法 フィルタ"}
{"in": "return view_func(request, *args, **kwargs)", "out": "引数展開"}
{"in": "newdate = datetime.datetime(*values)", "out": "引数展開"}
{"in": "return f(f, *args, **kwds)", "out": "引数展開"}
{"in": "return [dict(zip(list_of_keys, row)) for row in spamreader]", "out": "辞書内包記法"}
{"in": "df = df[~df['str_name'].str.contains('c')]", "out": "反転演算子"}
{"in": "\"\"\"['first', 'sec', 'third']\"\"\".split(\"'\")[1::2]", "out": "ひとつおきの列"}
{"in": "nrows = con.execute('SELECT count(*) FROM users').fetchone()[0]", "out": "引数展開"}
{"in": "from functools import reduce\nassert reduce(dict.get, list_address[:-1], dict_nested) == list_address[-1]", "out": "末尾の要素"}
{"in": "only_roman_chars('h\\xf4tel l\\u0153we')", "out": "ユニコード"}
{"in": "any(' ' in b for b in board[1:])", "out": "リスト内包記法 変換"}
{"in": "func(*args, **kwargs)", "out": "引数展開"}
{"in": "from django.core.files.uploadedfile import SimpleUploadedFile", "out": "正規表現"}
{"in": "return [i for i, j in takewhile(lambda i_j: i_j[0] == i_j[1], zip(list1, list2))]", "out": "リスト内包記法 変換"}
{"in": "nums = re.compile('[+-]?\\\\d+(?:\\\\.\\\\d+)?')", "out": "正規表現"}
{"in": "d.strftime('%m/%d/%Y %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "A.__init__(self, *a, **k)", "out": "引数展開"}
{"in": "c = [(a[x][0], a[x + 1][0], a[x + 2][0]) for x, _ in enumerate(a) if a[x][1\n    ] == b[0] and a[x + 1][1] == b[1] and a[x + 2][1] == b[2]]", "out": "リスト内包記法 フィルタ"}
{"in": "return ', '.join(self.data)", "out": "リストの文字列化"}
{"in": "return datetime.now().strfmtime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "r = re.compile('[ab]')", "out": "正規表現"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "datetime.datetime.now(pytz.timezone('US/Central')).strftime(\n    '%Y-%m-%dT%H:%M:%S.%f%z')", "out": "日付書式 時刻書式"}
{"in": "store.select('df_cols', [Term('columns', '=', 'A')])", "out": "正規表現"}
{"in": "def get_new_failures(list1, list2):\n    check = set([(d['classname'], d['testname']) for d in list2])\nreturn [d for d in list1 if (d['classname'], d['testname']) not in check]", "out": "リスト内包記法 フィルタ"}
{"in": "list = [i.rstrip('0') for i in listOfNum]", "out": "リスト内包記法 変換"}
{"in": "res = next((idx for idx, (x, y) in coupled_idx if x != y), None)", "out": "リスト内包記法 フィルタ"}
{"in": "next(i for i in range(100000) if i == 1000)", "out": "リスト内包記法 フィルタ"}
{"in": "evens = (i for i in range(limit) if i % 2 == 0)", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join(my_dashes))", "out": "リストの文字列化"}
{"in": "ax.figure.canvas.mpl_connect('draw_event', _wrap)", "out": "正規表現"}
{"in": "set([l[0] for l in a_list])", "out": "リスト内包記法 変換"}
{"in": "merged_dict = {k: [d.get(k, np.nan) for d in all_dicts] for k in keys}", "out": "辞書内包記法"}
{"in": "f.writelines(line + '\\n' for line in my_list)", "out": "リスト内包記法 変換"}
{"in": "rx = re.compile('^TEMPLATES = \\\\(.+\\\\)')", "out": "正規表現"}
{"in": "return f[::-1]", "out": "逆順の列"}
{"in": "[hex(305419896 >> i & 255) for i in (24, 16, 8, 0)]", "out": "リスト内包記法 変換"}
{"in": "Client(*sys.argv[1:]).run()", "out": "引数展開"}
{"in": "fig.savefig('figure.png', dpi=1)", "out": "正規表現"}
{"in": "my_args = ['foo', 'bar', 42]\n'Hello %s' % ', '.join([str(e) for e in my_args])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "for d in my_dicts:\n    d.update((k, 'value3') for k, v in d.items() if v == 'value2')", "out": "辞書内包記法"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "re.predict_proba(X_test)", "out": "正規表現"}
{"in": "new_list = [fruit for fruit in a if fruit not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "(-4) ** 2", "out": "累乗演算子"}
{"in": "a = numpy.array(list(range(10)))\na[::-1]", "out": "逆順の列"}
{"in": "b = ''.join([hex(int(value))[2:].zfill(2) for value in a])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "time.strptime(d1, '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "a = numpy.array([[2.0, 0.0, 0.0], [0.0, 2.0, 0.0], [0.0, 0.0, 4.0]])\nnumpy.savetxt(sys.stdout, a, fmt='%.4f')", "out": "少数点表示制限"}
{"in": "pprint({x: list(range(x)) for x in range(10)})", "out": "辞書内包記法"}
{"in": "class BaseClass(object):\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n\nclass ChildClass(BaseClass):\n\n    def __init__(self, *args, **kwargs):\n        super(ChildClass, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print('\\t'.join(map(str, x)))", "out": "リストの文字列化"}
{"in": "print(','.join(matches))", "out": "リストの文字列化"}
{"in": "return {k: map_nested_dicts(v, func) for k, v in ob.items()}", "out": "辞書内包記法"}
{"in": "list_of_ints = [int(i) for i in str(ISBN)]", "out": "リスト内包記法 変換"}
{"in": "a = '%he#llo, my website is: http://www.url.com/abcdef123'\nre.findall('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', a)", "out": "正規表現"}
{"in": "function_to_decorate(*args, **kwargs)", "out": "引数展開"}
{"in": "i_take_strings(*s.split())", "out": "引数展開"}
{"in": "colormap_r = ListedColormap(colormap.colors[::-1])", "out": "逆順の列"}
{"in": "[([x] + p) for x in seqs[0] for p in [[]]]", "out": "リスト内包記法 変換"}
{"in": "min_value = min(d.values())\nmin_keys = [k for k in d if d[k] == min_value]", "out": "リスト内包記法 フィルタ"}
{"in": "to_search = {x[0]: x for x in input}", "out": "辞書内包記法"}
{"in": "ax1.tick_params(axis='y', colors=plot_ax1.get_color(), **tkw)", "out": "引数展開"}
{"in": "return min(x for x in lst if x is not None)", "out": "リスト内包記法 フィルタ"}
{"in": "super(BetterTagListField, self).__init__(label, validators, **kwargs)", "out": "引数展開"}
{"in": "func(*args)", "out": "引数展開"}
{"in": "connection = redis.Connection(**kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(item for pair in swapped_pairs for item in pair)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "data.to_hdf('test_store.hdf', 'test', mode='w')", "out": "正規表現"}
{"in": "df['test1'] = [(spaces[-len(i):] + i) for i in df['test1']]", "out": "リスト内包記法 変換"}
{"in": "return min(k for k in d if k > key)", "out": "リスト内包記法 フィルタ"}
{"in": "int(''.join(reversed(str(12345))))", "out": "リストの文字列化"}
{"in": "super(GalleryForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "with open(fname, 'w') as f:\n    f.writelines(','.join(str(j) for j in i) + '\\n' for i in matrix)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "writer.writerow([str(s).encode('utf-8') for s in row])", "out": "リスト内包記法 変換"}
{"in": "print('Most recent file = %s' % (logfiles[-1],))", "out": "末尾の要素"}
{"in": "sequence = list(zip(*['123', '134', '234', '214', '223']))", "out": "引数展開"}
{"in": "list(iterateFinitely(lambda x: [x / 2] if x else [], 20))", "out": "三項演算子"}
{"in": "print([elt for elt, count in x.most_common(3)])", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(['' if t.text is None else t.text] + [xml.tostring(e) for e in\n    t.getchildren()])", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "return [seq[i:i + n] for i in range(0, len(seq), n)]", "out": "リスト内包記法 変換"}
{"in": "sum(1 for _ in it)", "out": "リスト内包記法 変換"}
{"in": "s = re.sub('^[^a-zA-Z_]+', '', s)", "out": "正規表現"}
{"in": "kwargs_new = {k: v for k, v in list(d.items()) if isinstance(k, str)}", "out": "辞書内包記法"}
{"in": "print([[item.p1, item.p2] for item in uniq])", "out": "リスト内包記法 変換"}
{"in": "return super(JSONField, self).get_db_prep_save(value, *args, **kwargs)", "out": "引数展開"}
{"in": "sum(p[0] for p in datapoints[0:5]) / 5.0", "out": "リスト内包記法 変換"}
{"in": "def __init__(self):\n    self.y = [self.x for i in range(1)]", "out": "リスト内包記法 変換"}
{"in": "result = [x[0], x[-1]]", "out": "末尾の要素"}
{"in": "return math.sqrt(point[0] ** 2 + point[1] ** 2)", "out": "累乗演算子"}
{"in": "re.match('[\\u2019]', '\\xe2', re.U)", "out": "正規表現 ユニコード"}
{"in": "f = a ** 2 + x * b ** 2 + y * a * b * np.cos(c) + z * a * b * np.sin(c)", "out": "累乗演算子"}
{"in": "cursor.execute('SELECT ' + ', '.join(['quote(?)' for i in args]), args)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return view_func(request, *args, **kwargs)", "out": "引数展開"}
{"in": "re.compile('jpg|png|gif').search('testpg.txt')", "out": "正規表現"}
{"in": "def split(str, num):\n    return [str[start:start + num] for start in range(0, len(str), num)]", "out": "リスト内包記法 変換"}
{"in": "[item for item in data if item == 'number1']", "out": "リスト内包記法 フィルタ"}
{"in": "years = [x.year for x in your_list]", "out": "リスト内包記法 変換"}
{"in": "l = num_str.split(',')\n[l[i:i + 2] for i in range(0, len(l), 2)]\n[l[i:i + 7] for i in range(0, len(l), 7)]", "out": "リスト内包記法 変換"}
{"in": "return '{}{:03.0f}'.format(dt.strftime('%Y-%m-%dT%H:%M:%S.%f'), nanos % 1000.0)", "out": "日付書式 時刻書式"}
{"in": "re.sub('<(\\\\w+)>', lambda m: '<{}>'.format(d.get(m.group(1), m.group(1))), s)", "out": "正規表現"}
{"in": "print(','.join(\"'{0}'\".format(n) for n in numbers))", "out": "辞書内包記法 リストの文字列化"}
{"in": "print(' '.join(result))", "out": "リストの文字列化"}
{"in": "\"\"\"{0:.2f}\"\"\".format(150)", "out": "少数点表示制限"}
{"in": "id = [item['uri'] for item in playlists['items']]", "out": "リスト内包記法 変換"}
{"in": "bits = [int(x) for x in bits[::-1]]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "entries = dict([(x, y) for x, y in zip(out[::2], out[1::2])])", "out": "辞書内包記法 ひとつおきの列"}
{"in": "return fn(*args, **kwargs)", "out": "引数展開"}
{"in": "maxLen = max(len(p) for p in props)", "out": "リスト内包記法 変換"}
{"in": "get_mediainfo_from('C:\\\\Users\\\\Nick\\\\Desktop\\\\test\\\\')", "out": "ユニコード"}
{"in": "identity = lambda x: [[int(i == j) for i in range(x)] for j in range(x)]", "out": "リスト内包記法 変換"}
{"in": "print('upper' if any(map(str.isupper, test)) else 'lower')", "out": "三項演算子"}
{"in": "return [p[0] for p in deck]", "out": "リスト内包記法 変換"}
{"in": "{(x * x) for x in range(10)}", "out": "辞書内包記法"}
{"in": "count = sum(1 for _ in emoticons)", "out": "リスト内包記法 変換"}
{"in": "groups.append([x[1] for x in g])", "out": "リスト内包記法 変換"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "new_items = [item for item in items if not item.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "plt.scatter(*zip(*new_points))", "out": "引数展開"}
{"in": "print('Prob for {} is {}'.format(k, v))", "out": "辞書内包記法"}
{"in": "pd.concat(df.xs(d, axis=1) for d in dupes).groupby(level=0, axis=1).mean()", "out": "リスト内包記法 変換"}
{"in": "s = ['1', '2', '3.4', '5.6', '7.8', '1e2']\n[(float(i) if '.' in i or 'e' in i else int(i)) for i in s]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "r['amount'] = format(r['amount'], '%.2f')", "out": "少数点表示制限"}
{"in": "return sign * 2.0 ** (expo - 25) * prec", "out": "累乗演算子"}
{"in": "numbers = [random.randint(1, 1000) for x in range(SOMEVERYLARGENUMBER)]", "out": "リスト内包記法 変換"}
{"in": "resulting_list.extend(x for x in second_list if x not in resulting_list)", "out": "リスト内包記法 フィルタ"}
{"in": "return [sorted(sub) for sub in result]", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join(s)", "out": "リストの文字列化"}
{"in": "re.sub('(.)', repl, 'Nissim')", "out": "正規表現"}
{"in": "ax = figure.add_subplot(111, projection='3d')", "out": "正規表現"}
{"in": "items = [(-value, key) for key, value in list(the_dict.items())]", "out": "辞書内包記法"}
{"in": "d = {'key1': [1, 2, 3], 'key2': [4, 5, 6], 'key3': [7, 8, 9]}\nwith open('test.csv', 'wb') as outfile:\n    writer = csv.writer(outfile)\nwriter.writerow(list(d.keys()))\nwriter.writerows(zip(*list(d.values())))", "out": "引数展開"}
{"in": "def diff_letters(a, b):\n    return sum(a[i] != b[i] for i in range(len(a)))", "out": "リスト内包記法 変換"}
{"in": "dt_str = datetime.datetime.strftime(dt_obj, '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "[(5 * n) for n in range(1, 10 + 1)]", "out": "リスト内包記法 変換"}
{"in": "A = [(A[i] + (0 if i % 2 == 0 else 0.1)) for i in range(len(A))]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "infile = open(os.path.expanduser('~/folder2/test.txt'), 'r+')", "out": "反転演算子"}
{"in": "super(PurchaseSerializer, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "lst2.append([x[0] for x in lst])", "out": "リスト内包記法 変換"}
{"in": "print(''.join(row))", "out": "リストの文字列化"}
{"in": "super(FooForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(next(it, '') + c for c in it)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "fig, ax = plt.subplots(figsize=(6, 1))\nax.scatter(X, [1] * len(X), c=values, marker='s', s=100)\nfig.autofmt_xdate()\nax.yaxis.set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.xaxis.set_ticks_position('bottom')\nax.get_yaxis().set_ticklabels([])\nday = pd.to_timedelta('1', unit='D')\nplt.xlim(X[0] - day, X[-1] + day)\nplt.show()", "out": "末尾の要素"}
{"in": "def bitfield(n):\n    return [(1 if digit == '1' else 0) for digit in bin(n)[2:]]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "data = ['|'.join(d) for d in data]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "document.update(**conv_dict_to_update(data))", "out": "引数展開"}
{"in": "string = 'Hello There'\nprint(' '.join([string[:5]] * 2))", "out": "リストの文字列化"}
{"in": "print('After Month:', date_after_month.strftime('%d/%m/%Y'))", "out": "日付書式"}
{"in": "return target.update(request, *args, **kwargs)", "out": "引数展開"}
{"in": "[(x + y) for x, y in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "chunk = np.genfromtxt(f, max_rows=chunksize, *args, **kwargs)", "out": "引数展開"}
{"in": "dict(list(d.items())[0] for d in res[0]['webmachine'])", "out": "辞書内包記法"}
{"in": "[i[1] for i in Formatter().parse('Hello {1} {foo}')]", "out": "辞書内包記法"}
{"in": "return function(*args, **kwargs)", "out": "引数展開"}
{"in": "print(re.sub('(1+)', fixer, my_string))", "out": "正規表現"}
{"in": "s = re.sub('foo', 'replaced', s)", "out": "正規表現"}
{"in": "print('{0:<12} : {1}'.format(dirname, ' '.join(content)))", "out": "リストの文字列化"}
{"in": "return super(MyInlineModelAdmin, self).get_formset(request, obj, **kwargs)", "out": "引数展開"}
{"in": "rs = (grequests.get(u, stream=False) for u in urls)", "out": "リスト内包記法 変換"}
{"in": "data = json.loads(response)\nmyList = [item for item in data if item == 'number1']", "out": "リスト内包記法 フィルタ"}
{"in": "sum(1 for ch in '\\u200c' if unicodedata.combining(ch) == 0)", "out": "リスト内包記法 フィルタ ユニコード"}
{"in": "DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'", "out": "日付書式 時刻書式"}
{"in": "result = [[k, da[k] + db[k]] for k in set(da.keys()).intersection(list(db.keys()))]", "out": "リスト内包記法 変換"}
{"in": "def inner(self, *args, **kwargs):\n    return fn(self, *args, **dict(self.gen_args, **kwargs))", "out": "引数展開"}
{"in": "df['date'] = [x.split('|')[1] for x in df.index]", "out": "リスト内包記法 変換"}
{"in": "[i for i in B if i in A] + [i for i in A if i not in B]", "out": "リスト内包記法 フィルタ"}
{"in": "df['cost'] = df['cost'].map('${:,.2f}'.format)", "out": "少数点表示制限"}
{"in": "[d[item] for item in a]", "out": "リスト内包記法 変換"}
{"in": "[{'node_id': next(ii), 'left': x[0], 'right': x[1]} for x in model.children_]", "out": "辞書内包記法"}
{"in": "list2 = [foo(i) for i in list1]", "out": "リスト内包記法 変換"}
{"in": "a = '[[a b] [c d] [e g]]'\n[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "sum(a * b for a, b in zip(A, B))", "out": "リスト内包記法 変換"}
{"in": "bin(strint('abc'[::-1]) << 8)", "out": "逆順の列"}
{"in": "[re.findall(pattern, clause) for clause in clauses.split('\\n')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "print([(k, v) for k, v in list(self.items())])", "out": "リスト内包記法 変換"}
{"in": "return [random.randrange(10000) for _ in range(length)]", "out": "リスト内包記法 変換"}
{"in": "yield line, ''.join(seq)", "out": "リストの文字列化"}
{"in": "D = [[i, j, k] for i in A for j in B for k in C if i + j - k == 3]", "out": "リスト内包記法 フィルタ"}
{"in": "len(dict_test) + sum(len(v) for v in dict_test.values() if isinstance(v,\n    dict))", "out": "辞書内包記法"}
{"in": "return ' '.join(word for word in text.split() if len(word) > 3)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "d2 = [k for k, v in list(d.items()) for _ in range(v)]", "out": "リスト内包記法 変換"}
{"in": "super(RequiredIf, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "trimmed[k[0], k[-1]] += v", "out": "末尾の要素"}
{"in": "print('\\n'.join(str(p) for p in pairs(master_board_state)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "data[~data['ContactID'].isin(to_drop)]", "out": "反転演算子"}
{"in": "print([(sum(nums[:count]) / count) for count in range(1, len(nums) + 1)])", "out": "リスト内包記法 変換"}
{"in": "D0 = np.array([(A[i] * B[(i), :]) for i in range(len(A))])", "out": "リスト内包記法 変換"}
{"in": "print([val[1] for val in enumerate(a) if val[0] != i])", "out": "リスト内包記法 フィルタ"}
{"in": "lists = [['a', 'b', 'c'], ['d', 'e', 'f']]\n[x for t in zip(*lists) for x in t]", "out": "リスト内包記法 変換 引数展開"}
{"in": "output = re.findall('\\\\b\\\\d{5}\\\\b', text)", "out": "正規表現"}
{"in": "[x for x in [1, 2, None] if x != None]", "out": "リスト内包記法 フィルタ"}
{"in": "clean = [x for x in usertext if x not in stop_words]", "out": "リスト内包記法 フィルタ"}
{"in": "lastDigit = x[-1]", "out": "末尾の要素"}
{"in": "[gu(i) for i in range(len(uo))]", "out": "リスト内包記法 変換"}
{"in": "print(mystring[-1])", "out": "末尾の要素"}
{"in": "nums = [int(x) for x in data[1].split('/')]", "out": "リスト内包記法 変換"}
{"in": "a = [1, 2, 3, 1, 3, 2, 1, 1]\n[(4 if x == 1 else x) for x in a]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "s = pd.Series([1, 2, 3, 4, np.NaN, 5, np.NaN])\ns[~s.isnull()]", "out": "反転演算子"}
{"in": "aList.append([element.strip() for element in row])", "out": "リスト内包記法 変換"}
{"in": "list_2_sorted = [x[1] for x in sorted_together]", "out": "リスト内包記法 変換"}
{"in": "x = x.set_value(i, i ** 2)", "out": "累乗演算子"}
{"in": "return obj.strftime('%Y-%m-%dT%H:%M:%SZ')", "out": "日付書式 時刻書式"}
{"in": "item.setCheckState(QtCore.Qt.Checked)", "out": "正規表現"}
{"in": "z = [int(i == j) for i, j in zip(x, y)]\nz", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile('([A-Z]+)([0-9]+)')", "out": "正規表現"}
{"in": "data = [line.strip().split() for line in f.readlines()]", "out": "リスト内包記法 変換"}
{"in": "m = re.findall('^(?=.*Tim).*stupid', str, re.MULTILINE)", "out": "正規表現"}
{"in": "regex = re.compile(',(?![^<>]*>)')", "out": "正規表現"}
{"in": "dcounts = Counter(d[0] for d in defectdetails)", "out": "リスト内包記法 変換"}
{"in": "transform = {'type_id': 'type', 'type_name': 'name'}\nnew_list = [{transform[k]: v for k, v in list(d.items())} for d in old_list]", "out": "辞書内包記法"}
{"in": "super(CompanyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(re.findall('[+-]? *(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?', s))", "out": "正規表現"}
{"in": "fullurl = quote(fullurl, safe=\"%/:=&?~#+!$,;'@()*[]\")", "out": "反転演算子"}
{"in": "[i for i in range(100000) if i == 1000][0]", "out": "リスト内包記法 フィルタ"}
{"in": "def countHashedLines(lines):\n    return len([line for line in lines if line.startswith('#')])", "out": "リスト内包記法 フィルタ"}
{"in": "print(sum(int(x) * 60 ** i for i, x in enumerate(reversed(t.split(':')))))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "ax.lines[-1].set_linewidth(8)", "out": "末尾の要素"}
{"in": "z = [[y for y in row if y] for row in x.T]", "out": "リスト内包記法 フィルタ"}
{"in": "print(formatter.format(fmt, **data))", "out": "引数展開"}
{"in": "my_new_list = [i for i in myList if i.count(None) < 4]", "out": "リスト内包記法 フィルタ"}
{"in": "[0] + list(accumulate(sum(1 for _ in g) for _, g in groupby(bool_array)))", "out": "リスト内包記法 変換"}
{"in": "def encrypt(string, length):\n    return ' '.join(string[i:i + length] for i in range(0, len(string),\n        length))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "def oddonly(lst):\n    return [x for x in lst if x % 2]", "out": "リスト内包記法 フィルタ"}
{"in": "print([x for x in pattern.split(string) if x])", "out": "リスト内包記法 フィルタ"}
{"in": "set(d[0]).intersection(*d)", "out": "引数展開"}
{"in": "print('/'.join('pictures\\\\12761_1.jpg'.split('\\\\')))", "out": "リストの文字列化"}
{"in": "df.Mathscore.map(d)", "out": "正規表現"}
{"in": "both_removed = [s.strip('0') for s in listOfNum]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(thelist))", "out": "リストの文字列化"}
{"in": "paired_sorted = sorted(zip(List2, List3, List1), key=lambda x: (x[0], -x[1]))\nl2, l3, l1 = zip(*paired_sorted)", "out": "引数展開"}
{"in": "return n + Decimal('10') ** n.as_tuple().exponent", "out": "累乗演算子"}
{"in": "l = [sublist[:] for sublist in l]", "out": "リスト内包記法 変換"}
{"in": "query = query.filter(~table_a.id.in_(subquery))", "out": "反転演算子"}
{"in": "tuple({name: score} for name, score in max_scores.items())", "out": "辞書内包記法"}
{"in": "dt = datetime.datetime.strptime(myDate, '%Y-%m-%d %H:%M:%S,%f')\ntime.mktime(dt.timetuple()) + dt.microsecond / 1000000.0", "out": "日付書式 時刻書式"}
{"in": "s = 'foo bar foo bar foo bar'\nre.sub('\\\\b(.+)\\\\s+\\\\1\\\\b', '\\\\1', s)", "out": "正規表現"}
{"in": "return dt.strftime('%Y-%m-%dT%H:%M:%SZ')", "out": "日付書式 時刻書式"}
{"in": "return ''.join(random.choice(letters) for i in range(int(length)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return other(self.function(*args, **kwargs))", "out": "引数展開"}
{"in": "print([i for i in re.split('(?:\\\\|[^:]*:.*?\\\\|(?:[\\\\s;]+|$))+', x) if i])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "set(frozenset(ts) for ts in x)", "out": "リスト内包記法 変換"}
{"in": "data = [map(int, line.split()) for line in f]", "out": "リスト内包記法 変換"}
{"in": "[(a, b, c) for a in range(10) for b in range(a, 10) for c in range(b, 10)]", "out": "リスト内包記法 変換"}
{"in": "rx = re.compile('(\\\\d[\\\\d,]{2,}) lbs')", "out": "正規表現"}
{"in": "return self.retrieve(request, *args, **kwargs)", "out": "引数展開"}
{"in": "x /= np.sqrt((x ** 2).mean())", "out": "累乗演算子"}
{"in": "y = [p[1] for p in points]", "out": "リスト内包記法 変換"}
{"in": "ax.plot(x, 0.5 * (5 * x ** 3 - 3 * x), color='blue', ls=':', label='$P_3(x)$')", "out": "累乗演算子"}
{"in": "form.category.data = post.category.id if page.category else 0", "out": "三項演算子"}
{"in": "win.setWindowFlags(win.windowFlags() & ~QtCore.Qt.WindowMaximizeButtonHint)", "out": "正規表現 反転演算子"}
{"in": "df = df[~df['str_name'].str.contains('c')]\ndf", "out": "反転演算子"}
{"in": "all(x == s[0] for x in s)", "out": "リスト内包記法 変換"}
{"in": "zip(zip(*a), zip(*b))[0]", "out": "引数展開"}
{"in": "repr(any(item.startswith('Derived:') for item in para))", "out": "リスト内包記法 変換"}
{"in": "strs = 'C:\\\\Users\\\\Josh\\\\Desktop\\\\20130216'", "out": "ユニコード"}
{"in": "r = re.compile('(a?[^a]+)')", "out": "正規表現"}
{"in": "big_df[~big_df['User Name'].str.endswith(('DA', 'PL'))]", "out": "反転演算子"}
{"in": "output = re.sub('a{3,}', 'aa', input)", "out": "正規表現"}
{"in": "Index = next(i for i, _ in enumerate(a) if np.isclose(_, val, tol))", "out": "リスト内包記法 フィルタ"}
{"in": "regexString = '(?<= = \")' + re.escape(original) + '(?=\")'", "out": "正規表現"}
{"in": "print([x for x in groups if a not in x])", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(textwrap.wrap('This is my sooo long title', 10)))", "out": "リストの文字列化"}
{"in": "return m.swapaxes(0, 2)[::-1, :, :]", "out": "逆順の列"}
{"in": "result_dict = {k: list(g) for k, g in it.groupby(mylist, keyfunc)}", "out": "辞書内包記法"}
{"in": "dict([x for x in list(data.items()) if x[0] > 5])", "out": "辞書内包記法"}
{"in": "nofrag_dt = datetime.datetime.strptime(nofrag, '%Y-%m-%dT%H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "myarray[0][-1]", "out": "末尾の要素"}
{"in": "return ' '.join([word[::-1] for word in shifted_words])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "df.columns = [c.replace('# ', '') for c in df.columns]", "out": "リスト内包記法 変換"}
{"in": "super(ExampleForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return '\\n'.join(all_read_text.splitlines()[-total_lines_wanted:])", "out": "リストの文字列化"}
{"in": "df3 = df3[~df3.index.duplicated(keep='first')]", "out": "反転演算子"}
{"in": "\"\"\"\"\"\".join(takewhile(str.isdigit, input))", "out": "リストの文字列化"}
{"in": "[rect.set_visible(False) for rect in rects]", "out": "リスト内包記法 変換"}
{"in": "files = [file for file in glob.glob(PATH + '/*/**/*.txt', recursive=True)]", "out": "リスト内包記法 変換"}
{"in": "with open('input.txt') as infile:\n    matrix = [line.rstrip() for line in infile]", "out": "リスト内包記法 変換"}
{"in": "[memoized(x) for x in l if memoized(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "return (coord[0] - x) ** 2 + (coord[1] - y) ** 2 - r ** 2", "out": "累乗演算子"}
{"in": "dicts = [{k: v.lower() for k, v in list(d.items())} for d in messages]\nprint(dicts)", "out": "辞書内包記法"}
{"in": "o = [int(idx == i) for idx, l in enumerate(input_seq) for _ in l]", "out": "リスト内包記法 変換"}
{"in": "[(x, sum(map(itemgetter(1), y))) for x, y in groupby(L, itemgetter(0))]", "out": "リスト内包記法 変換"}
{"in": "return ','.join(map(str, lst)), []", "out": "リストの文字列化"}
{"in": "a[1:][::2]", "out": "ひとつおきの列"}
{"in": "'\\u044e\\u0443 \\u0441\\u043e \\u0431\\u0435\\u0443\\u0442\\u0438\\u0444\\u0443\\u043b'", "out": "ユニコード"}
{"in": "items = [dicttolatex(dic) for dic in items_to_clean]", "out": "辞書内包記法"}
{"in": "gens = [select_kth(v) for v in range(13)]", "out": "リスト内包記法 変換"}
{"in": "print([x for x in list(globals().keys()) if isinstance(globals()[x], FunctionType)])", "out": "リスト内包記法 フィルタ"}
{"in": "d = dict(zip((o.name for o in object_list), object_list))", "out": "辞書内包記法"}
{"in": "\"\"\"r = re.search(r'(\\\\d{1,3}\\\\.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3})', '192.168.1.1 999.999.999.999')\"\"\"", "out": "正規表現"}
{"in": "[i for i in np.argsort(a[:, (0)]) if a[i, 1] == -1][0]", "out": "リスト内包記法 フィルタ"}
{"in": "sf['datetime'] = sf['datestring'].str_to_datetime('%Y-%d-%m')", "out": "日付書式"}
{"in": "parser.add_argument(*option, **config)", "out": "引数展開"}
{"in": "with open('urls.txt', 'rt') as f:\n    start_urls = [url.strip() for url in f.readlines()]", "out": "リスト内包記法 変換"}
{"in": "pg.AxisItem.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "print(f.strftime('%m/%d/%Y %H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "return ''.join(str(chr(b)) for b in reversed(ba)).encode('latin1')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "os.mkdir('\\u6587\\u4ef6\\u5939')", "out": "ユニコード"}
{"in": "print(' '.join(map(str, fib())))", "out": "リストの文字列化"}
{"in": "return chain.from_iterable([x] if isinstance(x, str) else x for x in lst)", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "b = [(sl + [0] * (maxlen - len(sl))) for sl in a]", "out": "リスト内包記法 変換"}
{"in": "[sum(q[i:i + 2]) for i in range(0, len(q), 2)]", "out": "リスト内包記法 変換"}
{"in": "super(UserProfile, self).delete(*args, **kwargs)", "out": "引数展開"}
{"in": "matches = re.findall('&\\\\w+;', s)", "out": "正規表現"}
{"in": "types = [elem[1] for elem in res.cursor.description]", "out": "リスト内包記法 変換"}
{"in": "print(foo(**d))", "out": "引数展開"}
{"in": "os.makedirs('C:\\\\Users\\\\PREM\\\\Desktop\\\\pyftp download\\\\ftp')", "out": "ユニコード"}
{"in": "return db.Column(*args, **kwargs)", "out": "引数展開"}
{"in": "sys.getsizeof(10 ** 10 ** 6)", "out": "累乗演算子"}
{"in": "s = [0] + [i for i in range(1, len(x)) if x[i] != x[i - 1] + 1] + [len(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "return [''.join(letters[:i] + letters[i::-1]) for i in range(last_letter - 97)]", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "ax.set_ylim(ax.get_ylim()[::-1])", "out": "逆順の列"}
{"in": "add(*arg)", "out": "引数展開"}
{"in": "[n for d, n in sorted((abs(x - myNumber), x) for x in myList)[:k]]", "out": "リスト内包記法 変換"}
{"in": "[dct for dct in listA if dct.items() >= dictA.items()]", "out": "辞書内包記法"}
{"in": "match = re.match('(\\\\w+\\\\s\\\\w+)', test)", "out": "正規表現"}
{"in": "return {(x + 1) for x in l}", "out": "辞書内包記法"}
{"in": "Parallel(n_jobs=2)(delayed(foo)(parameters) for x in range(i, j))", "out": "リスト内包記法 変換"}
{"in": "super(MyModel, self).clean(*args, **kwargs)", "out": "引数展開"}
{"in": "words = ['hello', 'world', 'you', 'look', 'nice']\n\"\"\", \"\"\".join('\"{0}\"'.format(w) for w in words)", "out": "辞書内包記法 リストの文字列化"}
{"in": "contents = ''.join([str(item) for item in notices.contents])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "curs.execute('select first_name from people')\nnames = [row[0] for row in curs.fetchall()]", "out": "リスト内包記法 変換"}
{"in": "board = [([0] * 3) for _ in range(3)]", "out": "リスト内包記法 変換"}
{"in": "result = [list(map(player, group)) for level, group in groups]", "out": "リスト内包記法 変換"}
{"in": "out = [(x, y, z, c) for (x, y, z), c in zip(a, h)]", "out": "リスト内包記法 変換"}
{"in": "velocity = np.array([[dx_dt[i], dy_dt[i]] for i in range(dx_dt.size)])", "out": "リスト内包記法 変換"}
{"in": "all(i.isalpha() or i == ' ' for i in 'test    string')", "out": "リスト内包記法 変換"}
{"in": "l = [x.split('\\t')[-1] for x in l]\n['0238.94', '2.3904', '0139847', '']", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "name[0][0][-1]", "out": "末尾の要素"}
{"in": "a = [x[:] for x in repeat([0] * cols, rows)]", "out": "リスト内包記法 変換"}
{"in": "return [atoi(c) for c in re.split('(\\\\d+)', text)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "return [vector.index(x) for x in sorted(list(range(n)), key=vector.__getitem__)]", "out": "リスト内包記法 変換"}
{"in": "movie_tuples = [tuple(map(d.get, fields)) for d in movie_dicts]", "out": "辞書内包記法"}
{"in": "L = [np.arange(start[i], stop[i]) for i in range(ndims)]", "out": "リスト内包記法 変換"}
{"in": "res = [f.name for f in message.DESCRIPTOR.fields]", "out": "リスト内包記法 変換"}
{"in": "super().__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(''.join(rl))", "out": "リストの文字列化"}
{"in": "return [x for x in iter if is_even(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "print(', '.join([(str(n) + '-' + str(next(iranges))) for n in iranges]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return func(*args)", "out": "引数展開"}
{"in": "data = numpy.fromfile(my_file, dtype=numpy.uint8).reshape(-1, N)\nstreams = [data[:, (stream_index == i)].ravel() for i in range(k)]", "out": "リスト内包記法 変換"}
{"in": "m = re.match('(.*?)/(.*?)/$', data)", "out": "正規表現"}
{"in": "m = re.match('@(\\\\w+)@', data)", "out": "正規表現"}
{"in": "srcs = [src[2] for src in list_of_all]", "out": "リスト内包記法 変換"}
{"in": "map(mydict.get, [k for k in list(mydict.keys()) if k >= 6])", "out": "辞書内包記法"}
{"in": "'\\u044e\\u0443 \\u0441\\u043e \\u0431\\u0435\\u0443\\u0442\\u0438\\u0444\\u0443\\u043b'", "out": "ユニコード"}
{"in": "assert np.allclose(s, [r.sum() for r in results])", "out": "リスト内包記法 変換"}
{"in": "maxlength = max(len(s) for s in stringlist)", "out": "リスト内包記法 変換"}
{"in": "userdata['data'] = [gen_user() for i in range(0, 5)]", "out": "リスト内包記法 変換"}
{"in": "return [[(e - d) for d in l] for e in l]", "out": "リスト内包記法 変換"}
{"in": "print([''.join(g) for g in next(it)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(sum(1 for x in range(1000000) if my_condition(x)))", "out": "リスト内包記法 フィルタ"}
{"in": "df.iloc[[p] + [i for i in range(len(df)) if i != p]]", "out": "リスト内包記法 フィルタ"}
{"in": "lst = [(word[0].upper() + word[1:]) for word in s.split()]", "out": "リスト内包記法 変換"}
{"in": "self.g[key] if key in self.g else None", "out": "三項演算子"}
{"in": "theArray = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nzip(*theArray)", "out": "引数展開"}
{"in": "data.sort(key=lambda data: [alphabet.index(c) for c in data[0]])", "out": "リスト内包記法 変換"}
{"in": "res = [x for x in res if x.size > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "re_pattern = re.compile('[^\\x00-\\ud7ff\\ue000-\\uffff]', re.UNICODE)", "out": "正規表現 ユニコード"}
{"in": "np.core.defchararray.replace(df.values.astype(str), ' ', '_'),", "out": "正規表現"}
{"in": "a = np.array([sum(row * weights) for row in values])", "out": "リスト内包記法 変換"}
{"in": "return ''.join(letters).lower() in ascii_lowercase", "out": "リストの文字列化"}
{"in": "return all(len(b) == 3 for b in a)", "out": "リスト内包記法 変換"}
{"in": "print(''.join(map(str, div.contents)))", "out": "リストの文字列化"}
{"in": "return max(i[j] for i in l)", "out": "リスト内包記法 変換"}
{"in": "ismatch(re.search('\\\\[', two))", "out": "正規表現"}
{"in": "re.sub('%\\\\s?' + key + '\\\\s?%', value, text)", "out": "正規表現"}
{"in": "print('{time_str:<10} -> {diff!s:>20} <{diff!r}>'.format(**vars()))", "out": "引数展開"}
{"in": "to_remove = [i for i, val in enumerate(x) if len(val) == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "mcurr = location_re.search(currline)", "out": "正規表現"}
{"in": "[(x + y) for x in 'cat' for y in 'potty']\n[(x + y) for x in 'catty' for y in 'pot']", "out": "リスト内包記法 変換"}
{"in": "super(Animal, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "c.writerow([cell.value for cell in r])", "out": "リスト内包記法 変換"}
{"in": "wcswidth('A\\u0332\\u0305BC')", "out": "ユニコード"}
{"in": "return [(a - b) for a, b in zip(dividers + [total], [0] + dividers)]", "out": "リスト内包記法 変換"}
{"in": "index = [slice(0, 3), slice(5, 6)]\nprint([s[i] for i in index])", "out": "リスト内包記法 変換"}
{"in": "list1 = [int(x) for x in list1]", "out": "リスト内包記法 変換"}
{"in": "{k: min(i for i in (h1.get(k), h2.get(k)) if i) for k in h1.keys() | h2}", "out": "辞書内包記法"}
{"in": "return self.func(*(args + self.args), **kwargs)", "out": "引数展開"}
{"in": "zip(assignment, *grades)", "out": "引数展開"}
{"in": "int_docs_info = {int(k): v for k, v in list(docss_info.items())}", "out": "辞書内包記法"}
{"in": "xval, yval, zval = [int(s) for s in file.split('-')]", "out": "リスト内包記法 変換"}
{"in": "print(timeit.timeit(\"int(''.join(reversed(bin(n)[2:])),2)\", 'n = 123456'))", "out": "リストの文字列化"}
{"in": "class cyclist(list):\n\n    def __getitem__(self, index):\n        return list.__getitem__(self, index % len(self))\n\ndef __getslice__(self, start, stop):\n    return [self[n] for n in range(start, stop)]\nfoo = cyclist([1, 2, 3])\nprint(foo[0:2])\nprint(foo[7:13])\nprint(foo[0:5])", "out": "リスト内包記法 変換"}
{"in": "return ','.join(matches)", "out": "リストの文字列化"}
{"in": "sum(chain(*my_list))", "out": "引数展開"}
{"in": "answer = re.sub('\\\\w+:\\\\s?', '', blah)", "out": "正規表現"}
{"in": "[_f for _f in map(f, string) if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "return ((n,) + t for n, t in enumerate(zip(*iterables)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "a = next((i for i in userInput if i in wordsTask), 42)", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(name + '\\t' + value + '\\t' for name, value in values)[:-1]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "AB = [(a + b) for a, b in zip(A, B)]", "out": "リスト内包記法 変換"}
{"in": "class EnsembleClassifier(BaseEstimator, ClassifierMixin):\n\n    def __init__(self, classifiers=None):\n        self.classifiers = classifiers\n\ndef fit(self, X, y):\n    for classifier in self.classifiers:\n        classifier.fit(X, y)\n\ndef predict_proba(self, X):\n    self.predictions_ = list()\nfor classifier in self.classifiers:\n    self.predictions_.append(classifier.predict_proba(X))\nreturn np.mean(self.predictions_, axis=0)", "out": "辞書内包記法"}
{"in": "super(FooForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "curated_text = [re.sub('_\\\\S*', '', a) for a in text]", "out": "リスト内包記法 変換 正規表現"}
{"in": "result = dict(defaults, **request)", "out": "引数展開"}
{"in": "[list(g) for _, g in groupby(numbers, lambda x: x // 10)]", "out": "リスト内包記法 変換"}
{"in": "[estimator.tree_.max_depth for estimator in forest.estimators_]", "out": "リスト内包記法 変換"}
{"in": "re.findall(p, test_str)", "out": "正規表現"}
{"in": "return tuple(it.chain(*base_lists))", "out": "引数展開"}
{"in": "return sorted([[x, y] for x, y in list(distances.items())], key=lambda x: x[0])", "out": "リスト内包記法 変換"}
{"in": "return [(a[i] - a[i + 1]) for i in range(len(a) - 1)]", "out": "リスト内包記法 変換"}
{"in": "ls = [(x if condition else None) for x in ls]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "np.arange(2 ** 31 - 1).size", "out": "累乗演算子"}
{"in": "print(letters[:i] + letters[i::-1])", "out": "逆順の列"}
{"in": "authors = re.findall('^\\\\s*(.+?)\\\\s*$', authors, re.MULTILINE)", "out": "正規表現"}
{"in": "[c for i in range(1, len(data) + 1) for c in combinations(data, i)]", "out": "リスト内包記法 変換"}
{"in": "self.connect(entry, QtCore.SIGNAL('triggered()'), self.do_stuff_caller(item))", "out": "正規表現"}
{"in": "imgtag = re.match('<img.*?>', line)\nif imtag:\n    pass", "out": "正規表現"}
{"in": "example = [['string 1', 'a\\r\\ntest string:'], ['string 1',\n    'test 2: another\\r\\ntest string']]\nexample = [[x.replace('\\r\\n', '') for x in l] for l in example]\nprint(example)", "out": "リスト内包記法 変換"}
{"in": "re.sub('est$', '', word1)", "out": "正規表現"}
{"in": "reader = csv.reader(input, **options)", "out": "引数展開"}
{"in": "f.write(';'.join(item) + os.linesep)", "out": "リストの文字列化"}
{"in": "return super(MyModelManager, self).filter(**kwargs)", "out": "引数展開"}
{"in": "re.findall('[A-Z][a-z]*', 'TheLongAndWindingRoad')", "out": "正規表現"}
{"in": "\"\"\"\t\"\"\".join(str(item) for item in your_list)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "super(StaticStorage, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return [x for x, y, z in G]", "out": "リスト内包記法 変換"}
{"in": "print(line.rstrip()[::-1])", "out": "逆順の列"}
{"in": "re.findall('\\\\w+[.]\\\\w+(?=@)', s)\nre.findall('(\\\\w+[.]\\\\w+)@', s)", "out": "正規表現"}
{"in": "divisibleBySeven = [num for num in inputList if num != 0 and num % 7 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "uncomment('~/.bashrc', '^#force_color_prompt=yes', char='#')", "out": "反転演算子"}
{"in": "print(''.join(matched))", "out": "リストの文字列化"}
{"in": "c_array[:] = chain(p for p in points)", "out": "リスト内包記法 変換"}
{"in": "farm[-1].append(val)", "out": "末尾の要素"}
{"in": "[str(i) for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n\"\"\" + \"\"\".join(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.search(p, 'aaaa')", "out": "正規表現"}
{"in": "re.search(p, 'bbbb')", "out": "正規表現"}
{"in": "return ' '.join(L)", "out": "リストの文字列化"}
{"in": "with open('C:\\\\Users\\\\...site_1.html', 'r') as f:\n    page = f.read()\ntree = html.fromstring(page)", "out": "ユニコード"}
{"in": "alphabetDict = {char: (0) for char in alphabet}", "out": "辞書内包記法"}
{"in": "s = s[:-1] if s.endswith('\\\\') else s", "out": "三項演算子"}
{"in": "m = [[(row - col) for row in l] for col in l]", "out": "リスト内包記法 変換"}
{"in": "l = [(1, 2), (3, 4), (8, 9)]\nzip(*l)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(reversed(hex_repr))", "out": "リストの文字列化"}
{"in": "[item.strip('\"') for item in reclist.split(',')]", "out": "リスト内包記法 変換"}
{"in": "{k: {k_: v[k_] for k_ in common_keys} for k, v in d.items()}", "out": "辞書内包記法"}
{"in": "return ''.join(random.choice(string.ascii_lowercase) for _ in range(chars))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "a = bitarray(2 ** 20)", "out": "累乗演算子"}
{"in": "average = sum(float(eval(input('Enter a number'))) for i in range(n)) / n", "out": "リスト内包記法 変換"}
{"in": "[del_zeros(L, i) for i in range(5)]", "out": "リスト内包記法 変換"}
{"in": "d[t.tag].update(('@' + k, v) for k, v in list(t.attrib.items()))", "out": "リスト内包記法 変換"}
{"in": "f(**locals())", "out": "引数展開"}
{"in": "\"\"\"Of course, in your position of unofficial adviser and helper to everybody who is absolutely puzzled, throughout three continents, you are brought in contact with all that is strange and bizarre. But here\"\"\"", "out": "正規表現"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(list(set(john.split()) & set(mary.split())))", "out": "リストの文字列化"}
{"in": "x = int(str(x)[::-1])", "out": "逆順の列"}
{"in": "return datetime.strptime(date_str, '%a %b %d %H:%M:%S +0000 %Y')", "out": "日付書式 時刻書式"}
{"in": "print(''.join(buf[j + 1:j + N + 1]))", "out": "リストの文字列化"}
{"in": "scatter_date(data, x='date', y=['col1', 'col2'], datetimeformat='%Y-%m-%d')", "out": "日付書式"}
{"in": "d[k] = tuple(d[k] for d in ds)", "out": "リスト内包記法 変換"}
{"in": "assert codepoint_count('hello \\ud83d\\udc4d') == 7", "out": "ユニコード"}
{"in": "b = word in (w for i, w in enumerate(wordList) if i not in ignore)", "out": "リスト内包記法 フィルタ"}
{"in": "return all(isinstance(i, int) for i in l)", "out": "リスト内包記法 変換"}
{"in": "foo_vars = {id(instance): instance.foo for instance in A.instances}", "out": "辞書内包記法"}
{"in": "ax.scatter(X, [1] * len(X), c=values, marker='s', s=100)\nfig.autofmt_xdate()\nax.yaxis.set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.xaxis.set_ticks_position('bottom')\nax.get_yaxis().set_ticklabels([])\nday = pd.to_timedelta('1', unit='D')\nplt.xlim(X[0] - day, X[-1] + day)\nplt.show()", "out": "末尾の要素"}
{"in": "print('\\n'.join(' '.join(map(str, t)) for t in tuples))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "stocks = [x.rstrip() for x in stocks]", "out": "リスト内包記法 変換"}
{"in": "[digit_sum(n) for n in [1, 3, 999, 10, 234, 1234132341]]", "out": "リスト内包記法 変換"}
{"in": "new_lines = [(line.strip() if line == '\\n' else line) for line in lines]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "pd.concat([group for _, group in grouped if len(group) > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "Q(question__startswith='Who') | ~Q(pub_date__year=2005)", "out": "反転演算子"}
{"in": "x.reshape(-1, x.shape[-1]).shape", "out": "末尾の要素"}
{"in": "int(string[::2], 2)", "out": "ひとつおきの列"}
{"in": "re.sub('\\\\bfoo\\\\b', cased_replacer('bar'), 'this is foo', flags=re.I)\nre.sub('\\\\bfoo\\\\b', cased_replacer('bar'), 'this is Foo', flags=re.I)", "out": "正規表現"}
{"in": "[[f(v) for v, f in zip(x, funcs)] for x in a]", "out": "リスト内包記法 変換"}
{"in": "os.path.join(*choices)", "out": "引数展開"}
{"in": "ttk.Frame.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "def dispatch(self, *args, **kwargs):\n    pass", "out": "引数展開"}
{"in": "return self(other(*args, **kwargs))", "out": "引数展開"}
{"in": "re.sub('([a-zA-Z0-9])\\\\s+(?=[a-zA-Z0-9])', '\\\\1*', '3 a 5 b')\nre.sub('([a-zA-Z0-9])\\\\s+(?=[a-zA-Z0-9])', '\\\\1*', '3 /a 5! b')", "out": "正規表現"}
{"in": "[x for x in b for b in a]", "out": "リスト内包記法 変換"}
{"in": "d = dict(s.split('=') for s in a)", "out": "辞書内包記法"}
{"in": "index = pd.MultiIndex.from_tuples([item.split('_') for item in df.index])", "out": "リスト内包記法 変換"}
{"in": "lst = ['hey', 'what', 0, False, None, 14]\nprint(sum(x is not None for x in lst))", "out": "リスト内包記法 変換"}
{"in": "re.match(makere(len(inp)), ''.join(inp)).groups()", "out": "正規表現 リストの文字列化"}
{"in": "\"\"\"\"\"\".join(map(str.__add__, s[-2::-2], s[-1::-2]))", "out": "リストの文字列化"}
{"in": "return list(set(chain(*x)))", "out": "引数展開"}
{"in": "a = [1, 2, 3]\nb = [4, 5, 6]\nsum(x * y for x, y in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "len([(1) for _ in takewhile(lambda x: x == a[0], a)])", "out": "リスト内包記法 変換"}
{"in": "output_file.writelines(merge(*files))", "out": "引数展開"}
{"in": "scr.addstr(0, 0, '\\u3042'.encode('utf-8'))", "out": "ユニコード"}
{"in": "fn = lambda x: x if True else lambda x: x * x", "out": "三項演算子"}
{"in": "\"\"\"^(?:(?:[a-z\\\\d\\\\-]{1,100}\\\\~)?(?:(?!\\\\-)[a-z\\\\d\\\\-\\\\.]{1,100}:)?(?!-)[a-z\\\\d\\\\-]{0,99}[a-z\\\\d])$\"\"\"", "out": "反転演算子"}
{"in": "buf = lines[-1]", "out": "末尾の要素"}
{"in": "return '{:.0f}{}'.format(n / 10 ** (3 * millidx), millnames[millidx])", "out": "累乗演算子"}
{"in": "m = re.match('^/by_tag/(?P<tag>\\\\w+)/(?P<filename>(\\\\w|[.,!#%{}()@])+)$',\n    '/by_tag/p\\xc3\\xa5ske/\\xc3\\xb8yfjell.jpg', re.UNICODE)", "out": "正規表現"}
{"in": "return all(x == first for x in it)", "out": "リスト内包記法 変換"}
{"in": "y = lambda : (_ for _ in ()).throw(Exception('foobar'))", "out": "リスト内包記法 変換"}
{"in": "re.compile('\\\\s+', re.U).split(x)", "out": "正規表現"}
{"in": "super(DataModel, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "solve(z ** 2 + (1 + I) * z + (6 + 18 * I), (x, y))", "out": "累乗演算子"}
{"in": "hist([t.hour for t in ts], bins=24)", "out": "リスト内包記法 変換"}
{"in": "any(s in l for l in lines2 for s in search_strings)", "out": "リスト内包記法 変換"}
{"in": "suffixes = set(s[-5:] for s in x)", "out": "リスト内包記法 変換"}
{"in": "print('%r' % sefmtr.format(fmt, *(), **data))", "out": "引数展開"}
{"in": "r = datetime.datetime.strptime(d + '-0', '%Y-W%W-%w')", "out": "日付書式"}
{"in": "savefig('path/to/figure.pdf')", "out": "正規表現"}
{"in": "data = json.loads('...')\nmetros = [Metro(**k) for k in data['metros']]", "out": "リスト内包記法 変換 引数展開"}
{"in": "return next(i for i in x if i['id'] == 20)", "out": "リスト内包記法 フィルタ"}
{"in": "application = django.core.handlers.wsgi.WSGIHandler()", "out": "正規表現"}
{"in": "[x for x in a_list if x[0] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "num_lists = int(input('How many lists do you want? '))\nlists = [[] for i in range(num_lists)]", "out": "リスト内包記法 変換"}
{"in": "zip(l, l[1:])[::2]", "out": "ひとつおきの列"}
{"in": "self.conditions[:] = [helper(c, type, params) for c in self.conditions]", "out": "リスト内包記法 変換"}
{"in": "df1.index = ['_'.join(x) for x in df1.index]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return ''.join([a[x:x + 2] for x in range(0, len(a), 2)][::-1])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "return [parser.parse(x) for x in _split(s)]", "out": "リスト内包記法 変換"}
{"in": "for line in file:\n    line = line.strip()\nllist = line.split()\nif llist and llist[0] == 'NUMS':\n    for line in file:\n        line = line.strip()\nif line == 'END':\n    break\nelse:\n    print(line, end=' ')\nprint()", "out": "リスト内包記法 変換"}
{"in": "ax.plot(xs, ys, *args, **kwargs)", "out": "引数展開"}
{"in": "df1.columns = ['_'.join((x[1], x[0])) for x in df1.columns]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "palindromes = [(x + x[::-1]) for x in permutations(digits, k // 2)]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "return abs(x) % abs(y) * (1 if x > 0 else -1)", "out": "三項演算子"}
{"in": "dict.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "return [dict(pairs) for pairs in unique]", "out": "辞書内包記法"}
{"in": "f.write(' '.join(map(str, a)))", "out": "リストの文字列化"}
{"in": "any(e for e in test_list if e.startswith('three') or e.endswith('four'))", "out": "リスト内包記法 フィルタ"}
{"in": "ax.set_xlim(*lims[0])", "out": "引数展開"}
{"in": "print(' '.join('{}'.format(k) for k in lst))", "out": "辞書内包記法 リストの文字列化"}
{"in": "super(MyListView, self).get_context_data(**context)", "out": "引数展開"}
{"in": "arr = [[] for _ in range(5)]\narr", "out": "リスト内包記法 変換"}
{"in": "formattedline = ' '.join('%10.6f' % F for F in aa[(ii), :])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "m = re.search(pattern, text)", "out": "正規表現"}
{"in": "yield b[0][1], b[-1][1]", "out": "末尾の要素"}
{"in": "return zip(*grid)", "out": "引数展開"}
{"in": "a = [[i] for i in range(5)]", "out": "リスト内包記法 変換"}
{"in": "df.index[:-1].union([df.index[-1] + pd.offsets.MonthEnd(0)])", "out": "末尾の要素"}
{"in": "[(b - a) for a, b in pairwise(L)]", "out": "リスト内包記法 変換"}
{"in": "return [random.randint(low, high) for _ in range(count)]", "out": "リスト内包記法 変換"}
{"in": "results = [x for x in json_object['results'] if 'year' in x]\nsorted(results, key=lambda x: x['year'])", "out": "リスト内包記法 フィルタ"}
{"in": "ind = [i[0] for i in sorted(enumerate(b), key=lambda x: x[1])]", "out": "リスト内包記法 変換"}
{"in": "self._handle(*args, **options)", "out": "引数展開"}
{"in": "a[::2] = [-1, -2]", "out": "ひとつおきの列"}
{"in": "[list(filter(str.isalpha, word)) for word in s.lower().split() if word[0].isalpha()]", "out": "リスト内包記法 フィルタ"}
{"in": "return [double(x) for x in li]", "out": "リスト内包記法 変換"}
{"in": "f_out.writelines(word + '\\n' for word in bases(words))", "out": "リスト内包記法 変換"}
{"in": "c = a[::2]", "out": "ひとつおきの列"}
{"in": "return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))", "out": "リスト内包記法 変換"}
{"in": "name = 'Spongebob Squarepants'\nprint('Who lives in a Pineapple under the sea? {name!s}.'.format(**locals()))", "out": "引数展開"}
{"in": "return self.vaue if isinstance(self, Just) else default", "out": "三項演算子"}
{"in": "set(x for x in hello if hello.count(x) == m)", "out": "リスト内包記法 フィルタ"}
{"in": "return df[~df.col.str.get(0).isin(['t', 'c'])]", "out": "反転演算子"}
{"in": "l = [1, 2, 3, 7]\nprint(''.join([str(x) for x in l]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.findall(p, test_str)", "out": "正規表現"}
{"in": "Counter((type(x), x) for x in arr)", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\ba\\\\+\\\\s', 'aplus ', 'I passed my a+ exam.')", "out": "正規表現"}
{"in": "b = {name: a[name] for name in a.dtype.names}", "out": "辞書内包記法"}
{"in": "assert False, 'I mean for this to fail'", "out": "リスト内包記法 変換"}
{"in": "(-1.07 + 0j) ** 1.3", "out": "累乗演算子"}
{"in": "return '-${:,.2f}'.format(abs(value))", "out": "少数点表示制限"}
{"in": "n = [x for x in n if x in string.whitespace or x not in string.printable]", "out": "リスト内包記法 フィルタ"}
{"in": "listView = next(c for c in controls if c.name == 'ListView')", "out": "リスト内包記法 フィルタ"}
{"in": "[counts[w] for w in word_list]", "out": "リスト内包記法 変換"}
{"in": "def func(num, start, end):\n    return num if start < num < end else start if num <= start else end", "out": "三項演算子"}
{"in": "return f(*args)", "out": "引数展開"}
{"in": "data = [td.text for td in row.find_all('td') if td.text]", "out": "リスト内包記法 フィルタ"}
{"in": "return [e for e in l if e % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "print(next([x for x in lst if x % 3 == 0]))", "out": "リスト内包記法 フィルタ"}
{"in": "return [x for x, y in list(collections.Counter(l).items()) if y > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "func(**literal_eval(params))", "out": "引数展開"}
{"in": "any([(i in fruit_dict1) for i in fruits])", "out": "辞書内包記法"}
{"in": "output = [(x, y) for x, y, label in L]", "out": "リスト内包記法 変換"}
{"in": "def read_words(words_file):\n    return [word for line in open(words_file, 'r') for word in line.split()]", "out": "リスト内包記法 変換"}
{"in": "result.append(''.join(map(str, [a, b, c, d, e, f])))", "out": "リストの文字列化"}
{"in": "return [(item * 2) for item in x]", "out": "リスト内包記法 変換"}
{"in": "stocks = [x.replace('\\r\\n', '') for x in stocks]", "out": "リスト内包記法 変換"}
{"in": "z = 'abc'.strip(x + y) if x != y else None", "out": "三項演算子"}
{"in": "l = [1.565888, 2.073744, 2.962492, 4.52838, 5.417127, 7.025337]\n[(a % 1) for a in l]", "out": "リスト内包記法 変換"}
{"in": "sorted(set().union(*list(results[env].values())), key=str.lower)", "out": "引数展開"}
{"in": "return obj.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "[x for x in fileList if x['fileName'] == 'filename2.typ'][0]['fileMod']", "out": "リスト内包記法 フィルタ"}
{"in": "values = ['2014', '08', '17', '18', '01', '05']\nnewdate = datetime.datetime(*map(int, values))", "out": "引数展開"}
{"in": "abc = lambda *args, **kwargs: myFunction(*args, **kwargs)", "out": "引数展開"}
{"in": "def removeNonAscii(s):\n    return ''.join(i for i in s if ord(i) < 128)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "super(Extension, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return [''.join(i) for i in permutations(letters)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "(x + 3 for x in mylist)", "out": "リスト内包記法 変換"}
{"in": "myString = '\\u010ce\\u010densko'", "out": "ユニコード"}
{"in": "return lambda *args, **kwargs: when.__match(func, *args, **kwargs)", "out": "引数展開"}
{"in": "new2 = np.array([block.T for block in blocks]).T", "out": "リスト内包記法 変換"}
{"in": "text = '\\n'.join(lines)", "out": "リストの文字列化"}
{"in": "mystring = 'collapse    these       spaces'\nmycollapsedstring = ' '.join(mystring.split())\nprint(mycollapsedstring.split(' '))", "out": "リストの文字列化"}
{"in": "[k for k in paragraphs3 if 'Derived:' in k[2]]", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(self.fed)", "out": "リストの文字列化"}
{"in": "gen_move(list(range(10))[::-1])", "out": "逆順の列"}
{"in": "browser.find_elements_by_css_selector('.morered')[-1].click()", "out": "末尾の要素"}
{"in": "print('Waiting for connection to reach NM_ACTIVE_CONNECTION_STATE_ACTIVATED state ...')", "out": "リスト内包記法 変換"}
{"in": "print('Sleeping for 5 seconds ...')", "out": "リスト内包記法 変換"}
{"in": "\"\"\"{hello} {0}\"\"\".format(d['with:colon'], **d)", "out": "引数展開"}
{"in": "balloon_tip('Title for popup', \"This is the popup's message\")", "out": "リスト内包記法 変換"}
{"in": "ids = [d['id'] for d in lst if 'id' in d]", "out": "リスト内包記法 フィルタ"}
{"in": "with open('my_very_large_text_file') as f:\n    for line in f:\n        process(line)", "out": "リスト内包記法 変換"}
{"in": "res = next(idx for idx, (x, y) in coupled_idx if x != y)", "out": "リスト内包記法 フィルタ"}
{"in": "now = date(*map(int, date_string.split('-')))", "out": "引数展開"}
{"in": "c3 = [list([x for x in sublist if x in c1]) for sublist in c2]", "out": "リスト内包記法 フィルタ"}
{"in": "vals = [g(i) for i in range(100)]", "out": "リスト内包記法 変換"}
{"in": "ticks = ax.set_xticklabels([d.strftime('%a') for d in data.index])", "out": "リスト内包記法 変換"}
{"in": "new_b = ' # '.join(filtered_b_elements)", "out": "リストの文字列化"}
{"in": "v = [1, 2, 3, 4, 3, 1, 2]\nany([2, 3] == v[i:i + 2] for i in range(len(v) - 1))", "out": "リスト内包記法 変換"}
{"in": "numbers = [aux[x] for x in row]", "out": "リスト内包記法 変換"}
{"in": "data = '437c2123'\n\"\"\"\"\"\".join(chr(int(data[i:i + 2], 16)) for i in range(0, len(data), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "qPlg.append(QPointF(*p))", "out": "引数展開"}
{"in": "np.asarray(0 for i in range(10))", "out": "リスト内包記法 変換"}
{"in": "a[-1].append(5)", "out": "末尾の要素"}
{"in": "result = template.render(**export_dict)", "out": "引数展開"}
{"in": "return [[i for i in sublist if i < n][:5] for sublist in ls]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[a-zA-Z ]', b) == list(b)", "out": "正規表現"}
{"in": "len(df[~pd.to_datetime(df.index).isin(dropThis)])", "out": "反転演算子"}
{"in": "return [c.__name__ for c in cls.__subclasses__()]", "out": "リスト内包記法 変換"}
{"in": "thirdlist = [listName.index(x[:x.find('_')]) for x in listNameAge]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"dict((c, string.count(c)) for c in string)\"\"\"", "out": "辞書内包記法"}
{"in": "tk.Frame.__init__(self, parent, *args, **kwargs)", "out": "引数展開"}
{"in": "time.strftime('%Y.%m.%d', time.gmtime(t.astype(int) / 1000000000))", "out": "日付書式"}
{"in": "pprint({k: getattr(creator.__code__, k) for k in dir(creator.__code__)})", "out": "辞書内包記法"}
{"in": "logger.debug('Waiting for connection')", "out": "リスト内包記法 変換"}
{"in": "logger.debug('Waiting for server address')", "out": "リスト内包記法 変換"}
{"in": "return (d[i] for i in k)", "out": "リスト内包記法 変換"}
{"in": "print('Error changing password for ' + login)", "out": "リスト内包記法 変換"}
{"in": "all(x in dct for x in ('foo', 'bar', 'baz'))", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('(ab|a|1|2)')", "out": "正規表現"}
{"in": "[x for t in zip(a, reversed(a)) for x in t][:len(a)]", "out": "リスト内包記法 変換"}
{"in": "m = re.match('(((\\\\d+)?\\\\s+)?(\\\\w+)?\\\\s+)?(\\\\d{3,})', data)", "out": "正規表現"}
{"in": "OrderedDict.__init__(self, *a, **kw)", "out": "引数展開"}
{"in": "set.intersection(*sets)", "out": "引数展開"}
{"in": "return np.where(x ** 2 + y ** 2 > 1e-10, x * y / (x ** 2 + y ** 2), 0.5)", "out": "累乗演算子"}
{"in": "\"\"\"\"\"\".join(vbmap.get(c, c) for c in s if c not in volString)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "return (Convert(i, base) for i in range(start, end, step))", "out": "リスト内包記法 変換"}
{"in": "ds[[('wiki' in s) for s in ds.index]]", "out": "リスト内包記法 変換"}
{"in": "picture.getpixel((x, y))", "out": "正規表現"}
{"in": "out[:, :, (mask)] = B[:, :, :, ::-1][:, :, (mask[:, ::-1])]", "out": "逆順の列"}
{"in": "return int(''.join(re.findall('\\\\d*', str)))", "out": "正規表現 リストの文字列化"}
{"in": "return dict((k, v[v < 0].to_dict()) for k, v in compat.iteritems(data))", "out": "辞書内包記法"}
{"in": "first = [x for x, y in data]\nsecond = [y for x, y in data]", "out": "リスト内包記法 変換"}
{"in": "re.search('a{1,65535}', 'aaa')\nre.search('a{1,65536}', 'aaa')", "out": "正規表現"}
{"in": "d1 = datetime.strptime(d1, '%Y-%m-%d')", "out": "日付書式"}
{"in": "argsdict = {'name': 'Joe', 'family': 'Brand'}\nglobals()['fullName'](**argsdict)", "out": "引数展開"}
{"in": "return min((x for x in seq if x is not None), default=None)", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('\\\\d+\\\\.*\\\\d*', 'some 12 12.3 0 any text 0.8')", "out": "正規表現"}
{"in": "theIP = re.findall('\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}.\\\\d{1,3}', request)[0]", "out": "正規表現"}
{"in": "[[x0, y0] for x0 in x for y0 in y]", "out": "リスト内包記法 変換"}
{"in": "forms = [f for f in br.forms()]", "out": "リスト内包記法 変換"}
{"in": "evensList = [x for x in myList if x % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "new_row[-1] = new_row[-1].replace('or ', '')", "out": "末尾の要素"}
{"in": "nums = [int(line) for line in open('numbers.txt', 'r')]\nmin_num, max_num = min(nums), max(nums)", "out": "リスト内包記法 変換"}
{"in": "queries &= Q(**{key: options[key]})", "out": "引数展開"}
{"in": "j = re.sub('(\\\\w):', '\\\\1\":', j)", "out": "正規表現"}
{"in": "return f(*args, **kwargs)", "out": "引数展開"}
{"in": "print(sum(len(mystr) for mystr in strings))", "out": "リスト内包記法 変換"}
{"in": "ax.figure.canvas.draw()", "out": "正規表現"}
{"in": "with open('A.txt') as file_a:\n    words = {line.strip() for line in file_a}", "out": "辞書内包記法"}
{"in": "f.write(''.join(sublist))", "out": "リストの文字列化"}
{"in": "ll = list(itertools.chain.from_iterable((e, e) for e in l))", "out": "リスト内包記法 変換"}
{"in": "allTrue = all(somePredicate(elem) for elem in someIterable)\nanyTrue = any(somePredicate(elem) for elem in someIterable)", "out": "リスト内包記法 変換"}
{"in": "'\\u2103'", "out": "ユニコード"}
{"in": "initial_array += increments[::-1].cumsum()[::-1]", "out": "逆順の列"}
{"in": "l1 = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4], [5, 9]]\nl2 = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4], [5, 6], [1, 2]]\n[list(x) for x in set(tuple(x) for x in l1).intersection(set(tuple(x) for x in\n    l2))]", "out": "リスト内包記法 変換"}
{"in": "entry_list = [entry.title.text for entry in feed.entry]", "out": "リスト内包記法 変換"}
{"in": "print([1, 0] in chain(*sample))", "out": "引数展開"}
{"in": "def remove_control_characters(s):\n    return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "def changeWord(word):\n    for letter in word:\n        if letter != 'i':\n            word = word.replace(letter, '!')\nreturn word", "out": "リスト内包記法 フィルタ"}
{"in": "print(' '.join(map(str, table)))", "out": "リストの文字列化"}
{"in": "yield [seq[a:b] for a, b in zip(indices, indices[1:])]", "out": "リスト内包記法 変換"}
{"in": "str = 'h3110 23 cat 444.4 rabbit 11 2 dog'\n[int(s) for s in str.split() if s.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "Y = Y + Z[::-1] - Z[-1]", "out": "逆順の列 末尾の要素"}
{"in": "arr = [[2, 0, 3], [4, 2, 3], [1, 0, 3]]\nany(x[1:] == x[:-1] for x in zip(*arr))", "out": "リスト内包記法 変換 引数展開"}
{"in": "myunicode = 'i\\u015f\\u011f\\xfc\\u0131'\nprint('length of {0} is {1}'.format(repr(myunicode), len(myunicode)))", "out": "ユニコード"}
{"in": "g = (i for i in a + b)", "out": "リスト内包記法 変換"}
{"in": "return ''.join(result)", "out": "リストの文字列化"}
{"in": "ax.set_yticks(np.arange(0, 9, 2) ** 2)", "out": "累乗演算子"}
{"in": "list(10 ** pos * val for pos, val in enumerate(reversed(test)))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "Wire.write(number)", "out": "正規表現"}
{"in": "ax.figure.canvas.draw()", "out": "正規表現"}
{"in": "return self._callfunc(self, *args, **kwargs)", "out": "引数展開"}
{"in": "[{'node_id': next(ii), 'left': x[0], 'right': x[1]} for x in w[0]]", "out": "辞書内包記法"}
{"in": "d = {k: [] for k in range(10)}", "out": "辞書内包記法"}
{"in": "_digits = re.compile('\\\\d')", "out": "正規表現"}
{"in": "[my_function(line) for line in f]", "out": "リスト内包記法 変換"}
{"in": "regex2 = re.compile('(?i)%s' % '|'.join(booleans))", "out": "正規表現 リストの文字列化"}
{"in": "c = {v: k for k, v in list(a.items())}", "out": "辞書内包記法"}
{"in": "all(k in dic2 for k in dic1) and all(k in dic1 for k in dic2)", "out": "リスト内包記法 変換"}
{"in": "s = re.sub('DE', '--', s)", "out": "正規表現"}
{"in": "p = re.compile('-(?!(?:aa|bb)-)([^-]+)(?=-)')", "out": "正規表現"}
{"in": "line_list = [line for line in filtered_soup]", "out": "リスト内包記法 変換"}
{"in": "[d[:4] for d in MyArray]", "out": "リスト内包記法 変換"}
{"in": "return {a[d]: todict([x for x in X if x[d] == a[d]], d + 1) for a in lst}", "out": "辞書内包記法"}
{"in": "xticks[-1].label1.set_visible(False)", "out": "末尾の要素"}
{"in": "return '-'.join((s[:4], s[4:6], s[6:]))", "out": "リストの文字列化"}
{"in": "print(', '.join('%s: %s' % item for item in list(attrs.items())))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[{item.tag: item.text for item in ch} for ch in tree.findall('file')]", "out": "辞書内包記法"}
{"in": "df['e-mail'] = [x.split('|')[0] for x in df.index]", "out": "リスト内包記法 変換"}
{"in": "st = datetime.strptime(st, '%A %d %B %H %M')", "out": "時刻書式"}
{"in": "app.logger.warning('A value for warning')", "out": "リスト内包記法 変換"}
{"in": "[c for c in foo if c not in temp and (temp.add(c) or True)]", "out": "リスト内包記法 フィルタ"}
{"in": "super(DirectorInlineForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "raise ValueError('Wrong length given for list')", "out": "リスト内包記法 変換"}
{"in": "pylab.scatter([p[0] for p in pp], [p[1] for p in pp])", "out": "リスト内包記法 変換"}
{"in": "video_length = lambda video: re.compile('length_seconds=(.*?)\\\\\\\\', re.S\n    ).search(urllib.request.urlopen(video).read()).group(1).strip()", "out": "正規表現"}
{"in": "triplets = [set(x) for x in triplets]", "out": "リスト内包記法 変換"}
{"in": "r = [int(a) for a in r.split(':')]", "out": "リスト内包記法 変換"}
{"in": "return [i for i, ltr in enumerate(s) if ltr == ch]", "out": "リスト内包記法 フィルタ"}
{"in": "text = '42 0'\nnums = [int(n) for n in text.split()]", "out": "リスト内包記法 変換"}
{"in": "f.write('\\n'.join([str(n) for n in args]) + '\\n')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "sum_over_n[(-1) ** n * x ** (2 * n) / math.factorial(2 * n)]", "out": "累乗演算子"}
{"in": "with open('my_words.txt') as infile:\n    lines = 0\nwords = 0\ncharacters = 0\nfor line in infile:\n    wordslist = line.split()\nlines = lines + 1\nwords = words + len(wordslist)\ncharacters += sum(len(word) for word in wordslist)\nprint(lines)\nprint(words)\nprint(characters)", "out": "リスト内包記法 変換"}
{"in": "any(i in '<string>' for i in '123')\nany(i in '<string>' for i in ('11', '22', '33'))", "out": "リスト内包記法 変換"}
{"in": "print(''.join(getAllTheLetters()) == string.lowercase)", "out": "リストの文字列化"}
{"in": "[x for x in s if not x in rm]", "out": "リスト内包記法 フィルタ"}
{"in": "def countnonoverlappingrematches(pattern, thestring):\n    return re.subn(pattern, '', thestring)[1]", "out": "正規表現"}
{"in": "df = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in list(sample.items())]))", "out": "辞書内包記法"}
{"in": "split_list = [listo[i:i + n] for i in range(0, len(listo), n)]", "out": "リスト内包記法 変換"}
{"in": "variable = int(stringToInt) if stringToInt else None", "out": "三項演算子"}
{"in": "paragraphs = re.split('\\\\n\\\\n', DATA)", "out": "正規表現"}
{"in": "dateparse = lambda x: pd.datetime.strptime(x, '%m/%d/%Y')", "out": "日付書式"}
{"in": "[unicodedata.name(s_).split(' ')[-1] for s_ in s]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint([mylist[i:i + 4] for i in range(0, len(mylist), 4)])", "out": "リスト内包記法 変換"}
{"in": "print('\\\\u0e4f\\\\u032f\\\\u0361\\\\u0e4f'.decode('unicode-escape'))", "out": "ユニコード"}
{"in": "(-1.07) ** (1.3 + 0j)", "out": "累乗演算子"}
{"in": "matches.extend(os.path.join(dirpath, x) for x in dirnames + filenames)", "out": "リスト内包記法 変換"}
{"in": "x = sum(similarity(i, j) for i in a for j in b)", "out": "リスト内包記法 変換"}
{"in": "dirs = [entry.path for entry in os.scandir('Tools') if entry.is_dir()]", "out": "リスト内包記法 フィルタ"}
{"in": "re.match('^[a-zA-Z0-9_.-]+$', '    ')", "out": "正規表現"}
{"in": "return math.sqrt((self.x - x) ** 2 + (self.y - y) ** 2 + (self.z - z) ** 2)", "out": "累乗演算子"}
{"in": "for i, item in enumerate(mylist):\n    mylist[i] = item ** 2", "out": "累乗演算子"}
{"in": "QtCore.QObject.connect(a, QtCore.SIGNAL('QtSig()'), pyFunction)\nQtCore.QObject.connect(a, QtCore.SIGNAL('QtSig()'), pyClass.pyMethod)", "out": "正規表現"}
{"in": "set(second_list) - set(x[0] for x in first_list)", "out": "リスト内包記法 変換"}
{"in": "a = [list(item) for item in a]", "out": "リスト内包記法 変換"}
{"in": "m = re.search('(?<=Ingredients: ).+?(?=\\\\.)', text, re.DOTALL)", "out": "正規表現"}
{"in": "example = [[x.replace('\\r\\n', '') for x in l] for l in example]\nprint(example)", "out": "リスト内包記法 変換"}
{"in": "allmenus = [AMENUS() for i in range(0, 3)] + [BMENUS() for i in range(0, 4)]", "out": "リスト内包記法 変換"}
{"in": "maxkey = minkey if maxkey is None else maxkey", "out": "三項演算子"}
{"in": "[item.group(0) for item in re.finditer('([a-z])\\\\1', s, re.I)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "super(MyResource, self).obj_update(bundle, **kwargs)", "out": "引数展開"}
{"in": "path_names = [os.path.basename(path) for path in paths]", "out": "リスト内包記法 変換"}
{"in": "return np.array([row[:num_cols] for row in arr[:num_rows]])", "out": "リスト内包記法 変換"}
{"in": "rms_2 = np.sqrt(np.average(np.einsum('ij,kj->ik', nhat, m) ** 2, axis=-1))", "out": "累乗演算子"}
{"in": "any(t in k for k in df[self.target])", "out": "リスト内包記法 変換"}
{"in": "def findOccurences(s, ch):\n    return [i for i, letter in enumerate(s) if letter == ch]\nfindOccurrences(yourString, '|')", "out": "リスト内包記法 フィルタ"}
{"in": "p = re.compile('(.+?)\\\\1+')", "out": "正規表現"}
{"in": "first_points = [int(i) for i in first_points.split(',')]", "out": "リスト内包記法 変換"}
{"in": "data = [row.split('\\t') for row in inputs]\ndata = np.array(data, dtype='float')", "out": "リスト内包記法 変換"}
{"in": "l = [1, 2, 3, 4, 5]\nl[:] = [(x * 5) for x in l]", "out": "リスト内包記法 変換"}
{"in": "\"\"\", \"\"\".join('='.join(_) for _ in list(mydict.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "arg_text = '(%s)' % re.sub('\\\\.\\\\d+', '<tuple>', '9.0')", "out": "正規表現"}
{"in": "r = [(a, b) for a, b in zip(l, l[1:] + l[:1])]", "out": "リスト内包記法 変換"}
{"in": "any(x is False for x in [a, b, c, d])", "out": "リスト内包記法 変換"}
{"in": "all(isinstance(e, int) and e > 0 for e in [1, 0, 1])", "out": "リスト内包記法 変換"}
{"in": "dicts = [{k: v.lower() for k, v in list(d.items())} for d in messages]", "out": "辞書内包記法"}
{"in": "{k: sum(d[k] for d in dict1) for k in dict1[0]}", "out": "辞書内包記法"}
{"in": "return re.compile('\\\\b({0})\\\\b'.format(w), flags=re.IGNORECASE).search", "out": "正規表現"}
{"in": "regex = re.compile(pat)", "out": "正規表現"}
{"in": "print([([k] + v) for k, v in list(dic.items())])", "out": "リスト内包記法 変換"}
{"in": "nltk.word_tokenize(\"I've found a medicine for my disease.\")", "out": "リスト内包記法 変換"}
{"in": "indexed.where('index in ({0})'.format(','.join(str(x) for x in indexes)))", "out": "辞書内包記法 リストの文字列化"}
{"in": "return f(*args, **kargs)", "out": "引数展開"}
{"in": "return s[:-1] if s.endswith('\\n') else s", "out": "三項演算子"}
{"in": "return ''.join(sorted(comb_))", "out": "リストの文字列化"}
{"in": "bytes = (ord(b) for b in f.read())", "out": "リスト内包記法 変換"}
{"in": "return 1 / sqrt(2 * pi) * exp(-x ** 2 / 2)", "out": "累乗演算子"}
{"in": "df[~(np.abs(df.Data - df.Data.mean()) > 3 * df.Data.std())]", "out": "反転演算子"}
{"in": "FullName = LastName + (', ' + FirstName if FirstName else '')", "out": "三項演算子"}
{"in": "return zip(*([iter(iterable)] * n))", "out": "引数展開"}
{"in": "return [(scores, sum(scores)) for scores in combos]", "out": "リスト内包記法 変換"}
{"in": "print([r['Name'] for r in where('Location=\"Boston\" or Type=\"Primary\"')])", "out": "リスト内包記法 変換"}
{"in": "print('bar' + '\\u2192')", "out": "ユニコード"}
{"in": "return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))", "out": "リスト内包記法 変換"}
{"in": "key = bytes([19, 0, 0, 0, 8, 0])\nkey = ''.join(chr(x) for x in [19, 0, 0, 0, 8, 0])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "arrays = [item[1:] for item in arrays if len(item) > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "print([mylist[i:i + 4] for i in range(0, len(mylist), 4)])", "out": "リスト内包記法 変換"}
{"in": "[(i * j * k) for i, j, k in product(a, b, c)]", "out": "リスト内包記法 変換"}
{"in": "re.compile(\"[^\\\\w']|_\").sub(' ',\n    \"doesn't this _technically_ means it works? na\\xc3\\xafve I am ...\")", "out": "正規表現"}
{"in": "return (item for pair in zip_longest(x, y, default) for item in pair)", "out": "リスト内包記法 変換"}
{"in": "fileout.write(user_id + ',' + ' '.join(tweets) + ',' + sentiment + '\\n')", "out": "リストの文字列化"}
{"in": "[distance(*combo) for combo in combinations(list_of_coords, 2)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "super(AnotherSubClass, self).__init__(x, y, **kwdefaults)", "out": "引数展開"}
{"in": "@app.route('/')\ndef index():\n    content = '\\n     teste\\n   '\nuser = 'Hero'\nreturn render_template('index.html', **locals())", "out": "引数展開"}
{"in": "value.append([x for x in getdatas])", "out": "リスト内包記法 変換"}
{"in": "self._s = dict((k.lower(), k) for k in d)", "out": "辞書内包記法"}
{"in": "matches = [m.group().split('=', 1) for m in matches]", "out": "リスト内包記法 変換"}
{"in": "C0 = np.array([(A[i] * B[(i), :, :]) for i in range(len(A))])", "out": "リスト内包記法 変換"}
{"in": "return dict(word.split(value_sep, maxsplit=1) for word in lexer)", "out": "辞書内包記法"}
{"in": "app.sendMessage(' '.join(sys.argv[1:]))", "out": "リストの文字列化"}
{"in": "ax.set_xlim(*nx)", "out": "引数展開"}
{"in": "print(chr(ord('\\u0b85')))\nprint(chr(1 + ord('\\u0b85')))", "out": "ユニコード"}
{"in": "output = list({'name': n, 'playing': list(l)} for n, l in list(toutput.items()))", "out": "辞書内包記法"}
{"in": "answer.append([(each - x) for x in l])", "out": "リスト内包記法 変換"}
{"in": "f = open('tracks.txt', 'r')\nlines = [line for line in f if line.strip()]\nf.close()\nlines.sort()", "out": "リスト内包記法 フィルタ"}
{"in": "super(MyServer, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "result = [(x + y) for x, y in product(mylist, mysuffixes)]", "out": "リスト内包記法 変換"}
{"in": "asciiList = [n.encode('ascii', 'ignore') for n in strList]\nh5File.create_dataset('xxx', (len(asciiList), 1), 'S10', asciiList)", "out": "リスト内包記法 変換"}
{"in": "[tuple(int(j) for j in list('{0:03b}'.format(x))) for x in range(8)]", "out": "辞書内包記法"}
{"in": "with open('test.csv', 'r') as textfile:\n    for row in reversed(list(csv.reader(textfile))):\n        pass", "out": "リスト内包記法 変換"}
{"in": "BaseDocTemplate.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "f.write('\\n'.join([','.join(h) for h in zip(*df.columns)]) + '\\n')", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "return list(itertools.chain(*[list_[s[0]:s[1]] for s in slices]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "return [[int(x == y) for x in range(0, n)] for y in range(0, n)]", "out": "リスト内包記法 変換"}
{"in": "write_line(*lines.pop(0).rstrip().split('\\t'))", "out": "引数展開"}
{"in": "s = ':dfa:sif:e'\nfixed = ''.join(s.split(':', 1))", "out": "リストの文字列化"}
{"in": "print(collections.Counter(y for x in listOfLists for y in set(x)))", "out": "リスト内包記法 変換"}
{"in": "results.append(' '.join(words))", "out": "リストの文字列化"}
{"in": "[list(t) for t in zip(*([iter(num_str.split(','))] * 4))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "return [OrderedDict(zip(list_of_keys, row)) for row in spamreader]", "out": "リスト内包記法 変換"}
{"in": "l = [1, 2, 3, 4, 5]\nl2 = l[::2]", "out": "ひとつおきの列"}
{"in": "[x['name'] for x in temp[0]['trends'] if x['name'].startswith('#')]", "out": "リスト内包記法 フィルタ"}
{"in": "return [[(0) for _ in range(length)]]", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(row))", "out": "リストの文字列化"}
{"in": "from django.core.urlresolvers import resolve", "out": "正規表現"}
{"in": "super(B, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "dict1 = {x.split()[0]: x.split()[1] for x in list1}", "out": "辞書内包記法"}
{"in": "print(re.match(regex, line).groups())", "out": "正規表現"}
{"in": "plt.setp(ax1.get_yticklines()[1::2], visible=False)", "out": "ひとつおきの列"}
{"in": "dict2 = dict((item[0], item[1:]) for item in table2)", "out": "辞書内包記法"}
{"in": "nodes = [node() for _ in range(100)]", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('<img.*?/>')", "out": "正規表現"}
{"in": "p = re.compile('^(.*(?={a})|.*?)({a})?(.*(?={b})|.*)({b})?(.*?)$')", "out": "正規表現"}
{"in": "[time.strftime('%b', time.strptime(str(i), '%m')) for i in range(1, 13)]", "out": "リスト内包記法 変換"}
{"in": "sql.append(', '.join(values))", "out": "リストの文字列化"}
{"in": "return sum(x for x, c in list(Counter(args).items()) if c == 1)", "out": "リスト内包記法 フィルタ"}
{"in": "d = dict((k, v) for k, v in list(d.items()) if v >= 10)", "out": "辞書内包記法"}
{"in": "sorted_arr2 = arr2[arr1inds[::-1]]", "out": "逆順の列"}
{"in": "print([key] + map(sum, zip(*value)[1:]))", "out": "引数展開"}
{"in": "x = dict([(k, list(l)) for k in range(1000)])", "out": "辞書内包記法"}
{"in": "print('\\n'.join(get_requirements(*sys.argv[1:])))", "out": "引数展開 リストの文字列化"}
{"in": "counts = collections.Counter(l[1] for l in a)", "out": "リスト内包記法 変換"}
{"in": "print('{:<15}  {:<15}  {:<20} {:<25}'.format(*row))", "out": "引数展開"}
{"in": "t = datetime.datetime(2012, 2, 23, 0, 0)\nt.strftime('%m/%d/%Y')", "out": "日付書式"}
{"in": "cursor.execute('SHOW columns FROM table_name')\nprint([columns[0] for column in cursor.fetchall()])", "out": "リスト内包記法 変換"}
{"in": "print([r.match(string).groups() for string in strings])", "out": "リスト内包記法 変換"}
{"in": "s = re.sub('((?<=,)|^)(?=,|$)', '0', s)", "out": "正規表現"}
{"in": "[x for x in values if x % 2 == 1] + [x for x in values if x % 2 == 0] == values", "out": "リスト内包記法 フィルタ"}
{"in": "new_nums.append(nums[-1])", "out": "末尾の要素"}
{"in": "list3 = [item for item in list1 if item not in list2]", "out": "リスト内包記法 フィルタ"}
{"in": "[date for date in dates if dates.count(date) > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "pattern.match(' '.join(['0f'] * 49))", "out": "リストの文字列化"}
{"in": "return '+'.join('chr(%d)' % ord(c) for c in text)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(np.bincount(i) > 0).sum() for i in data]", "out": "リスト内包記法 変換"}
{"in": "x_sorted, y_sorted = zip(*sorted(zip(x, y), key=lambda a: a[0]))", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(stem for stem in stems if stem not in words)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[item.strip(' <>') for item in _]", "out": "リスト内包記法 変換"}
{"in": "print([max(v) for _, v in itertools.groupby(l, lambda x: x[0])])", "out": "リスト内包記法 変換"}
{"in": "w.setWindowFlags(QtCore.Qt.FramelessWindowHint)", "out": "正規表現"}
{"in": "print(''.join(re.split('([A-Z])', t, maxsplit=4)[7:]))", "out": "正規表現 リストの文字列化"}
{"in": "l\nsorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))", "out": "正規表現"}
{"in": "new_dict = dict((v, [k for k in ks if old_dict[k] == v]) for v in set(vs))", "out": "辞書内包記法"}
{"in": "'\\\\u0e4f\\\\u032f\\\\u0361\\\\u0e4f'.decode('unicode-escape')\nprint('\\\\u0e4f\\\\u032f\\\\u0361\\\\u0e4f'.decode('unicode-escape'))", "out": "ユニコード"}
{"in": "[(x + L2[i]) for i, x in enumerate(L1)]", "out": "リスト内包記法 変換"}
{"in": "if all(i in a for i in b):\n    print('PASS')\nelse:\n    print('FAIL')\nif all(i in a for i in c):\n    print('PASS')\nelse:\n    print('FAIL')", "out": "リスト内包記法 変換"}
{"in": "print([item for sublist in out for item in sublist])", "out": "リスト内包記法 変換"}
{"in": "return (1 / np.sqrt((A[:, (None)] - B) ** 2 + d ** 2)).sum(1)", "out": "累乗演算子"}
{"in": "print('\\n    '.join(s.split('\\n')))", "out": "リストの文字列化"}
{"in": "return tuple(x for sublist in base_lists for x in sublist)", "out": "リスト内包記法 変換"}
{"in": "return ''.join(itertools.chain(*zip(str1, str2)))", "out": "引数展開 リストの文字列化"}
{"in": "L1 = [[1, 2], [3, 4], [5, 6]]\nL2 = [['a', 'b'], ['c', 'd'], ['e', 'f']]\n[(x + y) for x, y in zip(L1, L2)]", "out": "リスト内包記法 変換"}
{"in": "regx = re.compile('[-/]')", "out": "正規表現"}
{"in": "[([item] if not isinstance(item, list) else item) for item in l]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "text = re.sub('(,\\\\s)', ' \\\\1', text)", "out": "正規表現"}
{"in": "text = re.sub(\"('\\\\s)\", ' \\\\1', text)", "out": "正規表現"}
{"in": "text = re.sub('\\\\. *(\\n|$)', ' . ', text)", "out": "正規表現"}
{"in": "d = datetime.strptime('22:30', '%H:%M')", "out": "時刻書式"}
{"in": "if any(item in 'cat' for item in ['a', 'd']):\n    win()", "out": "リスト内包記法 変換"}
{"in": "val = datetime.datetime.strptime(val, '%d %b %Y %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "return zip_longest(fillvalue=fillvalue, *args)", "out": "引数展開"}
{"in": "any(is_subset(d, d1) for d1 in my_list if d1 != d)", "out": "リスト内包記法 フィルタ"}
{"in": "english_words = set(word.strip().lower() for word in word_file)", "out": "リスト内包記法 変換"}
{"in": "df2 = df2[~df2['A'].isin(df12['A'])]", "out": "反転演算子"}
{"in": "print([''.join(g) for g in c])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "connection.send_command(command, *args)", "out": "引数展開"}
{"in": "callable_method(user=user, **{option_name: user_defaults[option_name]})", "out": "引数展開"}
{"in": "nlines = sum(1 for ln in gzip.open('/path/to/file/myfile.gz'))", "out": "リスト内包記法 変換"}
{"in": "function(*params)", "out": "引数展開"}
{"in": "\"\"\"{} {} {} {}\"\"\".format(*bounds)", "out": "引数展開"}
{"in": "[comment.extract() for comment in comments]", "out": "リスト内包記法 変換"}
{"in": "new_dict = {k: d1[k] for k in list(d1.keys()) & wanted_keys}", "out": "辞書内包記法"}
{"in": "\"\"\"path: {path} curr: {curr} prev: {prev}\"\"\".format(**mydict)", "out": "引数展開"}
{"in": "[v for k, v in list(mydict.items()) if k >= 6]", "out": "辞書内包記法"}
{"in": "print('For order 2: %.2f seconds' % time_order2)", "out": "少数点表示制限"}
{"in": "m = re.search(regex, text)", "out": "正規表現"}
{"in": "return int(''.join(sorted(str(n), reverse=True)))", "out": "リストの文字列化"}
{"in": "print(bool(each in halum for halum in mainseq))", "out": "リスト内包記法 変換"}
{"in": "return ' '.join([word_reverse(w) for w in re.split('\\\\s+', s)])", "out": "リスト内包記法 変換 正規表現 リストの文字列化"}
{"in": "return there.sub('', text)", "out": "正規表現"}
{"in": "print([str(b) for b in repo.heads])", "out": "リスト内包記法 変換"}
{"in": "s = ''.join(x for x in r if x.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "return list(itertools.chain(*lst))", "out": "引数展開"}
{"in": "s = 'UserID/ContactNumber'\nre.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()", "out": "正規表現"}
{"in": "a[np.where(~a[:, (-1)].astype(bool))]", "out": "反転演算子"}
{"in": "[a[l[0] + 1:l[1] + 1] for l in zip(e, e[1:])]", "out": "リスト内包記法 変換"}
{"in": "my_dict = {('a', 'c', 'd'): 10, ('b', 'e'): 20}\nnext(v for k, v in list(my_dict.items()) if 'c' in k)", "out": "辞書内包記法"}
{"in": "foo(**d)", "out": "引数展開"}
{"in": "return authlogin(request, *args, **kwargs)", "out": "引数展開"}
{"in": "min(n for n in a if n > 0.7)", "out": "リスト内包記法 フィルタ"}
{"in": "return max([a for a in yourlist if a[2] >= 100], key=itemgetter(1))", "out": "リスト内包記法 フィルタ"}
{"in": "func(*['file1', 'file2', 'file3'])", "out": "引数展開"}
{"in": "columns = dict([(x[0], x[1:]) for x in zip(*allrows)])", "out": "辞書内包記法 引数展開"}
{"in": "def get(self, *args, **kwargs):\n    return self.post(*args, **kwargs)", "out": "引数展開"}
{"in": "print('\\n'.join(s))", "out": "リストの文字列化"}
{"in": "np.array([A2[i, slices[j]] for i, j in zip([0, 1, 2], [0, 1, 0])])", "out": "リスト内包記法 変換"}
{"in": "enumerate(j for j in range(10) if 3 < j and j < 8)", "out": "リスト内包記法 フィルタ"}
{"in": "[unique.append(item) for item in sequence if item not in unique]", "out": "リスト内包記法 フィルタ"}
{"in": "documents = [' '.join([stem(word) for word in sentence.split(' ')]) for\n    sentence in documents]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return -(-x) ** (1 / 3)", "out": "累乗演算子"}
{"in": "return ''.join(c for c in s.lower() if c in letter_set)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[a for a, b in [(2, 3), (4, 5)]]", "out": "リスト内包記法 変換"}
{"in": "return fn(*args, **kwargs)", "out": "引数展開"}
{"in": "super(A_1, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "pattern = re.compile('A\\\\*(.*?)(\\\\*.*?B\\\\*)(.*?)\\\\*')\npattern.sub('A*\\\\3\\\\2\\\\1*', s)", "out": "正規表現"}
{"in": "return func(*a, **kwargs)", "out": "引数展開"}
{"in": "return dict((k, rank_a[k] - i) for i, k in rank_b)", "out": "辞書内包記法"}
{"in": "markers = ['configure.in', 'configure.ac', 'makefile.am']", "out": "正規表現"}
{"in": "[(a if c else b) for item in list]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "def __init__(self, **kwargs):\n    super(Child, self).__init__(**kwargs)", "out": "引数展開"}
{"in": "re.split('\\\\s+and\\\\s+|,(?!\\\\s*Ph\\\\.D\\\\.)\\\\s*',\n    'Joe, Dave, Professional, Ph.D. and Someone else')", "out": "正規表現"}
{"in": "def reverse(sentence):\n    return ' '.join([word[::-1] for word in sentence.split()])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "def way6(theList, theDict):\n    return [item for item in theList if item in theDict]", "out": "リスト内包記法 フィルタ"}
{"in": "print([item for item in flatten(option) if item != ' '])", "out": "リスト内包記法 フィルタ"}
{"in": "cleanedList = [x for x in countries if x != 'nan']", "out": "リスト内包記法 フィルタ"}
{"in": "keys_to_delete = [k for k, v in d.items() if v == val_to_delete]", "out": "リスト内包記法 フィルタ"}
{"in": "return myFunction(*args, **kwargs)", "out": "引数展開"}
{"in": "any(c in badChars for c in yourString)", "out": "リスト内包記法 変換"}
{"in": "myre = re.compile('(.*?):([^-]*)-(.*)')", "out": "正規表現"}
{"in": "return datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%SZ')", "out": "日付書式 時刻書式"}
{"in": "return datetime.strptime(date_string, '%Y-%m-%dT%H:%MZ')", "out": "日付書式 時刻書式"}
{"in": "x = [[int(float(j)) for j in i] for i in x]", "out": "リスト内包記法 変換"}
{"in": "count = len(re.findall('\\\\w+', line))", "out": "正規表現"}
{"in": "re.sub('[^-\\\\w]', ' ', 'black-white')\nre.sub('[^-\\\\w]', ' ', 'black#white')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(i)", "out": "リストの文字列化"}
{"in": "s = re.sub('\\\\s+', '', s)", "out": "正規表現"}
{"in": "print(date_conv.strftime('%d-%m-%Y'))", "out": "日付書式"}
{"in": "df1.columns = pd.MultiIndex.from_tuples([(c, '', '') for c in df1])\npd.concat([df2, df1], axis=1)", "out": "リスト内包記法 変換"}
{"in": "print('ERROR! Enter a valid minute in the future.')", "out": "正規表現"}
{"in": "return seq[::2], seq[1::2]", "out": "ひとつおきの列"}
{"in": "raise ValueError('must supply a finite list for paranoid')", "out": "リスト内包記法 変換"}
{"in": "pat = re.compile('(foo|bar)\\\\.trailingString')", "out": "正規表現"}
{"in": "pat = re.compile('foo|bar')", "out": "正規表現"}
{"in": "re.sub(pattern, '\\\\1 xby ', '2x4')", "out": "正規表現"}
{"in": "print([list(words) for key, words in itertools.groupby(data, init)])", "out": "リスト内包記法 変換"}
{"in": "some_func(*params)", "out": "引数展開"}
{"in": "print([item for sublist in [(rep * [i]) for i in a] for item in sublist])", "out": "リスト内包記法 変換"}
{"in": "filteres_primes = (p for p in primes if '0' not in str(p))", "out": "リスト内包記法 フィルタ"}
{"in": "[tuple(x for y in i for x in y) for i in list(d.items())]", "out": "リスト内包記法 変換"}
{"in": "float_formatter = lambda x: '%.2f' % x", "out": "少数点表示制限"}
{"in": "def IntersectDicts(d1, d2):\n    return dict([k_v for k_v in list(d1.items()) if k_v[0] in d2 and d2[k_v[0]] == k_v[1]])", "out": "辞書内包記法"}
{"in": "print('\\n' + ''.join(traceback.format_exception(type, value, tb)).strip('\\n'))", "out": "リストの文字列化"}
{"in": "d.update({str(i * 2): '1' for i in range(n)})", "out": "辞書内包記法"}
{"in": "isBlank = all(band.getextrema() == (255, 255) for band in bands)", "out": "リスト内包記法 変換"}
{"in": "print([d.b[i] for i in range(5)])", "out": "リスト内包記法 変換"}
{"in": "self.axes = self.figure.add_subplot(111, projection='3d')", "out": "正規表現"}
{"in": "els[-1]", "out": "末尾の要素"}
{"in": "avg_array = (data_array[::2] + data_array[1::2]) / 2", "out": "ひとつおきの列"}
{"in": "my_array = ['abc', 'def', 'xyz', 'abc', 'pop', 'abc']\n[a for a in my_array if a != 'abc']", "out": "リスト内包記法 フィルタ"}
{"in": "not sum([(not i in A) for i in C])", "out": "リスト内包記法 変換"}
{"in": "list.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "datetime.strptime(key.last_modified, '%Y-%m-%dT%H:%M:%S.%fZ')", "out": "日付書式 時刻書式"}
{"in": "print(''.join(['_', '_', '_', '_']))\n____", "out": "リストの文字列化"}
{"in": "print([name for _, name, _ in pkgutil.iter_modules([pkgpath])])", "out": "リスト内包記法 変換"}
{"in": "def add_win(people_list, name):\n    person = find_person(people_list, name)\nperson['wins'] += 1\n\ndef find_person(people_list, name):\n    for person in people_list:\n        if person['name'] == name:\n            return person\nperson = {'name': name, 'wins': 0}\npeople_list.append(person)\nreturn person", "out": "辞書内包記法"}
{"in": "super(DecoratorLockedSet, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "x = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i', 'j']]\n[j for i in x for j in i]", "out": "リスト内包記法 変換"}
{"in": "from datetime import datetime\ndatetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "[(x + 3) for x in my_list]", "out": "リスト内包記法 変換"}
{"in": "re.match(pattern, '4.4')", "out": "正規表現"}
{"in": "re.match(pattern, '.4')", "out": "正規表現"}
{"in": "re.match('(.*) \\\\((.*) (\\\\d+/\\\\d+)', s).groups()", "out": "正規表現"}
{"in": "return ''.join(DICO_INVERTED[p] for p in grouper(8, binary, ''))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "lines = [l.split() for l in f.readlines()]", "out": "リスト内包記法 変換"}
{"in": "ax.plot(theta, [(1.23) for t in theta], color='#AA5555', linewidth=10)", "out": "リスト内包記法 変換"}
{"in": "t = (1, 'a'), (2, 'b')\ndict((y, x) for x, y in t)", "out": "辞書内包記法"}
{"in": "combs = [[x for i, x in enumerate(data) if mask[i]] for mask in masks]", "out": "リスト内包記法 フィルタ"}
{"in": "re_float = re.compile('\\\\d*\\\\.?\\\\d+')", "out": "正規表現"}
{"in": "points = [random() for _ in range(1000 * 2)]", "out": "リスト内包記法 変換"}
{"in": "[x for x in lst if x % 2 == 0][0]", "out": "リスト内包記法 フィルタ"}
{"in": "l = ['John Fine', 'Doug Biro', 'Jo Ann Alfred']\nsorted(l, key=lambda x: x.rsplit(None, 1)[-1])", "out": "末尾の要素"}
{"in": "super(TagForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "l = [[1, 2], [3, 4]]\n[(x + y) for x, y in l]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(''.join(str(cell) for cell in row) for row in a))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "store.append('df_cols', df, axes='columns')", "out": "正規表現"}
{"in": "QWidget.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "return re.match('[a-zA-Z0-9\\\\-]', string)", "out": "正規表現"}
{"in": "print(''.join(text_list))", "out": "リストの文字列化"}
{"in": "data = re.sub('<.*?>', '', data)\nprint(data)", "out": "正規表現"}
{"in": "country_reverse = dict((v, k) for k, v in COUNTRY_CHOICES)\nCountry.objects.filter(code=country_reverse['france'])", "out": "辞書内包記法"}
{"in": "add(**x)", "out": "引数展開"}
{"in": "zip(*A)", "out": "引数展開"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "data = [[1, 2, 3], [1, 3, 4], [2, 4, 5]]\n[sum(e) for e in zip(*data)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "listx = [item[0] for item in data]", "out": "リスト内包記法 変換"}
{"in": "[elem[0] for elem in most_common]", "out": "リスト内包記法 変換"}
{"in": "return any(match(str1, str2) for str1 in set1 for str2 in set2)", "out": "リスト内包記法 変換"}
{"in": "series1 = [float(i) for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "int(b[:-1]) + unicodedata.numeric(b[-1])", "out": "末尾の要素"}
{"in": "nums = [1883.95, 1878.33, 1869.43, 1863.4]\n['{:.2f}'.format(x) for x in nums]", "out": "辞書内包記法 少数点表示制限"}
{"in": "visited = {p: False for p in l}", "out": "辞書内包記法"}
{"in": "data = ['32', '22', '12', '32', '22', '12', '31', '21', '11']\ndict((x, data.count(x)) for x in data)", "out": "辞書内包記法"}
{"in": "d2 = {key: value for i, (key, value) in enumerate(d.items()) if i % 2 == 1}", "out": "辞書内包記法"}
{"in": "list([l for l in process_list if re.search(pattern, l) == None])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "return pd.Series(*_outliers(s.values.astype('float')))", "out": "引数展開"}
{"in": "expr1(expr2, expr3, *expr4, **expr5)", "out": "引数展開"}
{"in": "document_first_row = [doc[0] for doc in documents]", "out": "リスト内包記法 変換"}
{"in": "format(150, '.2f')", "out": "少数点表示制限"}
{"in": "arg_text = '(%s)' % re.sub('\\\\.\\\\d+', '<tuple>', arg_text)", "out": "正規表現"}
{"in": "[i for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('\\\\w+', test, re.UNICODE))", "out": "正規表現"}
{"in": "columns = [column[0] for column in cursor.description]", "out": "リスト内包記法 変換"}
{"in": "[a[i + 1:j] for i, j in zip(zeros, zeros[1:]) if len(a[i + 1:j]) > 0]", "out": "リスト内包記法 フィルタ"}
{"in": "print('BINGO ! : %s , %s' % re.match('OK\\\\s+(\\\\w+)\\\\s+(\\\\w+)', ch).groups())", "out": "正規表現"}
{"in": "ax.figure.show()", "out": "正規表現"}
{"in": "total_quantity, total_price = (sum(x) for x in zip(*((item['quantity'], \n    item['price'] * item['quantity']) for item in l)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "with open('infile.txt', 'r+') as fopen:\n    for line in fopen:\n        for word in line.split():\n            pass", "out": "リスト内包記法 変換"}
{"in": "l2 = list(zip(*l1))", "out": "引数展開"}
{"in": "return namedtuple('X', list(d.keys()))(*list(d.values()))", "out": "引数展開"}
{"in": "\"\"\"x\"\"\".join([''] + lis + [''])", "out": "リストの文字列化"}
{"in": "QtCore.QObject.__init__(self)", "out": "正規表現"}
{"in": "[i for j in (list(range(10)), list(range(15, 20))) for i in j]", "out": "リスト内包記法 変換"}
{"in": "arr = [[2, 0, 3], [4, 2, 3], [1, 0, 3]]\nany([(x[1:] == x[:-1]) for x in zip(*arr)])", "out": "リスト内包記法 変換 引数展開"}
{"in": "lol = [(setitem(x, 1, -2) or x) for x in lol]", "out": "リスト内包記法 変換"}
{"in": "print(''.join(lines))", "out": "リストの文字列化"}
{"in": "total = sum(int(i) for i in line)", "out": "リスト内包記法 変換"}
{"in": "f2(**d)", "out": "引数展開"}
{"in": "return list(chain(*[item[0] for item in groupby(lst)]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "cols = df.columns.values.tolist()\npd.concat([df[col].apply(pd.Series) for col in cols], axis=1, keys=cols)", "out": "リスト内包記法 変換"}
{"in": "re.sub('0(?=[.])', '', '%0.4f' % -k)", "out": "正規表現 少数点表示制限"}
{"in": "print(('\\n'.join(para), '\\n'))", "out": "リストの文字列化"}
{"in": "return not any(i in seen or seen.add(i) for i in x)", "out": "リスト内包記法 変換"}
{"in": "lst = ['abc-123', 'def-456', 'ghi-789', 'abc-456']\nprint([x for x in lst if 'abc' in x])", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\\\\b{}\\\\b\"\"\".format(re.escape('foo.bar+'))", "out": "正規表現"}
{"in": "from functools import reduce\nreturn (data[index] for index in reduce(set.union, sets))", "out": "リスト内包記法 変換"}
{"in": "rows = [line.strip().split(' ') for line in data.split('\\n')]", "out": "リスト内包記法 変換"}
{"in": "ld.append({l[0]: int(l[col]) for l in ll})", "out": "辞書内包記法"}
{"in": "test = '\\xe9\\xe1\\xe9123456tgre\\xe1\\xe9@\\u20ac'", "out": "ユニコード"}
{"in": "[x for _, x in zip(list(range(n)), generator)]", "out": "リスト内包記法 変換"}
{"in": "x if a > b else y", "out": "三項演算子"}
{"in": "print(strfdelta(delta_obj, '%H hours and %M to go'))", "out": "時刻書式"}
{"in": "fn(*args, **kwargs)", "out": "引数展開"}
{"in": "file.write('\\n'.join('%-15s %s' % (i, j) for i, j in data))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "backward = lambda t: t[-1] + backward(t[:-1]) if t else t", "out": "三項演算子 末尾の要素"}
{"in": "l = [map(int, line.split(',')) for line in f]", "out": "リスト内包記法 変換"}
{"in": "func(*['abc', '123'])", "out": "引数展開"}
{"in": "l = ['1', '2', '3', '4']\ns = '%s,' % ', '.join(l)", "out": "リストの文字列化"}
{"in": "print('Today: ', datetime.now().strftime('%d/%m/%Y %H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "c = Counter([values[1] for values in d.values()])", "out": "リスト内包記法 変換"}
{"in": "l = [[x[0] for x in s if x[0] is not None] for s in l]", "out": "リスト内包記法 フィルタ"}
{"in": "add(**arg)", "out": "引数展開"}
{"in": "z['c'] = z.apply(lambda row: 0 if row['b'] in (0, 1) else row['a'] / math.\n    log(row['b']), axis=1)", "out": "三項演算子"}
{"in": "dice = [random.randint(1, 6) for x in range(4)]", "out": "リスト内包記法 変換"}
{"in": "print(unidecode('\\u5317\\u4eb0'))", "out": "ユニコード"}
{"in": "return int('{:08b}'.format(x)[::-1], 2)", "out": "逆順の列"}
{"in": "def wrapper(*args, **kwargs):\n    pass", "out": "引数展開"}
{"in": "with open('myfile', 'w', encoding='utf-8') as f:\n    f.write('\\u5e73\\u621015')", "out": "ユニコード"}
{"in": "table = '\\t'.join(['{}\\t{}'.format(d.get(k), k) for k in sorted(d)])", "out": "辞書内包記法 リストの文字列化"}
{"in": "return super(JSONField, self).get_db_prep_save(value, **kwargs)", "out": "引数展開"}
{"in": "L = 'abc'\n[L[i] for i in [2, 1, 0]]", "out": "リスト内包記法 変換"}
{"in": "mylist = [mylist[i] for i in myorder]\nprint(mylist)", "out": "リスト内包記法 変換"}
{"in": "l2, l3, l1 = zip(*paired_sorted)", "out": "引数展開"}
{"in": "[(ord(x) % 32) for x in [string.letters][0]]", "out": "リスト内包記法 変換"}
{"in": "l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[l[i::3] for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "letters = (c.lower() for c in text if c.isalpha())", "out": "リスト内包記法 フィルタ"}
{"in": "return {e.attrib['name']: e.attrib.get('value', '') for e in fields}", "out": "辞書内包記法"}
{"in": "(b.cumsum() - b.cumsum().where(~b).fillna(method='pad').fillna(0)).astype(int)", "out": "反転演算子"}
{"in": "return cythonize(*args, **kwargs)", "out": "引数展開"}
{"in": "equals = [(x[1:] == x[:-1]) for x in transposed]", "out": "リスト内包記法 変換"}
{"in": "st = {'2', '4', '17', '21', '22', '24', '27', '28', '29', '33', '39'}\nfiltered_dict = {k: v for k, v in my_dict.items() if any(val in st for\n    val in v)}", "out": "辞書内包記法"}
{"in": "y = np.hstack([y, y[-1]])", "out": "末尾の要素"}
{"in": "return sum(conf_matrix[i][i] for i in range(len(conf_matrix))) / t", "out": "リスト内包記法 変換"}
{"in": "index = [(i + 1) for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('^(.)\\\\1*$')", "out": "正規表現"}
{"in": "df.columns = [''.join(col) for col in df.columns]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "response = self.client.get(url_for('api.my-service', **data))", "out": "引数展開"}
{"in": "dirs = [d for d in os.listdir('Tools') if os.path.isdir(os.path.join(\n    'Tools', d))]", "out": "リスト内包記法 フィルタ"}
{"in": "print('Set riak_host and bucket_name appropriately for your Riak cluster.')", "out": "リスト内包記法 変換"}
{"in": "re.sub(' ', '-', a)", "out": "正規表現"}
{"in": "super(ProductForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(c for c in filename if c.isalnum() or c in keepcharacters).rstrip()", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "word_list = re.findall(\"[\\\\w']+\", string)\nprint({word: word_list.count(word) for word in word_list})", "out": "辞書内包記法 正規表現"}
{"in": "\"\"\",\"\"\".join(alist).split(',')", "out": "リストの文字列化"}
{"in": "user_datastore.create_user(email='test2', password='test2')", "out": "正規表現"}
{"in": "[x[x != 0] for x in np.split(a, np.where(a == 0)[0]) if len(x[x != 0])]", "out": "リスト内包記法 フィルタ"}
{"in": "randomSample = [(random() - 0.5, random() - 0.5) for _ in range(count)]", "out": "リスト内包記法 変換"}
{"in": "d = {'a': [[1, 2, 3], [1, 2, 3]], 'b': [[2, 4, 1], [1, 6, 1]]}\n{k: map(sum, zip(*v)) for k, v in list(d.items())}", "out": "辞書内包記法 引数展開"}
{"in": "app.run(port=7080, **kwargs)", "out": "引数展開"}
{"in": "d2 = {k: f(v) for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "C = [','.join(pair) for pair in zip(A, B)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "l = [[1, 3], [23, 4], [13, 45, 6], [8, 3], [44, 33, 12]]\nlist(dict((len(i), i) for i in l).values())", "out": "辞書内包記法"}
{"in": "return parity([perm0[i] for i in perm1])", "out": "リスト内包記法 変換"}
{"in": "table_rows = [e for e in eps_table.iter() if e.tag == 'tr']", "out": "リスト内包記法 フィルタ"}
{"in": "return any(x.startswith('%s/' % name.rstrip('/')) for x in z.namelist())", "out": "リスト内包記法 変換"}
{"in": "new_list = [dd for dd in my_list if not dd is new_dict]", "out": "辞書内包記法"}
{"in": "list1 = [line.strip().split('#')[0].split() for line in f]", "out": "リスト内包記法 変換"}
{"in": "return [i for i in l1 if not any(j in i for j in l2)]", "out": "リスト内包記法 フィルタ"}
{"in": "return [(i + i * weight) for i in v] + [n]", "out": "リスト内包記法 変換"}
{"in": "urls = re.findall('href=[\\\\\\'\"]?([^\\\\\\'\" >]+)', s)", "out": "正規表現"}
{"in": "CACHES = {'default': {'BACKEND': 'django.core.cache.backends.dummy.DummyCache'}\n    }", "out": "正規表現"}
{"in": "l = ['william', 'short', '\\x80', 'twitter', '\\xaa', '\\xe2', 'video', 'guy',\n    'ray']\n[word for word in l if word.isalnum()]", "out": "リスト内包記法 フィルタ"}
{"in": "return [os.getpid(param) for param in params]", "out": "リスト内包記法 変換"}
{"in": "cdict = {c.name: c.value for c in cj}", "out": "辞書内包記法"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "L[i] = L[i][::-1]", "out": "逆順の列"}
{"in": "def filter_list(L):\n    return [x for x in L if not any(set(x) <= set(y) for y in L if x is not y)]", "out": "リスト内包記法 フィルタ"}
{"in": "proxy.ProxyClient.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "print([map(int, list('{:0{w}b}'.format(x, w=r))) for x in range(2 ** r)])", "out": "辞書内包記法 累乗演算子"}
{"in": "line = open('ints.txt').read().split(',')\ntotal = sum(int(i) for i in line)", "out": "リスト内包記法 変換"}
{"in": "x = 1, 3, 7\nint(''.join(map(str, x)))", "out": "リストの文字列化"}
{"in": "d = ['09-2012', '04-2007', '11-2012', '05-2013', '12-2006', '05-2006',\n    '08-2007']\nsorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))", "out": "日付書式"}
{"in": "tqdm_pandas(tqdm_notebook, *args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(output)", "out": "リストの文字列化"}
{"in": "instance = ModelClass.objects.create(**validated_data)", "out": "引数展開"}
{"in": "return a[::2]", "out": "ひとつおきの列"}
{"in": "time.strftime('%Y %m %d', y).replace(' 0', ' ')", "out": "日付書式"}
{"in": "regex = '|'.join('\\\\b' + str(state) + '\\\\b' for state in states)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "e = {v: k for k, v in a.items()}", "out": "辞書内包記法"}
{"in": "def square(list):\n    for i in list:\n        yield i ** 2", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "print('Begining Wait for connections')", "out": "リスト内包記法 変換"}
{"in": "dict(zip(l2, map(len, list(list(g[1]) for g in groups))))", "out": "辞書内包記法"}
{"in": "dayDict = {d: [] for d in weekList}", "out": "辞書内包記法"}
{"in": "client.create_video(**kwargs)", "out": "引数展開"}
{"in": "URL_REGEX = re.compile('((?:mailto:|ftp://|http://)[^ <>\\'\"{}|\\\\\\\\^`[\\\\]]*)')", "out": "正規表現"}
{"in": "x = time.strptime('00:01:00,000'.split(',')[0], '%H:%M:%S')", "out": "時刻書式"}
{"in": "s += ' + '.join([('x[' + str(i) + ']') for i in range(0, 3)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "data_with_zeros['a'].div(data_with_zeros['b'], fill_value=0).where(~mask, 0)", "out": "反転演算子"}
{"in": "ip = re.sub('dot', '.', ip)", "out": "正規表現"}
{"in": "print(''.join([str(t[0], t[1] or default_charset) for t in dh]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "yield tuple(pool[i] for i in indices)", "out": "リスト内包記法 変換"}
{"in": "t\n[(j - i) for i, j in zip(t[:-1], t[1:])]", "out": "リスト内包記法 変換"}
{"in": "s = 'Bubble Bobble'\n\"\"\"\"\"\".join(sorted(s))", "out": "リストの文字列化"}
{"in": "[{'type': k, 'items': [x[0] for x in v]} for k, v in groups]", "out": "辞書内包記法"}
{"in": "\"\"\" \"\"\".join(li)", "out": "リストの文字列化"}
{"in": "f = lambda r: r * (sp.j1(r) / r) ** 2", "out": "累乗演算子"}
{"in": "[m.start() for m in pattern.finditer(sentence)]", "out": "リスト内包記法 変換"}
{"in": "output = list({'name': n, 'playing': l} for n, l in list(toutput.items()))", "out": "辞書内包記法"}
{"in": "return list(itertools.chain(*list_))", "out": "引数展開"}
{"in": "print('{:{}s} {:{}d} {:{}f}'.format(*fmt))", "out": "引数展開"}
{"in": "print('{:8.2f}  {:8.2f}'.format(v1, v2))", "out": "少数点表示制限"}
{"in": "row = {name_map[name]: val for name, val in list(row.items())}", "out": "辞書内包記法"}
{"in": "ax.set_ylim(*lims[1])", "out": "引数展開"}
{"in": "return [iterable[i:i + length] for i in range(len(iterable) - length + 1)]", "out": "リスト内包記法 変換"}
{"in": "[i for i in range(1, len(x)) if x[i] != x[i - 1]]", "out": "リスト内包記法 フィルタ"}
{"in": "super(ClassedWidgetMixin, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "SPIDER_MIDDLEWARES = {'project.middlewares.ignore.IgnoreVisitedItems': 560}", "out": "正規表現"}
{"in": "return time.strptime(tup[4], '%a %b %d %X PDT %Y')", "out": "日付書式"}
{"in": "d = dict((x, __main__.__dict__[x]) for x in list_of_variable_names)", "out": "辞書内包記法"}
{"in": "[y for x in data for y in x]\n[y for y in x for x in data]", "out": "リスト内包記法 変換"}
