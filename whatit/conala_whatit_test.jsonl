{"in": "[int(x) for x in str(num)]", "out": "リスト内包記法 変換"}
{"in": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')", "out": "日付書式 時刻書式"}
{"in": "np.array(x._data).reshape(x.size[::-1]).T", "out": "逆順の列"}
{"in": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)", "out": "正規表現"}
{"in": "zip(*[[1, 2], [3, 4], [5, 6]])", "out": "引数展開"}
{"in": "print([l[i:i + n] for i in range(len(l)) for n in range(1, len(l) - i + 1)])", "out": "リスト内包記法 変換"}
{"in": "re.sub('[^A-Z]', '', s)", "out": "正規表現"}
{"in": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)", "out": "正規表現"}
{"in": "\"\"\"{0:,.2f}\"\"\".format(24322.34)", "out": "少数点表示制限"}
{"in": "[d['key'] for d in l]", "out": "リスト内包記法 変換"}
{"in": "[x[1] for x in elements]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "[i for i, e in enumerate(a) if e != 0]", "out": "リスト内包記法 フィルタ"}
{"in": "df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')", "out": "日付書式"}
{"in": "[item for item in a if item[0] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "[a[i] for i in (1, 2, 5)]", "out": "リスト内包記法 変換"}
{"in": "sum(len(v) for v in food_colors.values())", "out": "リスト内包記法 変換"}
{"in": "re.compile('[^a-zA-Z0-9-]')", "out": "正規表現"}
{"in": "any(d['site'] == 'Superuser' for d in data)", "out": "リスト内包記法 変換"}
{"in": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)", "out": "正規表現"}
{"in": "datetime.datetime.today().strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')", "out": "日付書式"}
{"in": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')", "out": "日付書式"}
{"in": "[int(x) for x in '0,1,2'.split(',')]", "out": "リスト内包記法 変換"}
{"in": "[i for i, j in zip(a, b) if i == j]", "out": "リスト内包記法 フィルタ"}
{"in": "r = int(''.join(map(str, x)))", "out": "リストの文字列化"}
{"in": "{k: v for d in L for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]", "out": "リスト内包記法 変換 正規表現"}
{"in": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')", "out": "日付書式"}
{"in": "dict((k, 'updated') for k, v in d.items() if v is None)", "out": "辞書内包記法"}
{"in": "map(int, re.findall('\\\\d+', s))", "out": "正規表現"}
{"in": "dict((k, 'updated') for k, v in d.items() if v != 'None')", "out": "辞書内包記法"}
{"in": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "out": "引数展開"}
{"in": "df['col1'] = df['col1'].apply(lambda i: ''.join(i))", "out": "リストの文字列化"}
{"in": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]", "out": "リスト内包記法 変換"}
{"in": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(['line 1\\n', 'line 2\\n'])", "out": "リストの文字列化"}
{"in": "print(' '.join(set(s)))", "out": "リストの文字列化"}
{"in": "[d['value'] for d in l]", "out": "リスト内包記法 変換"}
{"in": "self.writer.writerow([str(s).encode('utf-8') for s in row])", "out": "リスト内包記法 変換"}
{"in": "re.compile('[A-Za-z_][A-Za-z0-9_]*')", "out": "正規表現"}
{"in": "[i[0] for i in a]", "out": "リスト内包記法 変換"}
{"in": "[x for x in my_list if not x.startswith('#')]", "out": "リスト内包記法 フィルタ"}
{"in": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]", "out": "リスト内包記法 変換"}
{"in": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)", "out": "正規表現"}
{"in": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')", "out": "正規表現"}
{"in": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))", "out": "辞書内包記法 引数展開"}
{"in": "re.compile('[^a-zA-Z0-9-]+')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(l)", "out": "リストの文字列化"}
{"in": "datetime.datetime.strptime('03:55', '%H:%M').time()", "out": "時刻書式"}
{"in": "[s[i:i + 3] for i in range(0, len(s), 3)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('(?=([A-Z]SQP|S[A-Z]QP|SS[A-Z]P|SSQ[A-Z]))', s)", "out": "正規表現"}
{"in": "list(itertools.product(*a))", "out": "引数展開"}
{"in": "[input[i:i + n] for i in range(0, len(input), n)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(set('aaabcabccd'))", "out": "リストの文字列化"}
{"in": "zip(*[(1, 2), (3, 4), (5, 6)])", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(str(x) for x in range(1, N + 1))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.search('\\\\bis\\\\b', your_string)", "out": "正規表現"}
{"in": "re.findall('\\\\S+', str1)", "out": "正規表現"}
{"in": "re.findall('\\\\$(.*?)\\\\$', '$sin (x)$ is an function of x')", "out": "正規表現"}
{"in": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))", "out": "正規表現"}
{"in": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]", "out": "辞書内包記法"}
{"in": "os.path.expanduser('~user')", "out": "反転演算子"}
{"in": "[dict(y) for y in set(tuple(x.items()) for x in d)]", "out": "辞書内包記法"}
{"in": "soup.findAll('a', attrs={'href': re.compile('^http://')})", "out": "正規表現"}
{"in": "[item.strip() for item in my_string.split(',')]", "out": "リスト内包記法 変換"}
{"in": "[d['value'] for d in l if 'value' in d]", "out": "リスト内包記法 フィルタ"}
{"in": "any(d['name'] == 'Test' for d in label)", "out": "リスト内包記法 変換"}
{"in": "[(x, y) for x, y in a if x == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('\\\\*+', '*', text)", "out": "正規表現"}
{"in": "re.split('\\\\W+', 'Words, words, words.')", "out": "正規表現"}
{"in": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "len(li) - 1 - li[::-1].index('a')", "out": "逆順の列"}
{"in": "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]", "out": "辞書内包記法"}
{"in": "re.sub('<[^<]+?>', '', text)", "out": "正規表現"}
{"in": "[len(x) for x in s.split()]", "out": "リスト内包記法 変換"}
{"in": "[(i // 2) for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('-(?!aa|bb)([^-]+)', string)", "out": "正規表現"}
{"in": "re.findall('-(?!aa-|bb-)([^-]+)', string)", "out": "正規表現"}
{"in": "[i for i, v in enumerate(L) if v[0] == 53]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')", "out": "ユニコード"}
{"in": "[(k, v) for k, v in a.items()]", "out": "リスト内包記法 変換"}
{"in": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))", "out": "日付書式"}
{"in": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)", "out": "辞書内包記法"}
{"in": "imtag = re.match('<img.*?>', line).group(0)", "out": "正規表現"}
{"in": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)", "out": "正規表現"}
{"in": "dict([(e[0], int(e[1])) for e in lst])", "out": "辞書内包記法"}
{"in": "re.split('(?<=[\\\\.\\\\?!]) ', text)", "out": "正規表現"}
{"in": "[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]", "out": "リスト内包記法 変換"}
{"in": "all(isinstance(x, int) for x in lst)", "out": "リスト内包記法 変換"}
{"in": "strs = ['' for x in range(size)]", "out": "リスト内包記法 変換"}
{"in": "[[X[i, j] for i in range(X.shape[0])] for j in range(x.shape[1])]", "out": "リスト内包記法 変換"}
{"in": "results = [item['value'] for item in test_data]", "out": "リスト内包記法 変換"}
{"in": "re.sub('l+', 'l', 'lollll')", "out": "正規表現"}
{"in": "[d for d in a if d['name'] == 'pluto']", "out": "リスト内包記法 フィルタ"}
{"in": "list(dict((x['id'], x) for x in L).values())", "out": "辞書内包記法"}
{"in": "[[X[i, j] for j in range(X.shape[1])] for i in range(x.shape[0])]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(set(foo))", "out": "リストの文字列化"}
{"in": "url.rsplit('/', 1)[-1]", "out": "末尾の要素"}
{"in": "[m.start() for m in re.finditer('test', 'test test test test')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "[x for y, x in sorted(zip(Y, X))]", "out": "リスト内包記法 変換"}
{"in": "re.compile('^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)', re.MULTILINE)", "out": "正規表現"}
{"in": "df.groupby('A')['C'].apply(lambda x: '{%s}' % ', '.join(x))", "out": "リストの文字列化"}
{"in": "numpy.array([(x in a) for x in b])", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\s+', str1)", "out": "正規表現"}
{"in": "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))", "out": "正規表現"}
{"in": "dict([(k, v) for k, v in zip(keys, values)])", "out": "辞書内包記法"}
{"in": "'used\\u200b'.replace('\\u200b', '*')", "out": "ユニコード"}
{"in": "[x[0] for x in G]", "out": "リスト内包記法 変換"}
{"in": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'Current Level: -13.2 db or 14.2 or 3')", "out": "正規表現"}
{"in": "'\\u0440\\u0430\\u0437 \\u0434\\u0432\\u0430 \\u0442\\u0440\\u0438'.split()", "out": "ユニコード"}
{"in": "dict((k, v) for k, v in zip(keys, values))", "out": "辞書内包記法"}
{"in": "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434').group(1))", "out": "正規表現"}
{"in": "[set(item) for item in set(frozenset(item) for item in L)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('(<form.*?action=\")([^\"]+)', '\\\\1newlogin.php', content)", "out": "正規表現"}
{"in": "str.decode('utf-8').replace('\\u2022', '*')", "out": "ユニコード"}
{"in": "dict((k, globals()[k]) for k in ('foo', 'bar'))", "out": "辞書内包記法"}
{"in": "[(i, sum(j) / len(j)) for i, j in list(d.items())]", "out": "リスト内包記法 変換"}
{"in": "[int(s) for s in example_string.split(',')]", "out": "リスト内包記法 変換"}
{"in": "sum(d['success'] for d in s)", "out": "リスト内包記法 変換"}
{"in": "dict(map(int, x.split(':')) for x in s.split(','))", "out": "辞書内包記法"}
{"in": "[('%.2d' % i) for i in range(16)]", "out": "リスト内包記法 変換"}
{"in": "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')", "out": "ユニコード"}
{"in": "re.sub('\\\\*\\\\*+', '*', text)", "out": "正規表現"}
{"in": "[item for item in a if 1 in item]", "out": "リスト内包記法 フィルタ"}
{"in": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')", "out": "ユニコード"}
{"in": "[x[1] for x in L]", "out": "リスト内包記法 変換"}
{"in": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)", "out": "正規表現"}
{"in": "[sum([x[1] for x in i]) for i in data]", "out": "リスト内包記法 変換"}
{"in": "[k for k, v in i.items() if v == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]", "out": "辞書内包記法"}
{"in": "re.split('[^a-zA-Z]*', 'your string')", "out": "正規表現"}
{"in": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))", "out": "少数点表示制限"}
{"in": "tuple(int(x.strip()) for x in input().split(','))", "out": "リスト内包記法 変換"}
{"in": "re.sub('a*', 'a', 'aaabbbccc')", "out": "正規表現"}
{"in": "sum(1 for i in it)", "out": "リスト内包記法 変換"}
{"in": "sum(x * y for x, y in list(zip(a, b)))", "out": "リスト内包記法 変換"}
{"in": "print('%.3f' % 3.1415)", "out": "少数点表示制限"}
{"in": "datetime.datetime.strptime('24052010', '%d%m%Y').date()", "out": "日付書式"}
{"in": "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print([item for item in dir(adfix) if not item.startswith('__')])", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('(?<=\\\\w)([A-Z])', ' \\\\1', 'WordWordWWWWWWWord')", "out": "正規表現"}
{"in": "[int(x) for x in bin(8)[2:]]", "out": "リスト内包記法 変換"}
{"in": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)", "out": "正規表現"}
{"in": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)", "out": "正規表現"}
{"in": "sorted(list_of_tuples, key=lambda tup: tup[::-1])", "out": "逆順の列"}
{"in": "re.match('(ftp|http)://.*\\\\.(jpg|png)$', s)", "out": "正規表現"}
{"in": "[try_int(x) for x in ['sam', '1', 'dad', '21']]", "out": "リスト内包記法 変換"}
{"in": "[x for x in items if x[2] == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')", "out": "正規表現"}
{"in": "emaillist = '\\n'.join([item[0] for item in queryresult])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "C = [(a - b) for a, b in zip(A, B)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])", "out": "リストの文字列化"}
{"in": "print(''.join(uppers))", "out": "リストの文字列化"}
{"in": "sorted(words, key=lambda x: 'a' + x if x[:1] == 's' else 'b' + x)", "out": "三項演算子"}
{"in": "[x for x in l if x[1] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "df[~df.index.duplicated()]", "out": "反転演算子"}
{"in": "print(len([x for x in lst if x is not None]))", "out": "リスト内包記法 フィルタ"}
{"in": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}", "out": "辞書内包記法"}
{"in": "print([key for key, value in list(d.items()) if value == 1])", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('(?=(\\\\w+\\\\s+\\\\w+))', 'B D E')", "out": "正規表現"}
{"in": "[i for i in y if y[i] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))", "out": "正規表現 リストの文字列化"}
{"in": "soup.find_all('div', class_=re.compile('comment-'))", "out": "正規表現"}
{"in": "re.findall('([a-z])*', 'f233op')", "out": "正規表現"}
{"in": "re.findall('([a-z]*)', 'f233op')", "out": "正規表現"}
{"in": "[j for i in zip(a, b) for j in i]", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\.\\\\s', text)", "out": "正規表現"}
{"in": "example = [x.replace('\\r\\n', '') for x in example]", "out": "リスト内包記法 変換"}
{"in": "[(d['Name'], d['Age']) for d in thisismylist]", "out": "リスト内包記法 変換"}
{"in": "print('\\u25b2'.encode('utf-8'))", "out": "ユニコード"}
{"in": "[y for x in list(dict.items()) for y in x]", "out": "辞書内包記法"}
{"in": "[x for x in a if x != [1, 1]]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')", "out": "正規表現"}
{"in": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))", "out": "リスト内包記法 変換 リストの文字列化 ひとつおきの列"}
{"in": "re.match('^(a+)+$', 'a' * 24 + '!')", "out": "正規表現"}
{"in": "re.match('[:;][)(](?![)(])', str)", "out": "正規表現"}
{"in": "sorted(a, key=lambda x: (len(x), [confrom[card[0]] for card in x]))", "out": "リスト内包記法 変換"}
{"in": "re.sub('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', '', a)", "out": "正規表現"}
{"in": "map(int, re.findall('\\\\d+', string1))", "out": "正規表現"}
{"in": "[d['Name'] for d in thisismylist]", "out": "リスト内包記法 変換"}
{"in": "{x[1]: x for x in lol}", "out": "辞書内包記法"}
{"in": "a[:] = [x for x in a if x != [1, 1]]", "out": "リスト内包記法 フィルタ"}
{"in": "[line for line in open('textfile') if 'apple' in line]", "out": "リスト内包記法 フィルタ"}
{"in": "re.compile('\\xe2\\x80\\x93')", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join(l[-1:] + l[:-1])", "out": "リストの文字列化"}
{"in": "re.compile('a^')", "out": "正規表現"}
{"in": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')", "out": "日付書式"}
{"in": "open('filename', 'w').write('\\n'.join('%s %s' % x for x in mylist))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(''.join([str(t).strip() for t in x.findAll(text=True)]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])", "out": "辞書内包記法 リストの文字列化"}
{"in": "np.cumsum(x[::-1])[::-1]", "out": "逆順の列"}
{"in": "[(v, k) for k, v in a.items()]", "out": "リスト内包記法 変換"}
{"in": "map(sum, zip(*l))", "out": "引数展開"}
{"in": "int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))", "out": "日付書式"}
{"in": "[value for key, value in list(programs.items()) if 'new york' in key.lower()]", "out": "リスト内包記法 フィルタ"}
{"in": "df.loc[~df['column_name'].isin(some_values)]", "out": "反転演算子"}
{"in": "datetime.strptime('2012-06-25 01:17:40.273000', '%Y-%m-%d %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "print(any(x in a for x in b))", "out": "リスト内包記法 変換"}
{"in": "print([key for key, value in d.items() if value == 1])", "out": "リスト内包記法 フィルタ"}
{"in": "[i for i in y if y[i] > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "new_list = [(x + 1) for x in my_list]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[k for k, v in dictA.items() if v.count('duck') > 1]", "out": "辞書内包記法"}
{"in": "re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)", "out": "正規表現"}
{"in": "re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)", "out": "正規表現"}
{"in": "set([1, 2, 3]) ^ set([3, 4, 5])", "out": "排他的論理和"}
{"in": "[(lst[i], lst2[i]) for i in range(len(lst))]", "out": "リスト内包記法 変換"}
{"in": "[x[0] for x in os.walk(directory)]", "out": "リスト内包記法 変換"}
{"in": "all(i < j for i, j in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)", "out": "正規表現"}
{"in": "my_datetime.strftime('%B %d, %Y')", "out": "日付書式"}
{"in": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))", "out": "正規表現 ユニコード"}
{"in": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])", "out": "リスト内包記法 変換"}
{"in": "[sorted(item) for item in data]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))", "out": "正規表現 リストの文字列化"}
{"in": "f.write('# Data for Class A\\n')", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(lst)", "out": "リストの文字列化"}
{"in": "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)", "out": "三項演算子"}
{"in": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(soup.findAll(text=True))", "out": "リストの文字列化"}
{"in": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)", "out": "正規表現"}
{"in": "sum(j ** i for i, j in enumerate(l, 1))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "b = dict(zip(a[0::2], a[1::2]))", "out": "ひとつおきの列"}
{"in": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()", "out": "日付書式"}
{"in": "dict(x[1:] for x in reversed(myListOfTuples))", "out": "辞書内包記法"}
{"in": "re.findall('[^a]', 'abcd')", "out": "正規表現"}
{"in": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)", "out": "正規表現"}
{"in": "[(k, v) for k, v in D.items() if 'Light' in k]", "out": "リスト内包記法 フィルタ"}
{"in": "{key: val for key, val in list(myDict.items()) if val != 42}", "out": "辞書内包記法"}
{"in": "[k for k, v in d.items() if v == desired_value]", "out": "リスト内包記法 フィルタ"}
{"in": "[[sum([x[1] for x in i])] for i in data]", "out": "リスト内包記法 変換"}
{"in": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')", "out": "正規表現"}
{"in": "{k: bigdict[k] for k in ('l', 'm', 'n')}", "out": "辞書内包記法"}
{"in": "re.compile('Author\\\\(s\\\\)    :((.+\\\\n)+)')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "myredis.lpush('foo', *[1, 2, 3, 4])", "out": "引数展開"}
{"in": "print('.'.join([item[0] for item in data]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict(x[i:i + 2] for i in range(0, len(x), 2))", "out": "辞書内包記法"}
{"in": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)", "out": "正規表現"}
{"in": "[[int(x) for x in sublist] for sublist in lst]", "out": "リスト内包記法 変換"}
{"in": "func(*args)", "out": "引数展開"}
{"in": "re.search('^(.*?)(Arguments:.*?)?(Returns:.*)?$', s, re.DOTALL)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "out": "引数展開"}
{"in": "[[[x[0]] for x in y] for y in listD]", "out": "リスト内包記法 変換"}
{"in": "super(Executive, self).__init__(*args)", "out": "引数展開"}
{"in": "all(isinstance(x, int) for x in lst)", "out": "リスト内包記法 変換"}
{"in": "[x[1] for x in COUNTRIES if x[0] == 'AS'][0]", "out": "リスト内包記法 フィルタ"}
{"in": "d3 = {key: (d1[key] - d2.get(key, 0)) for key in list(d1.keys())}", "out": "辞書内包記法"}
{"in": "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')", "out": "正規表現"}
{"in": "dict((k, v) for d in dicts for k, v in list(d.items()))", "out": "辞書内包記法"}
{"in": "[x['value'] for x in list_of_dicts]", "out": "辞書内包記法"}
{"in": "[x for x in my_list if not any(c.isdigit() for c in x)]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}", "out": "辞書内包記法"}
{"in": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'", "out": "辞書内包記法 引数展開 リストの文字列化"}
{"in": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'x+13.5*10x-4e1') if i])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "zip(*list_of_tuples)", "out": "引数展開"}
{"in": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))", "out": "リストの文字列化"}
{"in": "myList = [i for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "a = [[] for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9').decode('utf8')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print('Total score for %s is %s  ' % (name, score))", "out": "リスト内包記法 変換"}
{"in": "x = [[] for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "[list(d.keys()) for d in LoD]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()", "out": "正規表現"}
{"in": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')", "out": "ユニコード"}
{"in": "[index for index, letter in enumerate(word) if letter == 'e']", "out": "リスト内包記法 フィルタ"}
{"in": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]", "out": "リスト内包記法 変換"}
{"in": "[row[0] for row in a]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(sel.select('//body//text()').extract()).strip()", "out": "リストの文字列化"}
{"in": "instancelist = [MyClass() for i in range(29)]", "out": "リスト内包記法 変換"}
{"in": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')", "out": "日付書式"}
{"in": "[float(i) for i in lst]", "out": "リスト内包記法 変換"}
{"in": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))", "out": "辞書内包記法"}
{"in": "'\\u50b5'.encode('utf-8')", "out": "ユニコード"}
{"in": "print(' '.join(OrderedDict.fromkeys(s)))", "out": "リストの文字列化"}
{"in": "[(x * x) for x in range(10)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('.*I', 'I', stri)", "out": "正規表現"}
{"in": "[x[0] for x in a]", "out": "リスト内包記法 変換"}
{"in": "[div['class'] for div in soup.find_all('div')]", "out": "リスト内包記法 変換"}
{"in": "a = [(sum(x) / len(x)) for x in zip(*a)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "msglist = [hextotal[i:i + 4096] for i in range(0, len(hextotal), 4096)]", "out": "リスト内包記法 変換"}
{"in": "re.compile('\\u2013')", "out": "正規表現 ユニコード"}
{"in": "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "list(set(frozenset(item) for item in L))", "out": "リスト内包記法 変換"}
{"in": "myList = [i for i in range(10) if i % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "[[x[0] for x in listD[3]]]", "out": "リスト内包記法 変換"}
{"in": "any(item[2] == 0 for item in items)", "out": "リスト内包記法 変換"}
{"in": "dict((v, k) for k, v in map.items())", "out": "辞書内包記法"}
{"in": "time.strptime('Mon Jul 09 09:20:28 +0000 2012', '%a %b %d %H:%M:%S +0000 %Y')", "out": "日付書式 時刻書式"}
{"in": "\"\"\" \"\"\".join(my_list)", "out": "リストの文字列化"}
{"in": "[re.split('_(?:f?or|and)_', s) for s in l]", "out": "リスト内包記法 変換 正規表現"}
{"in": "re.sub('\\\\b0+(?!\\\\b)', '', '012+2+0-01+204-0')", "out": "正規表現"}
{"in": "[l[i:i + n] for i in range(0, len(l), n)]", "out": "リスト内包記法 変換"}
{"in": "{k: v for d in dicts for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "re.sub('\\\\b(.+)(\\\\s+\\\\1\\\\b)+', '\\\\1', s)", "out": "正規表現"}
{"in": "re.search('is', String).start()", "out": "正規表現"}
{"in": "sum(item['gold'] for item in myLIst)", "out": "リスト内包記法 変換"}
{"in": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)", "out": "正規表現"}
{"in": "[item for item in my_list if 1 <= item <= 5]", "out": "リスト内包記法 フィルタ"}
{"in": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')", "out": "正規表現"}
{"in": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')", "out": "正規表現"}
{"in": "[tuple(int(i) for i in el.strip('()').split(',')) for el in s.split('),(')]", "out": "リスト内包記法 変換"}
{"in": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]", "out": "リスト内包記法 変換"}
{"in": "dict((k, v) for k, v in hand.items() if v)", "out": "辞書内包記法"}
{"in": "re.search('\\\\bis\\\\b', String).start()", "out": "正規表現"}
{"in": "time.strptime('04/25/2005 10:19', '%m/%d/%Y %H:%M')", "out": "日付書式 時刻書式"}
{"in": "len(dict_test) + sum(len(v) for v in dict_test.values())", "out": "辞書内包記法"}
{"in": "[o.my_attr for o in my_list]", "out": "リスト内包記法 変換"}
{"in": "[i for i in x if i in y]", "out": "リスト内包記法 フィルタ"}
{"in": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))", "out": "辞書内包記法"}
{"in": "dict((i, i * 2) for i in range(10))", "out": "辞書内包記法"}
{"in": "dict([x.split('=') for x in s.split()])", "out": "辞書内包記法"}
{"in": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]", "out": "リスト内包記法 変換"}
{"in": "{i: (i * 2) for i in range(10)}", "out": "辞書内包記法"}
{"in": "re.findall('(?=(\\\\w\\\\w))', 'hello')", "out": "正規表現"}
{"in": "print([i.split('/')[1] for i in input if '/' in i])", "out": "リスト内包記法 フィルタ"}
{"in": "s[::2], s[1::2]", "out": "ひとつおきの列"}
{"in": "print('\\u5f15\\u8d77\\u7684\\u6216')", "out": "ユニコード"}
{"in": "sum(item['one'] for item in list(tadas.values()))", "out": "リスト内包記法 変換"}
{"in": "[(x1 - x2) for x1, x2 in zip(List1, List2)]", "out": "リスト内包記法 変換"}
{"in": "[[] for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\s+|\\\\S+', s)", "out": "正規表現"}
{"in": "sorted(x[::-1] for x in enumerate(['z', 'a', 'c', 'x', 'm']))", "out": "リスト内包記法 変換 逆順の列"}
{"in": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}", "out": "辞書内包記法"}
{"in": "[l[i:i + n] for i in range(0, len(l), n)]", "out": "リスト内包記法 変換"}
{"in": "list3 = [(a + b) for a, b in zip(list1, list2)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\b(this|string)\\\\b', '<markup>\\\\1</markup>', 'this is my string')", "out": "正規表現"}
{"in": "[(a if a else 2) for a in [0, 1, 0, 3]]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "d = {k: v for k, v in list(d.items()) if v > 0}", "out": "辞書内包記法"}
{"in": "result = [item for word in words for item in word.split(',')]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(filter(str.isdigit, '12454v'))", "out": "リストの文字列化"}
{"in": "[(t[1], t[0]) for t in mylist]", "out": "リスト内包記法 変換"}
{"in": "re.findall('<wx\\\\.[^<]*<[^<]*> >', i)", "out": "正規表現"}
{"in": "re.compile('{}-\\\\d*'.format(user))", "out": "正規表現"}
{"in": "key = lambda x: sum(y['play'] for y in x)", "out": "リスト内包記法 変換"}
{"in": "{{car.date_of_manufacture.strftime('%Y-%m-%d')}}", "out": "正規表現 日付書式"}
{"in": "re.sub('[\\\\W_]+', '', s)", "out": "正規表現"}
{"in": "zip(*np.where(a == 1))", "out": "引数展開"}
{"in": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')", "out": "反転演算子"}
{"in": "{k: v for k, v in (e.split(':') for e in lis)}", "out": "辞書内包記法"}
{"in": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)", "out": "正規表現"}
{"in": "[re.search('\\\\d{4}', s) for s in lst]", "out": "辞書内包記法 正規表現"}
{"in": "[i for i in range(len(a)) if a[i] > 2]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(len(x) for x in list(food_colors.values()))", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join([('/x%02x' % ord(c)) for c in 'hello'])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[row[1] for row in A]", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('((?:Friday|Saturday)\\\\s*\\\\d{1,2})')", "out": "正規表現"}
{"in": "print('Total score for {} is {}'.format(name, score))", "out": "辞書内包記法"}
{"in": "re.sub('[^ -\\ud7ff\\t\\n\\r\\ue000-\\ufffd\\u10000-\\u10ffFF]+', '', text)", "out": "正規表現 ユニコード"}
{"in": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(sum(x) for x in lists)", "out": "リスト内包記法 変換"}
{"in": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})", "out": "引数展開"}
{"in": "re.sub('^(.+?)\\\\1+$', '\\\\1', input_string)", "out": "正規表現"}
{"in": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])", "out": "三項演算子"}
{"in": "Entry.objects.filter(~Q(id=3))", "out": "反転演算子"}
{"in": "stringnamehere.decode('utf-8', 'ignore')", "out": "正規表現"}
{"in": "[x.encode('UTF8') for x in EmployeeList]", "out": "リスト内包記法 変換"}
{"in": "[item for item in my_sequence if item != 'item']", "out": "リスト内包記法 フィルタ"}
{"in": "self.axes = self.figure.add_axes([0, 0, 1, 1])", "out": "正規表現"}
{"in": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))", "out": "リスト内包記法 変換 逆順の列 累乗演算子"}
{"in": "data = [line[i:i + 12] for i in range(0, len(line), 12)]", "out": "リスト内包記法 変換"}
{"in": "dictlist = [dict() for x in range(n)]", "out": "辞書内包記法"}
{"in": "print(re.match('[^/]+', text).group(0))", "out": "正規表現"}
{"in": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)", "out": "辞書内包記法"}
{"in": "re.split('(\\\\d+)', 'a1b2c30d40')", "out": "正規表現"}
{"in": "return ''.join(soup.findAll(text=True))", "out": "リストの文字列化"}
{"in": "\"\"\"${:.2f}\"\"\".format(amount)", "out": "少数点表示制限"}
{"in": "[x(y) for x, y in zip(functions, values)]", "out": "リスト内包記法 変換"}
{"in": "unique_data = [list(x) for x in set(tuple(x) for x in testdata)]", "out": "リスト内包記法 変換"}
{"in": "[s.strip() for s in re.split(',|;', string)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "d = dict((k, v) for k, v in d.items() if v > 0)", "out": "辞書内包記法"}
{"in": "re.search('[a-z]*', '1234')", "out": "正規表現"}
{"in": "[(i, j) for i in range(1, 3) for j in range(1, 5)]", "out": "リスト内包記法 変換"}
{"in": "[t.strip() for s in string.split(',') for t in s.split(';')]", "out": "リスト内包記法 変換"}
{"in": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')", "out": "正規表現"}
{"in": "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())", "out": "辞書内包記法"}
{"in": "re.split('\\\\d*,\\\\d*', mystring)", "out": "正規表現"}
{"in": "strings.sort(key=lambda str: re.sub('.*%', '', str))", "out": "正規表現"}
{"in": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]", "out": "リスト内包記法 フィルタ"}
{"in": "print([('%5.3f' % val) for val in l])", "out": "リスト内包記法 変換 少数点表示制限"}
{"in": "re.findall('\\\\w+(?:-\\\\w+)+', text)", "out": "正規表現"}
{"in": "re.split('\\n\\\\s*\\n', s)", "out": "正規表現"}
{"in": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]", "out": "リスト内包記法 変換"}
{"in": "b = a.decode('utf8')[::-1].encode('utf8')", "out": "逆順の列"}
{"in": "conn.execute('INSERT INTO table (ColName) VALUES (?);', [','.join(list)])", "out": "リストの文字列化"}
{"in": "[i for i, x in enumerate([1, 2, 3, 2]) if x == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "print(' '.join(i for i in word.split(' ') if not i.endswith(':')))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "l = [int(x) for x in s.split()]", "out": "リスト内包記法 変換"}
{"in": "desired_array = [int(numeric_string) for numeric_string in current_array]", "out": "リスト内包記法 変換"}
{"in": "arr = [line.split(',') for line in open('./urls-eu.csv')]", "out": "リスト内包記法 変換"}
{"in": "[x for y, x in sorted(zip(Y, X))]", "out": "リスト内包記法 変換"}
{"in": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]", "out": "引数展開"}
{"in": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}", "out": "辞書内包記法"}
{"in": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('[.]', '', re.search('(?<=//).*?(?=/)', str).group(0)))", "out": "正規表現"}
{"in": "[elem.tag for elem in a.iter() if elem is not a]", "out": "リスト内包記法 フィルタ"}
{"in": "dict((v, k) for k, v in my_dict.items())", "out": "辞書内包記法"}
{"in": "\"\"\" \"\"\".join(PorterStemmer().stem_word(word) for word in text.split(' '))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict(zip(keys, zip(*data)))", "out": "引数展開"}
{"in": "[sum(x) for x in zip(*l)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "print([key for key in d if d[key] == 1])", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")", "out": "正規表現"}
{"in": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(['X is ', x.__format__('')])", "out": "リストの文字列化"}
{"in": "x = x[~numpy.isnan(x)]", "out": "反転演算子"}
{"in": "grouped.apply(lambda x: x.sum() if len(x) > 2 else None).dropna()", "out": "三項演算子"}
{"in": "np.sqrt(((A - B) ** 2).sum(-1))", "out": "累乗演算子"}
{"in": "[(a, b, c) for a, (b, c) in l]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(str(p) for p in myList))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[i for i in a if i.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "[tup[0] for tup in A]", "out": "リスト内包記法 変換"}
{"in": "dict((name, eval(name, globals(), {})) for name in ['i', 'j', 'k'])", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(chr(i) for i in L)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')", "out": "日付書式"}
{"in": "[int(x) for x in list('{0:0b}'.format(8))]", "out": "辞書内包記法"}
{"in": "pd.to_datetime(tempDF['date'], format='%Y-%m-%d %H:%M:%S.%f', errors='coerce')", "out": "日付書式 時刻書式"}
{"in": "re.sub('(.*)</div>', '\\\\1</bad>', s)", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join(s.split())", "out": "リストの文字列化"}
{"in": "values = np.array([i for i in range(100)], dtype=np.float64)", "out": "リスト内包記法 変換"}
{"in": "re.sub('([characters])', '\\\\1\\\\1', text.read())", "out": "正規表現"}
{"in": "cleaned_list = [x for x in some_list if x is not thing]", "out": "リスト内包記法 フィルタ"}
{"in": "list(itertools.product(*arrays))", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])", "out": "リストの文字列化"}
{"in": "[dict(t) for t in set([tuple(d.items()) for d in l])]", "out": "辞書内包記法"}
{"in": "[x for x in a if x not in [2, 3, 7]]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join(foo.split())", "out": "リストの文字列化"}
{"in": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')", "out": "日付書式"}
{"in": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[list(i) for i in set(tuple(i) for i in testdata)]", "out": "リスト内包記法 変換"}
{"in": "output = re.sub('(<textarea.*>).*(</textarea>)', '\\\\1Bar\\\\2', s)", "out": "正規表現"}
{"in": "numpy.array([[key, val] for key, val in result.items()], dtype)", "out": "リスト内包記法 変換"}
{"in": "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "('x = %s' % '\\\\u041c\\\\u0438\\\\u0440').encode('utf-8')", "out": "ユニコード"}
{"in": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)", "out": "辞書内包記法"}
{"in": "\"\"\",+\"\"\".join(c.rsplit('+', 1))", "out": "リストの文字列化"}
{"in": "ax.set_xlabel('Temperature (\\u2103)')", "out": "ユニコード"}
{"in": "numpy.array([(key, val) for key, val in result.items()], dtype)", "out": "リスト内包記法 変換"}
{"in": "{i: 'updated' for i, j in list(d.items()) if j != 'None'}", "out": "辞書内包記法"}
{"in": "[(x + y) for x in '12345' for y in 'ab']", "out": "リスト内包記法 変換"}
{"in": "[x for x in lst if fn(x) != 0]", "out": "リスト内包記法 フィルタ"}
{"in": "list(itertools.chain(*a))", "out": "引数展開"}
{"in": "Book.objects.create(**d)", "out": "引数展開"}
{"in": "sum([item['gold'] for item in example_list])", "out": "リスト内包記法 変換"}
{"in": "x = [int(i) for i in x.split()]", "out": "リスト内包記法 変換"}
{"in": "dt.datetime.today().strftime('%m/%d/%Y')", "out": "日付書式"}
{"in": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T", "out": "リスト内包記法 変換"}
{"in": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "re.compile('(.)\\\\1')", "out": "正規表現"}
{"in": "[map(int, sublist) for sublist in lst]", "out": "リスト内包記法 変換"}
{"in": "return ''.join(random.choice(string.lowercase) for i in range(length))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "output = ''.join(item[0].upper() for item in input.split())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "re.compile('^([^A]*)AA([^A]|AA)*$')", "out": "正規表現"}
{"in": "print(', '.join(str(x) for x in list_of_ints))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[value for pair in zip(a, b[::-1]) for value in pair]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "[(lambda x: x * x)(x) for x in range(10)]", "out": "リスト内包記法 変換"}
{"in": "print(''.join(map(str, data)))", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join(chr(i) for i in myintegers)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('\\\\[.*?\\\\]', '', 'abcd[e]yth[ac]ytwec')", "out": "正規表現"}
{"in": "x = [[None for _ in range(5)] for _ in range(6)]", "out": "リスト内包記法 変換"}
{"in": "[(i, c) for i, c in enumerate('xdtwkeltjwlkejt7wthwk89lk') if c.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "[int(x, 16) for x in L]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(entry_list)", "out": "リストの文字列化"}
{"in": "[(i, j) for i, j in zip(lst, lst2)]", "out": "リスト内包記法 変換"}
{"in": "result = [x for x in list_a if x[0] in list_b]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")", "out": "正規表現"}
{"in": "[(x + y) for x in l2 for y in l1]", "out": "リスト内包記法 変換"}
{"in": "TEMPLATE_CONTEXT_PROCESSORS += 'django.core.context_processors.request'", "out": "正規表現"}
{"in": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))", "out": "リスト内包記法 変換"}
{"in": "[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']", "out": "リスト内包記法 フィルタ"}
{"in": "[item[0] for item in queryresult]", "out": "リスト内包記法 変換"}
{"in": "[(a * b) for a, b in zip(lista, listb)]", "out": "リスト内包記法 変換"}
{"in": "[d for d in a if d['name'] == 'pluto']", "out": "リスト内包記法 フィルタ"}
{"in": "res_list = [x[0] for x in rows]", "out": "リスト内包記法 変換"}
{"in": "[max(len(a), len(b)) for a, b in zip(*x)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[d['key'] for d in l if 'key' in d]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('\\\\bfoo\\\\b', cased_replacer('bar'), 'this is Foo', flags=re.I)", "out": "正規表現"}
{"in": "re.findall('([0-9]+)([A-Z])', '20M10000N80M')", "out": "正規表現"}
{"in": "re.findall('([0-9]+|[A-Z])', '20M10000N80M')", "out": "正規表現"}
{"in": "re.findall('#(\\\\w+)', 'http://example.org/#comments')", "out": "正規表現"}
{"in": "{k: v for k, v in list(hand.items()) if v}", "out": "辞書内包記法"}
{"in": "next((idx, x, y) for idx, (x, y) in enumerate(zip(list1, list2)) if x != y)", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)", "out": "正規表現"}
{"in": "sum(item['gold'] for item in example_list)", "out": "リスト内包記法 変換"}
{"in": "self.cursor.execute(\"SELECT COUNT(*) FROM table WHERE asset_type='movie'\")", "out": "引数展開"}
{"in": "[key for item in lst for key, value in list(my_dict.items()) if item in value]", "out": "辞書内包記法"}
{"in": "[y for x in range(3) for y in [x, x]]", "out": "リスト内包記法 変換"}
{"in": "total = sum(float(item) for item in s.split(','))", "out": "リスト内包記法 変換"}
{"in": "mylist.sort(key=lambda x: Min if x is None else x)", "out": "三項演算子"}
{"in": "re.findall('\\\\d+|\\\\S', string)", "out": "正規表現"}
{"in": "regex = re.compile('((\\\\d+,)*\\\\d+)')", "out": "正規表現"}
{"in": "re.split('\\\\t+', yas.rstrip('\\t'))", "out": "正規表現"}
{"in": "[s for s in (square(x) for x in range(12)) if s > 50]", "out": "リスト内包記法 フィルタ"}
{"in": "dict(item.split('=') for item in s.split(';'))", "out": "辞書内包記法"}
{"in": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]", "out": "リスト内包記法 変換"}
{"in": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]", "out": "リスト内包記法 変換"}
{"in": "[l.split('\\\\')[-1] for l in list_dirs]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "\"\"\"\"\"\".join(buffer)", "out": "リストの文字列化"}
{"in": "print(''.join(a))", "out": "リストの文字列化"}
{"in": "re.sub('([abc])', '\\\\1\\\\1', text.read())", "out": "正規表現"}
{"in": "re.sub('(.)', '\\\\1\\\\1', text.read())", "out": "正規表現"}
{"in": "super(ChildClass, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[sum(map(int, s)) for s in example.split()]", "out": "リスト内包記法 変換"}
{"in": "[k for k in lst if 'ab' in k]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('(?<=.)(?=.)', '-', str)", "out": "正規表現"}
{"in": "any(e in lestring for e in lelist)", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(c for c in 'abc123def456' if c.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "dict((d['name'], d) for d in listofdict)", "out": "辞書内包記法"}
{"in": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)", "out": "正規表現"}
{"in": "last = len(s) - s[::-1].index(x) - 1", "out": "逆順の列"}
{"in": "items = [item for item in container if item.attribute == value]", "out": "リスト内包記法 フィルタ"}
{"in": "myList = [i.split('\\t')[0] for i in myList]", "out": "リスト内包記法 変換"}
{"in": "{d['Name']: d['Age'] for d in thisismylist}", "out": "辞書内包記法"}
{"in": "[(y - x) for x, y in zip(L, L[1:])]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\([^)]*\\\\)', '', filename)", "out": "正規表現"}
{"in": "results += [each for each in os.listdir(folder) if each.endswith('.c')]", "out": "リスト内包記法 フィルタ"}
{"in": "[a for c in Cards for b in c for a in b]", "out": "リスト内包記法 変換"}
{"in": "[j for i in zip(a, b) for j in i]", "out": "リスト内包記法 変換"}
{"in": "new_dict = {k: v for k, v in zip(keys, values)}", "out": "辞書内包記法"}
{"in": "next((key, value) for key, value in list(c.items()) if value > 1)", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')", "out": "正規表現"}
{"in": "names = [item['name'] for item in data]", "out": "リスト内包記法 変換"}
{"in": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))", "out": "正規表現 ユニコード"}
{"in": "[int(x) for x in regex.findall(filename)]", "out": "リスト内包記法 変換"}
{"in": "zip(*l)", "out": "引数展開"}
{"in": "dict((k, float(d2[k]) / d1[k]) for k in d2)", "out": "辞書内包記法"}
{"in": "\"\"\",\"\"\".join(x or '0' for x in s.split(','))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)", "out": "正規表現"}
{"in": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')", "out": "ユニコード"}
{"in": "dict(zip(l[::2], l[1::2]))", "out": "ひとつおきの列"}
{"in": "[(v, k) for k, v in d.items()]", "out": "リスト内包記法 変換"}
{"in": "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "re.findall('\\\\s', chrs, re.UNICODE)", "out": "正規表現"}
{"in": "[f(x) for x in list]", "out": "リスト内包記法 変換"}
{"in": "[''.join(l) for l in list_of_lists]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')", "out": "正規表現"}
{"in": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])", "out": "辞書内包記法"}
{"in": "any(isinstance(el, list) for el in input_list)", "out": "リスト内包記法 変換"}
{"in": "print(', ,'.join([str(i[0]) for i in mytuple]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "func(*args, **kwargs)", "out": "引数展開"}
{"in": "[v for k, v in list(my_dict.items()) if 'Date' in k]", "out": "辞書内包記法"}
{"in": "l = [[x for x in range(5)] for y in range(4)]", "out": "リスト内包記法 変換"}
{"in": "[[y for x, y in sublist] for sublist in l]", "out": "リスト内包記法 変換"}
{"in": "pd.DataFrame(data=[i[0] for i in x], columns=['X'])", "out": "リスト内包記法 変換"}
{"in": "re.findall('%(\\\\d+)l\\\\\\\\%\\\\((.*?)\\\\\\\\\\\\)', r)", "out": "正規表現"}
{"in": "my_dict = {x[0]: x[1:] for x in my_list}", "out": "辞書内包記法"}
{"in": "[i for i, elem in enumerate(bool_list, 1) if elem]", "out": "リスト内包記法 フィルタ"}
{"in": "m = re.search('\\\\[(\\\\w+)\\\\]', s)", "out": "正規表現"}
{"in": "sum(x[1] for x in structure)", "out": "リスト内包記法 変換"}
{"in": "example = [[x.replace('\\r\\n', '') for x in i] for i in example]", "out": "リスト内包記法 変換"}
{"in": "func(*args)", "out": "引数展開"}
{"in": "re.findall('(b+a)+b+', mystring)", "out": "正規表現"}
{"in": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]", "out": "リスト内包記法 変換"}
{"in": "all(value == 0 for value in list(your_dict.values()))", "out": "辞書内包記法"}
{"in": "new_list = [x.split()[-1] for x in Original_List]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "min([x for x in num_list if x > 2])", "out": "リスト内包記法 フィルタ"}
{"in": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))", "out": "正規表現"}
{"in": "theset = set(k.lower() for k in thedict)", "out": "辞書内包記法"}
{"in": "print('%.3f' % 4.53)", "out": "少数点表示制限"}
{"in": "[a[x].append(b[x]) for x in range(3)]", "out": "リスト内包記法 変換"}
{"in": "hex(sum(b << i for i, b in enumerate(reversed(walls))))", "out": "リスト内包記法 変換"}
{"in": "return my_list == list(range(my_list[0], my_list[-1] + 1))", "out": "末尾の要素"}
{"in": "Book.objects.filter(pk=pk).update(**d)", "out": "引数展開"}
{"in": "[[Foo() for x in range(10)] for y in range(10)]", "out": "リスト内包記法 変換"}
{"in": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)", "out": "正規表現"}
{"in": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)", "out": "正規表現"}
{"in": "[(x + y) for x, y in zip(first, second)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join('Hello')", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join([1, 2, 3, 4])", "out": "リストの文字列化"}
{"in": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')", "out": "リスト内包記法 変換 少数点表示制限 リストの文字列化"}
{"in": "[(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]", "out": "リスト内包記法 フィルタ"}
{"in": "result = [sum(b) for b in a]", "out": "リスト内包記法 変換"}
{"in": "time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())", "out": "日付書式"}
{"in": "re.findall('TAA(?:[ATGC]{3})+?TAA', seq)", "out": "正規表現"}
{"in": "re.split('\\\\b\\\\w+\\\\.\\\\w+@', s)", "out": "正規表現"}
{"in": "datetime.strptime('2011221', '%Y%W%w')", "out": "日付書式"}
{"in": "print([word for word in words if word[0].isupper()])", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())", "out": "辞書内包記法"}
{"in": "[y[1] for y in sorted([(myDict[x][2], x) for x in list(myDict.keys())])]", "out": "リスト内包記法 変換"}
{"in": "list_of_lists = [list(k) for k in list_of_tuples]", "out": "リスト内包記法 変換"}
{"in": "re.sub('g+', 'g', 'omgggg')", "out": "正規表現"}
{"in": "r = re.compile('(?P<int>^\\\\d+$)|(?P<word>^\\\\w+$)')", "out": "正規表現"}
{"in": "dict(pair for d in L for pair in list(d.items()))", "out": "辞書内包記法"}
{"in": "json.dumps({str(k): v for k, v in data.items()})", "out": "辞書内包記法"}
{"in": "print(' '.join([str(ord(a)) for a in data]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "regex = re.compile('((\\\\d+,?)+)')", "out": "正規表現"}
{"in": "re.search('name (\\\\w+)', s)", "out": "正規表現"}
{"in": "hex(int(''.join([str(int(b)) for b in walls]), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "map(list, zip(*main_list))", "out": "引数展開"}
{"in": "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "np.random.uniform(0, cutoffs[-1])", "out": "末尾の要素"}
{"in": "[f.name for f in br.forms()]", "out": "リスト内包記法 変換"}
{"in": "re.findall('([a-z])*', '123abc789')", "out": "正規表現"}
{"in": "re.findall('(?:[a-z])*', '123abc789')", "out": "正規表現"}
{"in": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])", "out": "引数展開"}
{"in": "[k for k, v in sorted(list(mydict.items()), key=lambda k_v: k_v[1][1])]", "out": "辞書内包記法"}
{"in": "'used\\u200b'.strip('\\u200b')", "out": "ユニコード"}
{"in": "function_in_library('Hello %s' % ', '.join(['%s'] * len(my_args)), my_args)", "out": "リストの文字列化"}
{"in": "list(i[0] == i[1] for i in zip(list1, list2))", "out": "リスト内包記法 変換"}
{"in": "print(all(word[0].isupper() for word in words))", "out": "リスト内包記法 変換"}
{"in": "pd.DataFrame([{val: key for key, val in list(d.items())} for d in df.to_dict('r')])", "out": "辞書内包記法"}
{"in": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t', header=0)", "out": "反転演算子"}
{"in": "datetimevariable.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print([y for x in list(dict.items()) for y in x])", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(c for c in text if c not in 'aeiouAEIOU')", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[x for x in list_of_nums if x != 2]", "out": "リスト内包記法 フィルタ"}
{"in": "new_list = [x[:] for x in old_list]", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')", "out": "時刻書式"}
{"in": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)", "out": "正規表現"}
{"in": "plt.scatter(*zip(*li))", "out": "引数展開"}
{"in": "re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')", "out": "正規表現"}
{"in": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化 末尾の要素"}
{"in": "randomList = [random.random() for _ in range(10)]", "out": "リスト内包記法 変換"}
{"in": "[(a + i.reshape(2, 2)) for i in np.identity(4)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')", "out": "正規表現"}
{"in": "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "[x for x in L if x is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(i, max(j)) for i, j in list(d.items())]", "out": "リスト内包記法 変換"}
{"in": "sum(i * j for i, j in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "os.path.join(*x.split(os.path.sep)[2:])", "out": "引数展開"}
{"in": "[(x / y) for x, y in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "a = [x for x in a if x['link'] not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(isinstance(x, int) for x in a)", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('[u0600-u06FF]+', my_string))", "out": "正規表現"}
{"in": "print(re.findall('[0-u]+', my_string))", "out": "正規表現"}
{"in": "list(zip(a, b, zip(c[0::2], c[1::2]), d))", "out": "ひとつおきの列"}
{"in": "result = {k: d2.get(v) for k, v in list(d1.items())}", "out": "辞書内包記法"}
{"in": "return args[-1] + mySum(args[:-1])", "out": "末尾の要素"}
{"in": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]", "out": "辞書内包記法 正規表現"}
{"in": "\"\"\", \"\"\".join(['%.2f'] * len(x))", "out": "少数点表示制限 リストの文字列化"}
{"in": "t = tuple(x[0] for x in s)", "out": "リスト内包記法 変換"}
{"in": "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')", "out": "正規表現"}
{"in": "list_of_tuples = [tuple(k) for k in list_of_lists]", "out": "リスト内包記法 変換"}
{"in": "x[::-1]", "out": "逆順の列"}
{"in": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "print(re.findall(pattern, x))", "out": "正規表現"}
{"in": "[j for i in x for j in i]", "out": "リスト内包記法 変換"}
{"in": "np.split(a, [-1])", "out": "末尾の要素"}
{"in": "\"\"\"\"\"\".join(['x', 'x', 'x'])", "out": "リストの文字列化"}
{"in": "c = [(m.start(), m.end() - 1) for m in re.finditer('\\\\S+', a)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "\"\"\" \"\"\".join(mystring.split())", "out": "リストの文字列化"}
{"in": "[i for s in [list(d.keys()) for d in LoD] for i in s]", "out": "リスト内包記法 変換"}
{"in": "[[i, i * 10] for i in range(5)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('[a-z]*', 'f233op')", "out": "正規表現"}
{"in": "[(c / t) for c, t in zip(conversions, trials)]", "out": "リスト内包記法 変換"}
{"in": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')", "out": "正規表現"}
{"in": "[(x[i] == y[i]) for i in range(len(x))]", "out": "リスト内包記法 変換"}
{"in": "[list(t) for t in zip(*list_of_tuples)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "datetime.strptime('2012-03-01T10:00:00Z', '%Y-%m-%dT%H:%M:%SZ')", "out": "日付書式 時刻書式"}
{"in": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', '6,7)')", "out": "正規表現"}
{"in": "re.sub('(.)(?=.)', '\\\\1-', s)", "out": "正規表現"}
{"in": "out = ''.join(c for c in asking if c not in ('!', '.', ':'))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "{(x ** 2) for x in range(100)}", "out": "辞書内包記法 累乗演算子"}
{"in": "[x[0] for x in rows]", "out": "リスト内包記法 変換"}
{"in": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)", "out": "反転演算子"}
{"in": "re.findall('\\\\w+', \"Don't read O'Rourke's books!\")", "out": "正規表現"}
{"in": "dict((i, list(range(int(i), int(i) + 2))) for i in ['1', '2'])", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "plt.rc('font', **{'size': '30'})", "out": "引数展開"}
{"in": "i = a.argsort(axis=None)[::-1]", "out": "逆順の列"}
{"in": "sum(ord(c) for c in string)", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')", "out": "日付書式 時刻書式"}
{"in": "\"\"\"\"\"\".join(map(lambda x: x * 7, 'map'))", "out": "リストの文字列化"}
{"in": "np.cumsum(a[::-1])[::-1] - np.cumsum(a)", "out": "逆順の列"}
{"in": "sum(i * i for i in l)", "out": "リスト内包記法 変換"}
{"in": "[dict(zip(k, x)) for x in v]", "out": "辞書内包記法"}
{"in": "my_new_list = zip(my_list[0::2], my_list[1::2])", "out": "ひとつおきの列"}
{"in": "[(x, lst2[i]) for i, x in enumerate(lst)]", "out": "リスト内包記法 変換"}
{"in": "time.strptime('2011-03-06T03:36:45+0000', '%Y-%m-%dT%H:%M:%S+0000')", "out": "日付書式 時刻書式"}
{"in": "re.findall('\\\\d+(?=[^[]+$)', s)", "out": "正規表現"}
{"in": "matching = [s for s in some_list if 'abc' in s]", "out": "リスト内包記法 フィルタ"}
{"in": "z = [(i == j) for i, j in zip(x, y)]", "out": "リスト内包記法 変換"}
{"in": "pd.to_datetime(df['year'] * 1000 + df['doy'], format='%Y%j')", "out": "日付書式"}
{"in": "winpath = 'C:\\\\Users\\\\Administrator\\\\bin'", "out": "ユニコード"}
{"in": "re.findall('\\\\w', 'abcdefg')", "out": "正規表現"}
{"in": "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]", "out": "正規表現"}
{"in": "[(x + y) for x in '12345' for y in 'abc']", "out": "リスト内包記法 変換"}
{"in": "re.split('(?<!\\\\d),(?! )|(?<=\\\\d),(?![\\\\d ])', s)", "out": "正規表現"}
{"in": "[x.strip() for x in s.split(',')]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"C:\\\\Users\\\\user\\\\Desktop\\\\Filed_055123.pdf\"\"\"", "out": "ユニコード"}
{"in": "[x for x in a if x not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "sys.path.append('C:\\\\Users\\\\Jimmy\\\\Documents\\\\Python')", "out": "ユニコード"}
{"in": "np.count_nonzero(~np.isnan(data))", "out": "反転演算子"}
{"in": "length = sum(len(s) for s in strings)", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\d:::.+?(?=\\\\d:::|$)', a)", "out": "正規表現"}
{"in": "emaillist = '\\n'.join(item[0] for item in queryresult)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[func(a, b) for a, b in zip(arrA, arrB)]", "out": "リスト内包記法 変換"}
{"in": "my_list = [line.split(',') for line in open('filename.txt')]", "out": "リスト内包記法 変換"}
{"in": "regex = re.compile('\\\\d+')", "out": "正規表現"}
{"in": "[i.partition('\\t')[-1] for i in l if '\\t' in i]", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])", "out": "辞書内包記法"}
{"in": "[(v, k) for k, v in list(d.items())]", "out": "リスト内包記法 変換"}
{"in": "[int(i) for i in str_list]", "out": "リスト内包記法 変換"}
{"in": "super(MyModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "print('{0:.2f}'.format(your_number))", "out": "少数点表示制限"}
{"in": "[([0] * width) for y in range(height)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(parts[1:])", "out": "リストの文字列化"}
{"in": "T = [L[i] for i in Idx]", "out": "リスト内包記法 変換"}
{"in": "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')", "out": "日付書式"}
{"in": "[x.lower() for x in words]", "out": "リスト内包記法 変換"}
{"in": "[x for x in li if 'ar' in x[2]]", "out": "リスト内包記法 フィルタ"}
{"in": "somelist = [x for x in somelist if not determine(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "df = df[df[['col_1', 'col_2']].apply(lambda x: f(*x), axis=1)]", "out": "引数展開"}
{"in": "[y for y in a if y not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "print(' '.join(sorted(set(words), key=words.index)))", "out": "リストの文字列化"}
{"in": "y = [i[0] for i in x]", "out": "リスト内包記法 変換"}
{"in": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]", "out": "反転演算子"}
{"in": "zip(*[(1, 4), (2, 5), (3, 6)])", "out": "引数展開"}
{"in": "list(i for i in range(3))", "out": "リスト内包記法 変換"}
{"in": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}", "out": "辞書内包記法"}
{"in": "slice = [arr[i][0:2] for i in range(0, 2)]", "out": "リスト内包記法 変換"}
{"in": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")", "out": "正規表現"}
{"in": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}", "out": "辞書内包記法"}
{"in": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]", "out": "辞書内包記法"}
{"in": "a = [mynamedtuple(*el) for el in a]", "out": "リスト内包記法 変換 引数展開"}
{"in": "any(substring in string for substring in substring_list)", "out": "リスト内包記法 変換"}
{"in": "[item for innerlist in outerlist for item in innerlist]", "out": "リスト内包記法 変換"}
{"in": "soup.findAll(id=re.compile('para$'))", "out": "正規表現"}
{"in": "regexp = re.compile('^group/(?P<group>[^/]+)/users$')", "out": "正規表現"}
{"in": "regexp = re.compile('^group/(?P<group>[^/]+)/users/(?P<user>[^/]+)$')", "out": "正規表現"}
{"in": "cleaned = [x for x in your_list if x]", "out": "リスト内包記法 フィルタ"}
{"in": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]", "out": "リスト内包記法 変換"}
{"in": "list_of_lists = [[try_int(x) for x in lst] for lst in list_of_lists]", "out": "リスト内包記法 変換"}
{"in": "nodes = [[Node() for j in range(cols)] for i in range(rows)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')", "out": "正規表現"}
{"in": "print([s.replace('8', '') for s in lst])", "out": "リスト内包記法 変換"}
{"in": "print([u for v in [[i, i] for i in range(5)] for u in v])", "out": "リスト内包記法 変換"}
{"in": "dt.strftime('%m/%d/%Y')", "out": "日付書式"}
{"in": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])", "out": "リスト内包記法 変換"}
{"in": "sep = re.compile('[\\\\s,]+')", "out": "正規表現"}
{"in": "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')", "out": "正規表現"}
{"in": "[item for item in my_list if any(x in item for x in bad)]", "out": "リスト内包記法 フィルタ"}
{"in": "list(x * y for x, y in list(zip(a, b)))", "out": "リスト内包記法 変換"}
{"in": "[[int(x)] for y in list_of_lists for x in y]", "out": "リスト内包記法 変換"}
{"in": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)", "out": "正規表現"}
{"in": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]", "out": "辞書内包記法"}
{"in": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)", "out": "正規表現"}
{"in": "re.sub('\\\\b\\\\d+\\\\b', '', s)", "out": "正規表現"}
{"in": "c = [b[i] for i in index]", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile('review: (http://url.com/(\\\\d+)\\\\s?)+', re.IGNORECASE)", "out": "正規表現"}
{"in": "pattern = re.compile('/review: (http://url.com/(\\\\d+)\\\\s?)+/', re.IGNORECASE)", "out": "正規表現"}
{"in": "re.split('_for_', 'happy_hats_for_cats')", "out": "正規表現"}
{"in": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)", "out": "正規表現"}
{"in": "[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]", "out": "リスト内包記法 変換"}
{"in": "[(int(x) if x else 0) for x in data.split(',')]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "''.join([s.string for s in s.findAll(text=True)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "any(x in string for x in search)", "out": "リスト内包記法 変換"}
{"in": "print([map(solve, x.split('\\t')) for x in s.rstrip().split('\\r\\n')])", "out": "リスト内包記法 変換"}
{"in": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())", "out": "辞書内包記法"}
{"in": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)", "out": "正規表現"}
{"in": "print('Total cost is: ${:,.2f}'.format(TotalAmount))", "out": "少数点表示制限"}
{"in": "set([i for s in [list(d.keys()) for d in LoD] for i in s])", "out": "リスト内包記法 変換"}
{"in": "[x for b in a for x in b]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)", "out": "正規表現"}
{"in": "re.match('(?:.*?[A-Z]){3}.*?([A-Z].*)', s).group(1)", "out": "正規表現"}
{"in": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)", "out": "正規表現"}
{"in": "[int(d) for d in str(bin(x))[2:]]", "out": "リスト内包記法 変換"}
{"in": "{k: int(v) for k, v in d.items()}", "out": "辞書内包記法"}
{"in": "[max(len(str(x)) for x in line) for line in zip(*foo)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "dict(zip([d.pop('name') for d in listofdict], listofdict))", "out": "辞書内包記法"}
{"in": "a.fromlist([int(val) for val in stdin.read().split()])", "out": "リスト内包記法 変換"}
{"in": "c = [[(i + j) for i, j in zip(e, b)] for e in a]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))", "out": "正規表現 ユニコード"}
{"in": "pattern = re.compile('^(?:\\\\\\\\.|[^/\\\\\\\\])*/((?:\\\\\\\\.|[^/\\\\\\\\])*)/')", "out": "正規表現"}
{"in": "re.findall('((?:A|B|C)D)', 'BDE')", "out": "正規表現"}
{"in": "re.compile('(\\\\s+)').split('\\tthis is an  example')", "out": "正規表現"}
{"in": "[sublist[::-1] for sublist in to_reverse[::-1]]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "[str(wi) for wi in wordids]", "out": "リスト内包記法 変換"}
{"in": "keys, values = zip(*list(d.items()))", "out": "引数展開"}
{"in": "[[] for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\b[A-Z]', formula)", "out": "正規表現"}
{"in": "[s.strip() for s in input().split(',')]", "out": "リスト内包記法 変換"}
{"in": "url.split('&')[-1].replace('=', '') + '.html'", "out": "末尾の要素"}
{"in": "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()", "out": "正規表現"}
{"in": "re.findall('[a-zA-Z_]+', string)", "out": "正規表現"}
{"in": "print([obj.attr for obj in my_list_of_objs])", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\$([^$]*)\\\\$', string)", "out": "正規表現"}
{"in": "re.sub('\\\\.(?=[^ .])', '. ', para)", "out": "正規表現"}
{"in": "max(len(word) for word in i)", "out": "リスト内包記法 変換"}
{"in": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}", "out": "辞書内包記法"}
{"in": "re.findall('(?=(SS..|S.Q.|S..P|.SQ.|.S.P|..QP))', s)", "out": "正規表現"}
{"in": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)", "out": "正規表現"}
{"in": "l = (int(x) for x in s.split())", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime('07/28/2014 18:54:55.099', '%m/%d/%Y %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "print(''.join(parts[1:]))", "out": "リストの文字列化"}
{"in": "msglist = [hextotal[i:i + 4096] for i in range(0, len(hextotal), 4096)]", "out": "リスト内包記法 変換"}
{"in": "df[df.index < '2000-01-04'].index[-1]", "out": "末尾の要素"}
{"in": "y = [row[:] for row in x]", "out": "リスト内包記法 変換"}
{"in": "super(ArtefactForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))", "out": "正規表現"}
{"in": "sum(1 for i, j in zip(a, b) if i != j)", "out": "リスト内包記法 フィルタ"}
{"in": "exec ('f(' + ','.join(str(i) for i in range(5000)) + ')')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(url.split('/')[-1].split('.')[0])", "out": "末尾の要素"}
{"in": "upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')", "out": "正規表現"}
{"in": "df.to_csv(filename, date_format='%Y%m%d')", "out": "日付書式"}
{"in": "repeat = re.compile('(?P<start>[a-z])(?P=start)*-?')", "out": "正規表現"}
{"in": "['hello{0}'.format(i) for i in a]", "out": "辞書内包記法"}
{"in": "re.findall('a*?bc*?', 'aabcc', re.DOTALL)", "out": "正規表現"}
{"in": "print('here is your checkmark: ' + '\\u2713')", "out": "ユニコード"}
{"in": "[line.split() for line in f]", "out": "リスト内包記法 変換"}
{"in": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]", "out": "リスト内包記法 変換"}
{"in": "print(zip(my_list[0::2], my_list[1::2]))", "out": "ひとつおきの列"}
{"in": "json.dumps([dict(list(row.items())) for row in rs])", "out": "辞書内包記法"}
{"in": "[k for k, v in User._fields.items() if v.required]", "out": "リスト内包記法 フィルタ"}
{"in": "d = {t[0]: t[1:] for t in l}", "out": "辞書内包記法"}
{"in": "[i.split('\\t', 1)[0] for i in l]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(lines))", "out": "リストの文字列化"}
{"in": "writer.writerows(zip(*[d[key] for key in keys]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "sum(len(y) for y in x if len(y) > 1)", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join('  '.join(map(str, row)) for row in t))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "some_func(*params)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(s)", "out": "リストの文字列化"}
{"in": "[x for x in file.namelist() if x.endswith('/')]", "out": "リスト内包記法 フィルタ"}
{"in": "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))", "out": "引数展開"}
{"in": "[np.einsum('i,j->', x[n], e[n]) for n in range(len(x))]", "out": "リスト内包記法 変換"}
{"in": "super(ProductSerializer, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "sum(x * y for x, y in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "[k for d in list(foo.values()) for k in d]", "out": "リスト内包記法 変換"}
{"in": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])", "out": "リスト内包記法 フィルタ 三項演算子 引数展開"}
{"in": "{k: v for k, v in enumerate(range(10)) if v % 2 == 0}", "out": "辞書内包記法"}
{"in": "print('[%s]' % ', '.join('%.3f' % val for val in list))", "out": "リスト内包記法 変換 少数点表示制限 リストの文字列化"}
{"in": "[s[:5] for s in buckets]", "out": "リスト内包記法 変換"}
{"in": "re.findall('[\\u4e00-\\u9fff]+', ipath)", "out": "正規表現 ユニコード"}
{"in": "[x for x in j if x >= 5]", "out": "リスト内包記法 フィルタ"}
{"in": "[m.group(1) for l in lines for m in [regex.search(l)] if m]", "out": "リスト内包記法 フィルタ"}
{"in": "no_integers = [x for x in mylist if not isinstance(x, int)]", "out": "リスト内包記法 フィルタ"}
{"in": "re.split(' +', str1)", "out": "正規表現"}
{"in": "soup.find_all('a', href=re.compile('http://www\\\\.iwashere\\\\.com/'))", "out": "正規表現"}
{"in": "re.findall('\\\\[(.*?)\\\\]', mystring)", "out": "正規表現"}
{"in": "lambda x: True if x % 2 == 0 else False", "out": "三項演算子"}
{"in": "print(' '.join(row))", "out": "リストの文字列化"}
{"in": "list(itertools.product(*a))", "out": "引数展開"}
{"in": "str(n) == str(n)[::-1]", "out": "逆順の列"}
{"in": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "np.sqrt(np.sum((a - b) ** 2, axis=1))", "out": "累乗演算子"}
{"in": "[i for i in ('a', 'b', 'c')]", "out": "リスト内包記法 変換"}
{"in": "[(lambda x: x * x) for x in range(10)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\d+\\\\.\\\\d+', 'Current Level: 13.4 db.')", "out": "正規表現"}
{"in": "re.sub('\\\\.[^.]+$', '', s)", "out": "正規表現"}
{"in": "re.split('; |, ', str)", "out": "正規表現"}
{"in": "datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')", "out": "日付書式 時刻書式"}
{"in": "[row.split('\\t') for row in s.splitlines()]", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))", "out": "正規表現"}
{"in": "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))", "out": "正規表現"}
{"in": "os.chdir(os.path.expanduser('~/Documents'))", "out": "反転演算子"}
{"in": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]", "out": "リストの文字列化 逆順の列"}
{"in": "[''.join(x) for x in a]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "pattern = re.compile('(.)\\\\1?', re.IGNORECASE | re.DOTALL)", "out": "正規表現"}
{"in": "random.choice([k for k in d for x in d[k]])", "out": "リスト内包記法 変換"}
{"in": "zip(*main_list)", "out": "引数展開"}
{"in": "['8th', 'of', '\\u0418\\u044e\\u043d\\u044c']", "out": "ユニコード"}
{"in": "re.split('[ .]', 'a b.c')", "out": "正規表現"}
{"in": "done = [(el, x) for el in [a, b, c, d]]", "out": "リスト内包記法 変換"}
{"in": "print([[l[:i], l[i:]] for i in range(1, len(l))])", "out": "リスト内包記法 変換"}
{"in": "{k for d in LoD for k in list(d.keys())}", "out": "辞書内包記法"}
{"in": "re.search('Test(.*)print', testStr, re.DOTALL)", "out": "正規表現"}
{"in": "x = [i[0] for i in x]", "out": "リスト内包記法 変換"}
{"in": "print(''.join(choice(ascii_uppercase) for i in range(12)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "re.findall('[^ ]*.(?:cnn|espn).[^ ]*', u1)", "out": "正規表現"}
{"in": "listy = [[] for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "sum(1 for x in list(d.values()) if some_condition(x))", "out": "リスト内包記法 フィルタ"}
{"in": "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')", "out": "正規表現"}
{"in": "[y['baz'] for x in foos for y in x['bar']]", "out": "リスト内包記法 変換"}
{"in": "df.columns = [' '.join(col).strip() for col in df.columns.values]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[i for i in range(100) if i > 10 if i < 20]", "out": "リスト内包記法 フィルタ"}
{"in": "w = re.findall('[a-zA-Z\\xd1\\xf1]+', p.decode('utf-8'))", "out": "正規表現"}
{"in": "print('\\n'.join([' '.join(row) for row in matrix]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)", "out": "正規表現"}
{"in": "m[~m.mask]", "out": "反転演算子"}
{"in": "matrix = [([0] * 5) for i in range(5)]", "out": "リスト内包記法 変換"}
{"in": "super(Klass, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "[item for item in a if sum(item) > 10]", "out": "リスト内包記法 フィルタ"}
{"in": "{(p.id, ind): {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}", "out": "辞書内包記法"}
{"in": "[(x, f(x)) for x in iterable if f(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(1 if d['success'] else 0 for d in s)", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "d3 = {k: list(set(d1.get(k, [])).intersection(v)) for k, v in list(d2.items())}", "out": "辞書内包記法"}
{"in": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))", "out": "リストの文字列化"}
{"in": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])", "out": "リスト内包記法 変換 正規表現"}
{"in": "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))", "out": "正規表現"}
{"in": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)", "out": "正規表現"}
{"in": "re.compile('[ -\\xd7ff]', re.DEBUG)", "out": "正規表現"}
{"in": "re.compile('[ -\\ud7ff]', re.DEBUG)", "out": "正規表現 ユニコード"}
{"in": "print('[' + ','.join(\"'\" + str(x) + \"'\" for x in s) + ']')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('  +', ' ', s)", "out": "正規表現"}
{"in": "map(sum, zip(*lists))", "out": "引数展開"}
{"in": "[''.join(['a', 'b', 'c', 'd'])[i:j + 1] for i in range(4) for j in range(i, 4)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[next(it) for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "return re.sub('\\\\p{P}+', '', text)", "out": "正規表現"}
{"in": "all(x.count(1) == 3 for x in L)", "out": "リスト内包記法 変換"}
{"in": "max(test_string.rfind(i) for i in '([{')", "out": "辞書内包記法"}
{"in": "my_function(**data)", "out": "引数展開"}
{"in": "[x.index.tolist() for x in dfs]", "out": "リスト内包記法 変換"}
{"in": "reverse_d = {value: key for key, values in list(d.items()) for value in values}", "out": "辞書内包記法"}
{"in": "config_file = os.path.expanduser('~/foo.ini')", "out": "反転演算子"}
{"in": "\"\"\",\"\"\".join(['foo', 'bar', '', 'baz'])", "out": "リストの文字列化"}
{"in": "re.findall('.{,16}\\\\b', text)", "out": "正規表現"}
{"in": "some_other_function(*args, **kwargs)", "out": "引数展開"}
{"in": "[i for i in my_list if not i.startswith(('91', '18'))]", "out": "リスト内包記法 フィルタ"}
{"in": "myList[:] = [(x / myInt) for x in myList]", "out": "リスト内包記法 変換"}
{"in": "re.findall('(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)', x)", "out": "正規表現"}
{"in": "str_list = list([_f for _f in str_list if _f])", "out": "リスト内包記法 フィルタ"}
{"in": "open('names.txt', 'w').write(''.join(lines))", "out": "リストの文字列化"}
{"in": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]", "out": "リスト内包記法 フィルタ"}
{"in": "ax.legend(handles[::-1], labels[::-1], title='Line', loc='upper left')", "out": "逆順の列"}
{"in": "int('{:08b}'.format(n)[::-1], 2)", "out": "逆順の列"}
{"in": "simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))", "out": "辞書内包記法"}
{"in": "sorted([tuple(map(int, d.split(':'))) for d in my_time_list])", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')", "out": "日付書式"}
{"in": "re.sub('\\\\s{2,}', '|', line.strip())", "out": "正規表現"}
{"in": "sum(v for v in list(d.values()) if v > 0)", "out": "リスト内包記法 フィルタ"}
{"in": "[ord(c) for c in s.decode('hex')]", "out": "リスト内包記法 変換"}
{"in": "print(dict([s.split('=') for s in my_list]))", "out": "辞書内包記法"}
{"in": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))", "out": "リスト内包記法 変換 正規表現"}
{"in": "list_dict = {t[0]: t for t in tuple_list}", "out": "辞書内包記法"}
{"in": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)", "out": "辞書内包記法"}
{"in": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])", "out": "正規表現"}
{"in": "sentence = [word.lower() for word in sentence]", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')", "out": "日付書式 時刻書式"}
{"in": "re.sub(' +', ' ', s)", "out": "正規表現"}
{"in": "{_key: _value(_key) for _key in _container}", "out": "辞書内包記法"}
{"in": "return [list(x) for x in list(results.values())]", "out": "リスト内包記法 変換"}
{"in": "sorted(d['11163722404385'], key=lambda x: x[-1].date())", "out": "末尾の要素"}
{"in": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)", "out": "正規表現"}
{"in": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.search('[a-zA-Z]', the_string)", "out": "正規表現"}
{"in": "time.strftime('{%Y-%m-%d %H:%M:%S}')", "out": "日付書式 時刻書式"}
{"in": "re.sub('([a-z])\\\\1+', '\\\\1', 'ffffffbbbbbbbqqq')", "out": "正規表現"}
{"in": "{c: i for i, c in enumerate('xdtwkeltjwlkejt7wthwk89lk') if c.isdigit()}", "out": "辞書内包記法"}
{"in": "foo(*i)", "out": "引数展開"}
{"in": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])", "out": "リスト内包記法 変換"}
{"in": "[i for i, v in enumerate(a) if v > 4]", "out": "リスト内包記法 フィルタ"}
{"in": "[(i, j) for i, j in zip(a, x)]", "out": "リスト内包記法 変換"}
{"in": "sortedlist = [(k, a[k]) for k in sorted(a)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))", "out": "リストの文字列化"}
{"in": "a[1::2] = -1", "out": "ひとつおきの列"}
{"in": "sum(x == chosen_value for x in list(d.values()))", "out": "リスト内包記法 変換"}
{"in": "[list(l) for l in it.product([0, 1], repeat=3) if sum(l) != 2]", "out": "リスト内包記法 フィルタ"}
{"in": "[elem.tag for elem in a.iter()]", "out": "リスト内包記法 変換"}
{"in": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]", "out": "リスト内包記法 フィルタ"}
{"in": "re.search('^(http://)?(www\\\\.)?(vimeo\\\\.com/)?(\\\\d+)', embed_url).group(4)", "out": "正規表現"}
{"in": "json_string = json.dumps([ob.__dict__ for ob in list_name])", "out": "辞書内包記法"}
{"in": "feature3 = [d.get('Feature3') for d in df.dic]", "out": "リスト内包記法 変換"}
{"in": "site = ''.join(hxs.select(\"//h1[@class='state']/text()\").extract()).strip()", "out": "リストの文字列化"}
{"in": "print('{.5f}'.format(randomList[index]))", "out": "少数点表示制限"}
{"in": "win.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint)", "out": "正規表現"}
{"in": "[element for i, element in enumerate(centroids) if i not in index]", "out": "リスト内包記法 フィルタ"}
{"in": "new_list = [d[key] for key in string_list]", "out": "リスト内包記法 変換"}
{"in": "time.strftime('%l:%M%p %z on %b %d, %Y')", "out": "日付書式"}
{"in": "re.sub('<[^>]*>', '', mystring)", "out": "正規表現"}
{"in": "re.search('name (.*)', s)", "out": "正規表現"}
{"in": "[{key: dict(value)} for key, value in B.items()]", "out": "辞書内包記法"}
{"in": "\"\"\"\\\\uFEFF\"\"\".encode('UTF-8')", "out": "ユニコード"}
{"in": "df.groupby('A')['B'].agg(lambda col: ''.join(col))", "out": "リストの文字列化"}
{"in": "[l[i:i + 7] for i in range(0, len(l), 7)]", "out": "リスト内包記法 変換"}
{"in": "k = soup.find(text=re.compile('My keywords')).parent.text", "out": "正規表現"}
{"in": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})", "out": "辞書内包記法"}
{"in": "(set(x) for x in d.values())", "out": "リスト内包記法 変換"}
{"in": "[{'content': x['content'].lower()} for x in messages]", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.compile('$^')", "out": "正規表現"}
{"in": "[item for item in my_list if some_condition()]", "out": "リスト内包記法 フィルタ"}
{"in": "print([y for x in zip(['^'] * len(mystring), mystring.lower()) for y in x])", "out": "リスト内包記法 変換"}
{"in": "int(''.join(c for c in s if c.isdigit()))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print('%.5f' % randomList[index])", "out": "少数点表示制限"}
{"in": "\"\"\"{:20,.2f}\"\"\".format(1.8446744073709552e+19)", "out": "少数点表示制限"}
{"in": "[tag.text for tag in filter(pred, soup.find('tbody').find_all('a'))]", "out": "リスト内包記法 変換"}
{"in": "all(item in list(superset.items()) for item in list(subset.items()))", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(hex(ord(n)) for n in my_hex))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(myList[i - 1], myList[i]) for i in range(len(myList)) if myList[i] == 9]", "out": "リスト内包記法 フィルタ"}
{"in": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])", "out": "リスト内包記法 変換"}
{"in": "'Hello %s' % ', '.join(my_args)", "out": "リストの文字列化"}
{"in": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]", "out": "辞書内包記法"}
{"in": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}", "out": "辞書内包記法"}
{"in": "now = datetime.datetime.now().strftime('%H:%M:%S')", "out": "時刻書式"}
{"in": "[''.join(seq) for seq in zip(lst, lst[1:])]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('(.)\\\\1+', '\\\\1\\\\1', 'haaaaapppppyyy')", "out": "正規表現"}
{"in": "zip(*a)", "out": "引数展開"}
{"in": "[dict(d, count=n) for d, n in zip(l1, l2)]", "out": "辞書内包記法"}
{"in": "r = [(1) for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))", "out": "正規表現"}
{"in": "json.loads('{\"distance\":\\\\u002d1}')", "out": "ユニコード"}
{"in": "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "out": "ユニコード"}
{"in": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)", "out": "辞書内包記法"}
{"in": "[item['baz'] for foo in foos for item in foo['bar']]", "out": "リスト内包記法 変換"}
{"in": "subseqs = (seq[:i] for i in range(1, len(seq) + 1))", "out": "リスト内包記法 変換"}
{"in": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}", "out": "辞書内包記法"}
{"in": "[np.unravel_index(np.argmin(a), (2, 2)) for a in A2]", "out": "リスト内包記法 変換"}
{"in": "{k: (float(d2[k]) / d1[k]) for k in d2}", "out": "辞書内包記法"}
{"in": "items = [some(m['a'].split(), m['d'], m['n']) for m in dl]", "out": "リスト内包記法 変換"}
{"in": "[lambda x: (x * x for x in range(10))]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(to_search[NAME]))", "out": "リストの文字列化"}
{"in": "alpha = img.split()[-1]", "out": "末尾の要素"}
{"in": "time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))", "out": "日付書式"}
{"in": "tuple(zip(*t))", "out": "引数展開"}
{"in": "time.strftime('%m/%d/%Y %H:%M:%S', time.gmtime(1346114717972 / 1000.0))", "out": "日付書式 時刻書式"}
{"in": "re.sub('.{20}(.mkv)', '\\\\1', 'unique12345678901234567890.mkv')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(str(i) for i in [1, 2, 3, 4])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "next((i for i, j in enumerate(lst) if j == 2), 42)", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[^aeiou]+', '123concertation')", "out": "正規表現"}
{"in": "re.match('^\\\\s*word', line)", "out": "正規表現"}
{"in": "np.concatenate((np.sort(a[~np.isnan(a)])[::-1], [np.nan] * np.isnan(a).sum()))", "out": "逆順の列 反転演算子"}
{"in": "a.where(~np.isnan(a), other=b, inplace=True)", "out": "反転演算子"}
{"in": "[x for t in zip(list_a, list_b) for x in t]", "out": "リスト内包記法 変換"}
{"in": "sorted(list(d.items()), key=lambda x: x[::-1])", "out": "逆順の列"}
{"in": "re.sub('[^a-zA-Z0-9]', '_', filename)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join([t.text] + [xml.tostring(e) for e in t.getchildren()])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\"\"\"\".join(s.split())", "out": "リストの文字列化"}
{"in": "[(ch.tag, ch.text) for e in tree.findall('file') for ch in e.getchildren()]", "out": "リスト内包記法 変換"}
{"in": "re.findall('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', a)", "out": "正規表現"}
{"in": "r.sadd('a', *set([3, 4]))", "out": "引数展開"}
{"in": "A = [i for i in A if i not in B]", "out": "リスト内包記法 フィルタ"}
{"in": "soup.find_all(re.compile('(a|div)'))", "out": "正規表現"}
{"in": "my_list = [item for item in my_list if item.isalpha()]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(1 for d in my_list if d.get('id') == 20)", "out": "リスト内包記法 フィルタ"}
{"in": "len(re.findall(pattern, string_to_search))", "out": "正規表現"}
{"in": "re.match('[a-zA-Z][\\\\w-]*$', 'A')", "out": "正規表現"}
{"in": "rc('text.latex', preamble='\\\\usepackage{cmbright}')", "out": "ユニコード"}
{"in": "{k: [lookup[n] for n in v] for k, v in list(my_dict.items())}", "out": "辞書内包記法"}
{"in": "print('Two pair, {0}s and {1}s'.format(*cards))", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(random.sample(s, len(s)))", "out": "リストの文字列化"}
{"in": "[item for item in data if not item['imageData']]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join([l for l in c if l not in vowels])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "re.split('[\\\\s-]+', text)", "out": "正規表現"}
{"in": "time.strftime('%Y-%m-%dT%H:%M:%SZ', timetup)", "out": "日付書式 時刻書式"}
{"in": "print(' '.join('%s=%s' % (k, v) for v, k in input))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "zip(*a)", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(map(str, (34.2424, -64.2344, 76.3534, 45.2344)))", "out": "リストの文字列化"}
{"in": "f(*((1, 4), (2, 5)))", "out": "引数展開"}
{"in": "np.array(list(itertools.product([0, 1], repeat=n ** 2))).reshape(-1, n, n)", "out": "累乗演算子"}
{"in": "from functools import reduce\nlambda l: reduce(lambda x, y: {y: x}, l[::-1], {})", "out": "逆順の列"}
{"in": "tuple_of_tuples = tuple(tuple(x) for x in list_of_lists)", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(map(str, [1, 2, 3, 4]))", "out": "リストの文字列化"}
{"in": "lst = [[] for _ in range(a)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\((\\\\d+)\\\\)', text)", "out": "正規表現"}
{"in": "re.sub('(.*)is(.*)want(.*)', '\\\\g<1>%s\\\\g<2>%s\\\\g<3>' % ('was', '12345'), a)", "out": "正規表現"}
{"in": "sum(1 for i in range(1, len(a)) if a[i - 1] * a[i] < 0)", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.search('AAA(.*?)ZZZ', 'gfgfdAAA1234ZZZuijjk').group(1))", "out": "正規表現"}
{"in": "[x for x in something_iterable if x != 'item']", "out": "リスト内包記法 フィルタ"}
{"in": "soup.select('a[href^=\"http://www.iwashere.com/\"]')", "out": "正規表現"}
{"in": "getattr(foo, bar)(*params)", "out": "引数展開"}
{"in": "{k: list(v) for k, v in groupby(sorted(d.items()), key=itemgetter(0))}", "out": "辞書内包記法"}
{"in": "deriv_poly = [(poly[i] * i) for i in range(1, len(poly))]", "out": "リスト内包記法 変換"}
{"in": "ab = [(a[i] * b[i]) for i in range(len(a))]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(map(str, a)))", "out": "リストの文字列化"}
{"in": "[(i + j) for i, j in zip(x[::2], x[1::2])]", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "print(dateobj.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "[(item for sublist in list_of_lists) for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "[(x.discard('') or x) for x in test]", "out": "リスト内包記法 変換"}
{"in": "sorted(s, key=lambda x: int(re.search('\\\\d+$', x).group()))", "out": "正規表現"}
{"in": "[i for i in d for j in range(d[i])]", "out": "リスト内包記法 変換"}
{"in": "writer.writerows(zip(*list(d.values())))", "out": "引数展開"}
{"in": "super(MyModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "sum(v[1] for d in myList for v in d.values())", "out": "リスト内包記法 変換"}
{"in": "s.replace('||', '|||')[::2]", "out": "ひとつおきの列"}
{"in": "(lambda lst: json.dumps({item[0]: item[1] for item in lst}))([(1, 2), (3, 4)])", "out": "辞書内包記法"}
{"in": "df2 = df[~pd.isnull(df.L)].loc[:, (['P', 'L'])].set_index('P')", "out": "反転演算子"}
{"in": "[y for sublist in l for x, y in sublist]", "out": "リスト内包記法 変換"}
{"in": "[x for x in L if x is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('url(#*.*)', 'url\\\\1', test1)", "out": "正規表現"}
{"in": "re.split('; |, |\\\\*|\\n', a)", "out": "正規表現"}
{"in": "output = [[word, len(word), word.upper()] for word in sent]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})", "out": "引数展開"}
{"in": "rgx = re.compile('(?<!\\\\+)[a-zA-Z]|[a-zA-Z](?!\\\\+)')", "out": "正規表現"}
{"in": "dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)", "out": "累乗演算子"}
{"in": "[[j for j in families[i] if i != j] for i in range(len(families))]", "out": "リスト内包記法 フィルタ"}
{"in": "row = [x.strip() for x in row]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(sys.path))", "out": "リストの文字列化"}
{"in": "[i[0] for i in e]", "out": "リスト内包記法 変換"}
{"in": "[re.search('\\\\d', s) for s in lst]", "out": "リスト内包記法 変換 正規表現"}
{"in": "a = [[(0) for y in range(8)] for x in range(8)]", "out": "リスト内包記法 変換"}
{"in": "d.update((k, frozenset(v)) for k, v in d.items())", "out": "リスト内包記法 変換"}
{"in": "print([cls.__name__ for cls in vars()['Foo'].__subclasses__()])", "out": "リスト内包記法 変換"}
{"in": "dict({'a': 'y[a]'}, **{'a', 'x[a]'}) == {'a': 'x[a]'}", "out": "引数展開"}
{"in": "cleanlist = [(0.0 if math.isnan(x) else x) for x in oldlist]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "re.findall('(?<=>)([^<]+)(?=</a>[^<]*</li)', var, re.S)", "out": "正規表現"}
{"in": "a_send = dict((k[0], v) for k, v in list(a.items()))", "out": "辞書内包記法"}
{"in": "\"\"\", \"\"\".join('%s(%.02f)' % (x, y) for x, y in tuplelist)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "entry_list.extend([entry.title.text for entry in feed.entry])", "out": "リスト内包記法 変換"}
{"in": "re.split('(?<=CDE)(\\\\w+)(?=FG)', s)", "out": "正規表現"}
{"in": "list([d for d in exampleSet if d['type'] in keyValList])", "out": "リスト内包記法 フィルタ"}
{"in": "any(x[0] == 'a' for x in seq_of_tups)", "out": "リスト内包記法 変換"}
{"in": "[line[2:] for line in lines]", "out": "リスト内包記法 変換"}
{"in": "list([a for a in A if a not in B])", "out": "リスト内包記法 フィルタ"}
{"in": "newlist = [x for x in oldlist if x not in ['a', 'c']]", "out": "リスト内包記法 フィルタ"}
{"in": "[max(len(b) for b in a) for a in zip(*x)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[match.group(0) for match in pattern.finditer('44442(2)2(2)44')]", "out": "リスト内包記法 変換"}
{"in": "return next((i for i, v in enumerate(L) if v != x), -1)", "out": "リスト内包記法 フィルタ"}
{"in": "zip(*l)", "out": "引数展開"}
{"in": "result = [{k: (d1[k] + d2[k]) for k in d1} for d1, d2 in zip(var1, var2)]", "out": "辞書内包記法"}
{"in": "regexp = re.compile('^group/(?P<group>[^/]+)$')", "out": "正規表現"}
{"in": "[item for pair in zip(a, b) for item in pair]", "out": "リスト内包記法 変換"}
{"in": "arr = [[int(i) for i in line.split()] for line in open('input.txt')]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(map(str, ports)))", "out": "リストの文字列化"}
{"in": "pd.DataFrame({name: df['path'].str.count(name) for name in wordlist})", "out": "辞書内包記法"}
{"in": "y = [s for s in x if len(s) == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "[' '.join(col).strip() for col in df.columns.values]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return ''.join(c for c in line if ord(c) >= 32)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "list({(x[0], x[1]): x for x in L}.values())", "out": "辞書内包記法"}
{"in": "sentence = re.sub('\\\\bbeans\\\\b', 'cars', sentence)", "out": "正規表現"}
{"in": "my_dict2 = dict((y, x) for x, y in my_dict.items())", "out": "辞書内包記法"}
{"in": "[x for x in lst if 'abc' in x]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join([x for x in c if x not in vowels])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "int(''.join(map(str, x)))", "out": "リストの文字列化"}
{"in": "re.sub('\\\\bMr\\\\.|\\\\bMr\\\\b', 'Mister', s)", "out": "正規表現"}
{"in": "return int(bin(x)[2:].zfill(32)[::-1], 2)", "out": "逆順の列"}
{"in": "pd.concat([pd.Series(json.loads(line)) for line in open('train.json')], axis=1)", "out": "リスト内包記法 変換"}
{"in": "tuple([(10 * x) for x in img.size])", "out": "リスト内包記法 変換"}
{"in": "\"\"\" & \"\"\".join(['_'.join(inp[i:j]) for i, j in zip([0, 2], [2, None])])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "any(value in dictionary[key] for key in dictionary)", "out": "辞書内包記法"}
{"in": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]", "out": "リスト内包記法 フィルタ"}
{"in": "[item for sublist in list_of_lists for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "[x.span() for x in re.finditer('foo', 'foo foo foo foo')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "re.findall('[%s]+' % string.ascii_letters, 'Hello world, my name is...James!')", "out": "正規表現"}
{"in": "re.findall('(\\\\b[A-Z\\xc3\\x9c\\xc3\\x96\\xc3\\x84][a-z.-]+\\\\b)', words, re.UNICODE)", "out": "正規表現"}
{"in": "p = re.compile('(Friday\\\\s\\\\d+|Saturday)')", "out": "正規表現"}
{"in": "good_data = np.array([x for x in data[(0), :] if x == 1.0])", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('(https?://\\\\S+)', s)", "out": "正規表現"}
{"in": "[sum(x, []) for x in zip(L1, L2)]", "out": "リスト内包記法 変換"}
{"in": "all_keys = set().union(*(list(d.keys()) for d in mylist))", "out": "リスト内包記法 変換 引数展開"}
{"in": "print(re.sub('^\\\\W*\\\\w+\\\\W*', '', text))", "out": "正規表現"}
{"in": "['{}_{}'.format(k, v) for k, v in d.items()]", "out": "辞書内包記法"}
{"in": "print(''.join(format(x, '10.3f') for x in a))", "out": "リスト内包記法 変換 少数点表示制限 リストの文字列化"}
{"in": "lst = [[] for _ in range(a)]", "out": "リスト内包記法 変換"}
{"in": "time.strptime('00:00:00,000'.split(',')[0], '%H:%M:%S')", "out": "時刻書式"}
{"in": "li = [x for x in li if condition(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "zip(*heapq.nlargest(2, enumerate(a), key=operator.itemgetter(1)))[0]", "out": "引数展開"}
{"in": "re.split(';(?=(?:[^\\'\"]|\\'[^\\']*\\'|\"[^\"]*\")*$)', data)", "out": "正規表現"}
{"in": "[i[0] for i in re.findall('(([a-z])\\\\2)', 'abbbbcppq')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "int(''.join(str(i) for i in my_list), 2)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[mystr[i:i + 8] for i in range(0, len(mystr), 8)]", "out": "リスト内包記法 変換"}
{"in": "sorted_list_of_values = [item[1] for item in sorted_list_of_keyvalues]", "out": "リスト内包記法 変換"}
{"in": "res = [(x, my_dictionary[x]) for x in my_list]", "out": "辞書内包記法"}
{"in": "\"\"\" \"\"\".join([x for x in query.split() if x.lower() not in stopwords])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "pattern = re.compile('[@-O]')", "out": "正規表現"}
{"in": "map(lambda n: '%.2f' % n, [1883.95, 1878.33, 1869.43, 1863.4])", "out": "少数点表示制限"}
{"in": "\"\"\",\"\"\".join('{},{}'.format(i, i + 1) for i in range(1, 100, 4))", "out": "辞書内包記法 リストの文字列化"}
{"in": "\"\"\"\"\"\".join(i[1:] * int(i[0]) if i[0].isdigit() else i for i in l)", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "list(dict(((x[0], x[1]), x) for x in L).values())", "out": "辞書内包記法"}
{"in": "re.sub(\"'\", '', \"A single ' char\")", "out": "正規表現"}
{"in": "re.compile('(?<=}})\\\\s+(?={{)')", "out": "正規表現"}
{"in": "'Hello %s' % ', '.join(map(str, my_args))", "out": "リストの文字列化"}
{"in": "re.search('a{1,65536}', 'aaa')", "out": "正規表現"}
{"in": "list(zip(s[::2], s[1::2]))", "out": "ひとつおきの列"}
{"in": "l = [(x * 2) for x in l]", "out": "リスト内包記法 変換"}
{"in": "print([(ord(char) - 96) for char in input('Write Text: ').lower()])", "out": "リスト内包記法 変換"}
{"in": "d2 = dict((k, f(v)) for k, v in list(d1.items()))", "out": "辞書内包記法"}
{"in": "[dict(zip(r.dtype.names, x)) for x in r]", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(myparts)", "out": "リストの文字列化"}
{"in": "[x for x in L if x >= 0]", "out": "リスト内包記法 フィルタ"}
{"in": "len(a) - a[-1::-1].index('hello') - 1", "out": "逆順の列"}
{"in": "writer.writerows(row.strip().split() for row in infile if row.strip())", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join(word for word in anytext.split() if len(word) > 3)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "next((x for x in range(10) if x > 5))", "out": "リスト内包記法 フィルタ"}
{"in": "a = [('b', i, 'ff') for i in range(1, 5)]", "out": "リスト内包記法 変換"}
{"in": "[row[2:5] for row in LoL[1:4]]", "out": "リスト内包記法 変換"}
{"in": "values = [d[k] for k in a]", "out": "リスト内包記法 変換"}
{"in": "super(SyncableMixin, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "d2 = {k: f(v) for k, v in list(d1.items())}", "out": "辞書内包記法"}
{"in": "\"\"\"Hello there. My name is Fr.ed. I am 25.5 years old.\"\"\".split('. ')", "out": "正規表現"}
{"in": "[len(x) for x in a[0]]", "out": "リスト内包記法 変換"}
{"in": "all(d1[k] == d2[k] for k in ('testclass', 'testname'))", "out": "リスト内包記法 変換"}
{"in": "{k: v.strip('\"') for k, v in re.findall('(\\\\S+)=(\".*?\"|\\\\S+)', s)}", "out": "辞書内包記法 正規表現"}
{"in": "('NORTH ' if b > 0 else 'SOUTH ') + ('EAST' if a > 0 else 'WEST')", "out": "三項演算子"}
{"in": "print('{foo}, {bar}, {baz}'.format(**locals()))", "out": "引数展開"}
{"in": "[item for sublist in [[i[1:], [i[0]]] for i in l] for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "re.findall('(?<=\\\\s)\\\\d.*?(?=\\\\s\\\\d\\\\s\\\\d[.](?=$|\\\\s[A-Z]))', s)", "out": "正規表現"}
{"in": "l = [(ord(a) ^ ord(b)) for a, b in zip(s1, s2)]", "out": "リスト内包記法 変換 排他的論理和"}
{"in": "print('---'.join(vals))", "out": "リストの文字列化"}
{"in": "C = [i for i in A if i not in B]", "out": "リスト内包記法 フィルタ"}
{"in": "len([s.start() for s in re.finditer('(?=aa)', 'aaa')])", "out": "リスト内包記法 変換 正規表現"}
{"in": "list(range(max(x[0], y[0]), min(x[-1], y[-1]) + 1))", "out": "末尾の要素"}
{"in": "sorted(((v, k) for k, v in d.items()), reverse=True)", "out": "リスト内包記法 変換"}
{"in": "[(x - y) for x, y in zip(a[1:], a)]", "out": "リスト内包記法 変換"}
{"in": "[i[1:] for i in line.split() if i.startswith('#')]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.sub(' \\\\(\\\\w+\\\\)', '', item))", "out": "正規表現"}
{"in": "list(itertools.chain(*[item.split() for item in lst]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "buf = '\\x00' + ''.join(chr(random.randint(0, 255)) for _ in range(4)) + '\\x00'", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "al_arrays = [[l[i:i + 2] for i in range(0, len(l.strip()), 2)] for l in In_f]", "out": "リスト内包記法 変換"}
{"in": "x, y = zip(*[(i, -1 * j) for i, j in enumerate(range(10))])", "out": "リスト内包記法 変換 引数展開"}
{"in": "splitlists[-1].append(splitlists[0][0])", "out": "末尾の要素"}
{"in": "re.sub('(\\\\\\\\u[0-9A-Fa-f]+)', unescapematch, t)", "out": "正規表現 ユニコード"}
{"in": "a = [a[i] for i in range(1, len(a)) if a[i][1] > a[i - 1][1]]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[a]', 'abcd')", "out": "正規表現"}
{"in": "re.split('a+', 'aaa')", "out": "正規表現"}
{"in": "[i for i, (a, b) in enumerate(zip(vec1, vec2)) if a == b]", "out": "リスト内包記法 フィルタ"}
{"in": "[i for i in range(3) for _ in range(2)]", "out": "リスト内包記法 変換"}
{"in": "ax.plot(x, y, label='Representatives' if i == 0 else '')", "out": "三項演算子"}
{"in": "r = re.compile('(This)')", "out": "正規表現"}
{"in": "len([x for x in lst if x is not None])", "out": "リスト内包記法 フィルタ"}
{"in": "numpy.array([v for v in vals if len(set(v)) == len(v)])", "out": "リスト内包記法 フィルタ"}
{"in": "np.where(~a.any(axis=1))", "out": "反転演算子"}
{"in": "listOfLists = [[] for i in range(N)]", "out": "リスト内包記法 変換"}
{"in": "a = array.array('i', (0 for i in range(0, 10)))", "out": "リスト内包記法 変換"}
{"in": "\"\"\", \"\"\".join('='.join((str(k), str(v))) for k, v in list(mydict.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "\"\"\" \"\"\".join(PorterStemmer().stem_word(word) for word in text.split(' '))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('[\\\\W_]+', '', s, flags=re.UNICODE)", "out": "正規表現"}
{"in": "np.array([j for i in arr for j in np.arange(i - 0.2, i + 0.25, 0.1)])", "out": "リスト内包記法 変換"}
{"in": "print(('{:5d} ' * 5).format(*values))", "out": "引数展開"}
{"in": "utc_dt.strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "[x[0] for x, y in zip(l1, l2) if x[0] == y[0]]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('\\\\b(.+)\\\\s+\\\\1\\\\b', '\\\\1', s)", "out": "正規表現"}
{"in": "re.sub('[ -.:]', '', \"'::2012-05-14 18:10:20.856000::'\")", "out": "正規表現 ひとつおきの列"}
{"in": "[i for i in a if i not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "[row for row in listOfLists if row[x].isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(parts))", "out": "リストの文字列化"}
{"in": "datetime.utcnow().strftime('%Y%m%d')", "out": "日付書式"}
{"in": "df[df['B'].str.contains('|'.join(df['A']))]", "out": "リストの文字列化"}
{"in": "{i.pop('name'): i for i in listofdict}", "out": "辞書内包記法"}
{"in": "re.sub('\\\\w', '#', s)", "out": "正規表現"}
{"in": "(f(x) for x in list)", "out": "リスト内包記法 変換"}
{"in": "s = re.sub('[^0-9a-zA-Z]+', '*', s)", "out": "正規表現"}
{"in": "[None for _ in range(10)]", "out": "リスト内包記法 変換"}
{"in": "d3 = {k: v for k, v in list(d3.items()) if v}", "out": "辞書内包記法"}
{"in": "\"\"\", \"\"\".join(['William', 'Shatner', 'Speaks', 'Like', 'This'])", "out": "リストの文字列化"}
{"in": "df['yes'] = df['WIN'].map(lambda x: 1 if x == 'Yes' else np.nan)", "out": "三項演算子"}
{"in": "\"\"\"\"\"\".join(a)", "out": "リストの文字列化"}
{"in": "[(index, row.index(val)) for index, row in enumerate(mymatrix) if val in row]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.sub('[ -~]', '', '\\xa3100 is worth more than \\u20ac100'))", "out": "正規表現 ユニコード 反転演算子"}
{"in": "'dammit im mad'[::-1] == 'dammit im mad'", "out": "逆順の列"}
{"in": "re.search('suck', s)", "out": "正規表現"}
{"in": "zip(*data)", "out": "引数展開"}
{"in": "numpy.array([v for v in vals if len(numpy.unique(v)) == len(v)])", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('\\\\s*[Ff]eat\\\\.', a)", "out": "正規表現"}
{"in": "[key for key, values in list(rev_multidict.items()) if len(values) > 1]", "out": "辞書内包記法"}
{"in": "re.sub('(?<=.)(?=.)', '-', s)", "out": "正規表現"}
{"in": "datetime.datetime.now().strftime('%I:%M%p on %B %d, %Y')", "out": "日付書式"}
{"in": "print(re.sub('[^i]', '!', str))", "out": "正規表現"}
{"in": "find = re.compile('^([^.]*).*')", "out": "正規表現"}
{"in": "count = sum(len(v) for v in d.values())", "out": "リスト内包記法 変換"}
{"in": "print(list(set(chain(*array))))", "out": "引数展開"}
{"in": "print('\\u2713')", "out": "ユニコード"}
{"in": "a, b = (int(x) for x in s.split())", "out": "リスト内包記法 変換"}
{"in": "re.findall('\"([^\"]*)\"', 'SetVariables \"a\" \"b\" \"c\" ')", "out": "正規表現"}
{"in": "df[~df.From.str.contains('|'.join(ignorethese))]", "out": "リストの文字列化 反転演算子"}
{"in": "\"\"\"{0:%Y-%m-%d %H:%M:%S}\"\"\".format(datetime.datetime.now())", "out": "日付書式 時刻書式"}
{"in": "[name for name in starring if name.strip()]", "out": "リスト内包記法 フィルタ"}
{"in": "{i: np.where(arr == i)[0] for i in np.unique(arr)}", "out": "辞書内包記法"}
{"in": "func(*r)", "out": "引数展開"}
{"in": "[dict([a, int(x)] for a, x in b.items()) for b in list]", "out": "辞書内包記法"}
{"in": "super(BackupForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(len(set(p['Nationality'] for p in people)))", "out": "リスト内包記法 変換"}
{"in": "df.drop([col for col in df.columns if 'chair' in col], axis=1, inplace=True)", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"-\"\"\".join(s[i:i + 2] for i in range(0, len(s), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "Counter(v for sublist in list(d.values()) for v in sublist)", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('.+ \\\\+(\\\\d+ ){3}', '', data))", "out": "正規表現"}
{"in": "re.findall('\\\\[P\\\\]\\\\s?(.+?)\\\\s?\\\\[\\\\/P\\\\]', line)", "out": "正規表現"}
{"in": "[(lambda x: x * x) for _ in range(3)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(c for c in s if c.isupper())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[y for y in x for x in data]", "out": "リスト内包記法 変換"}
{"in": "[list(zip(a, p)) for p in permutations(b)]", "out": "リスト内包記法 変換"}
{"in": "print([y for x in l for y in (x, x + 1)])", "out": "リスト内包記法 変換"}
{"in": "[sum(nums[i:i + 3]) for i in range(0, len(nums), 3)]", "out": "リスト内包記法 変換"}
{"in": "print(dict(zip(keys, [list(i) for i in zip(*data)])))", "out": "辞書内包記法 引数展開"}
{"in": "return any(i.isdigit() for i in s)", "out": "リスト内包記法 変換"}
{"in": "[('string' + str(i)) for i in range(11)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join('[{}]'.format(e) for e in s.split('.'))", "out": "辞書内包記法 リストの文字列化"}
{"in": "f.write('\\n'.join(newList))", "out": "リストの文字列化"}
{"in": "print([x[0] for x in data])", "out": "リスト内包記法 変換"}
{"in": "[{'id1': k, 'price': temp[k]} for k in temp]", "out": "辞書内包記法"}
{"in": "print(' '.join(get_words(['k', 'c', 't', 'a'])))", "out": "リストの文字列化"}
{"in": "\"\"\"{0:>15.2f}\"\"\".format(1464.1000000000001)", "out": "少数点表示制限"}
{"in": "mytime.strftime('%a, %d %b %Y %H:%M:%S %z')", "out": "日付書式 時刻書式"}
{"in": "print('financial return of outcome 1 = {:.2f}'.format(1.23456))", "out": "少数点表示制限"}
{"in": "map(lambda a, b: a or b, choicesTxt, [('Choice %i' % n) for n in range(1, 10)])", "out": "リスト内包記法 変換"}
{"in": "list2 = [line for line in file if 'CONTENT_ITEM_ID' in line]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('(1(23)45)', '12345')", "out": "正規表現"}
{"in": "list(itertools.product(*s))", "out": "引数展開"}
{"in": "date.strftime('%A %b %d, %Y at %H:%M GMT')", "out": "日付書式 時刻書式"}
{"in": "set(line.strip() for line in open('filename.txt'))", "out": "リスト内包記法 変換"}
{"in": "print('\\t'.join(map(str, [1, 2, 3, 4, 5])))", "out": "リストの文字列化"}
{"in": "\"\"\"[\\\\u00d8-\\\\u00f6]\"\"\"", "out": "ユニコード"}
{"in": "dict((m.get(k, k), v) for k, v in list(d.items()))", "out": "辞書内包記法"}
{"in": "[x[0] for x in listD[2]]", "out": "リスト内包記法 変換"}
{"in": "[tuple(l) for l in nested_lst]", "out": "リスト内包記法 変換"}
{"in": "new_array = [x for x in main_array if x not in second_array]", "out": "リスト内包記法 フィルタ"}
{"in": "fig.savefig('~/Desktop/myplot.pdf')", "out": "反転演算子"}
{"in": "findtoure = commentary.find(text=re.compile('Yaya Toure'))", "out": "正規表現"}
{"in": "[(a + b) for a, b in zip(s[::2], s[1::2])]", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "re.sub('-----.*?-----', '', data, 1)", "out": "正規表現"}
{"in": "re.findall('\\\\b\\\\d{5}\\\\b', 'Helpdesk-Agenten (m/w) Kennziffer: 12966')", "out": "正規表現"}
{"in": "\"\"\"{} and {}\"\"\".format(', '.join(listy[:-1]), listy[-1])", "out": "リストの文字列化 末尾の要素"}
{"in": "re.findall('car|rat|[a-z]', s)", "out": "正規表現"}
{"in": "[x for x in my_str.split(';') if x]", "out": "リスト内包記法 フィルタ"}
{"in": "x = [i for i in x if len(i) == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "[word for word in words if any(not char.isdigit() for char in word)]", "out": "リスト内包記法 フィルタ"}
{"in": "print(','.join(str(x) for x in a))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('\\\\bugh\\\\b', 'disappointed', 'laughing ugh')", "out": "正規表現"}
{"in": "[(x + y) for x, y in zip(L1, L2)]", "out": "リスト内包記法 変換"}
{"in": "[(e in lestring) for e in lelist if e in lestring]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.sub('(\\\\S)\\\\ {2,}(\\\\S)(\\\\n?)', '\\\\1|\\\\2\\\\3', s))", "out": "正規表現"}
{"in": "writer.writerows(row.split() for row in infile if row.strip())", "out": "リスト内包記法 フィルタ"}
{"in": "nested_list = [[s.upper() for s in xs] for xs in nested_list]", "out": "リスト内包記法 変換"}
{"in": "key = lambda d: d['rank'] if d['rank'] != 0 else float('inf')", "out": "三項演算子"}
{"in": "print({word: word_list.count(word) for word in word_list})", "out": "辞書内包記法"}
{"in": "[elem for x in list for elem in (x, 0)][:-1]", "out": "リスト内包記法 変換"}
{"in": "list(itertools.product(*list(mydict.values())))", "out": "引数展開"}
{"in": "[int(n) for n in bin(21)[2:].zfill(8)]", "out": "リスト内包記法 変換"}
{"in": "{key: list(set(a[key]).difference(b.get(key, []))) for key in a}", "out": "辞書内包記法"}
{"in": "\"\"\" \"\"\".join([str(x) for x in np.hstack((a.T.real, a.T.imag)).flat])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict((k, v) for k, v in somedict.items() if not k.startswith('someprefix'))", "out": "辞書内包記法"}
{"in": "s.decode('utf-8').find('\\u0101')", "out": "ユニコード"}
{"in": "print('[%s]' % ', '.join(map(str, mylist)))", "out": "リストの文字列化"}
{"in": "list(next(it) for _ in range(n))", "out": "リスト内包記法 変換"}
{"in": "print('{0}\\n{1}'.format(item[0], '---'.join(item[1])))", "out": "リストの文字列化"}
{"in": "[(x + y) for x, y in zip('ab', '12345')]", "out": "リスト内包記法 変換"}
{"in": "arr = [[None for x in range(6)] for y in range(6)]", "out": "リスト内包記法 変換"}
{"in": "Person.objects.filter(**kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(chain.from_iterable(zip_longest(a, b, fillvalue='')))", "out": "リストの文字列化"}
{"in": "re.sub('\\\\bdelhi\\\\b(?=(?:\"[^\"]*\"|[^\"])*$)', '', a).strip()", "out": "正規表現"}
{"in": "all(x == mylist[0] for x in mylist)", "out": "リスト内包記法 変換"}
{"in": "hello = [x.strip(' ') for x in hello]", "out": "リスト内包記法 変換"}
{"in": "a[:] = [x for x in a if x <= 2]", "out": "リスト内包記法 フィルタ"}
{"in": "os.path.join(os.path.expanduser('~'), 'Documents', completeName)", "out": "反転演算子"}
{"in": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'concertation', re.IGNORECASE)", "out": "正規表現"}
{"in": "[x for x in COUNTRIES if x[0] == 'AS'][0][1]", "out": "リスト内包記法 フィルタ"}
{"in": "{k: (v() if callable(v) else v) for k, v in a.items()}", "out": "辞書内包記法 三項演算子"}
{"in": "int(''.join(your_list), 16)", "out": "リストの文字列化"}
{"in": "df['Admission_Source_Code'] = [str(i) for i in df['Admission_Source_Code']]", "out": "リスト内包記法 変換"}
{"in": "Book.objects.create(**d)", "out": "引数展開"}
{"in": "df = df[~df.datecolumn.isin(a)]", "out": "反転演算子"}
{"in": "print('\\n'.join(d['Name'] for d in thisismylist))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(i, j) for i, j in zip(a, x) if i >= 4]", "out": "リスト内包記法 フィルタ"}
{"in": "ax1.set_xticks([int(j) for j in range(-4, 5)])", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\bin\\\\b', '', 'office administration in delhi')", "out": "正規表現"}
{"in": "re.sub('\\\\W', '', 'text 1, 2, 3...')", "out": "正規表現"}
{"in": "re.findall('(\\\\w+[.]\\\\w+)@', s)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(sorted(a))", "out": "リストの文字列化"}
{"in": "sum([x for x in list if isinstance(x, (int, float))])", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('^[^a]*', '')", "out": "正規表現"}
{"in": "print(' '.join(get_words(['\\u0baa', '\\u0bae\\u0bcd', '\\u0b9f'])))", "out": "ユニコード リストの文字列化"}
{"in": "re.findall(pat, s)", "out": "正規表現"}
{"in": "res = [(x, my_dictionary[x]) for x in my_list if x in my_dictionary]", "out": "辞書内包記法"}
{"in": "d = dict([(y, x) for x, y in enumerate(t)])", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join([str(w) for w in random.sample(item, len(item))])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict((d1[key], value) for key, value in list(d.items()))", "out": "辞書内包記法"}
{"in": "result = [d[key] for key in d if key.startswith(query)]", "out": "リスト内包記法 フィルタ"}
{"in": "zip(*it)", "out": "引数展開"}
{"in": "set(x[0] for x in zip(a, a[1:]) if x[0] == x[1])", "out": "リスト内包記法 フィルタ"}
{"in": "[td.text for td in tree.xpath('//td')]", "out": "リスト内包記法 変換"}
{"in": "fig.savefig('full_figure.png')", "out": "正規表現"}
{"in": "d = dict((m.get(k, k), v) for k, v in list(d.items()))", "out": "辞書内包記法"}
{"in": "re.sub('url((?:#[0-9]+)?)', 'new_url\\\\1', test2)", "out": "正規表現"}
{"in": "p = [tuple('{0:.2f}'.format(c) for c in b) for b in a]", "out": "辞書内包記法 少数点表示制限"}
{"in": "function_that_needs_strings(*my_list)", "out": "引数展開"}
{"in": "m = re.findall('<!--(.*?)-->', string, re.DOTALL)", "out": "正規表現"}
{"in": "datetime.datetime.strptime(s, '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "print([i for i in re.split('(\\\\d+|\\\\W+)', 'x+13.5*10x-4e1') if i])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "binrep = ''.join(bytetable[x] for x in open('file', 'rb').read())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "os.path.join(dir_name, '.'.join((base_filename, filename_suffix)))", "out": "リストの文字列化"}
{"in": "print('\\\\u84b8\\\\u6c7d\\\\u5730'.decode('unicode-escape'))", "out": "ユニコード"}
{"in": "list([x for x in list(all_dicts.values()) if x['city'] == 'bar'])", "out": "辞書内包記法"}
{"in": "next(re.finditer('\\\\d+$', s)).group(0)", "out": "正規表現"}
{"in": "result = [(a.split('-', 1)[0], b) for a, b in sorted_x]", "out": "リスト内包記法 変換"}
{"in": "return re.findall('\\\\w+', text)", "out": "正規表現"}
{"in": "[[word, len(word), word.upper()] for word in sent]", "out": "リスト内包記法 変換"}
{"in": "a = [name for name in os.listdir('.') if name.endswith('.txt')]", "out": "リスト内包記法 フィルタ"}
{"in": "np.array([[int(i[0], 2)] for i in a])", "out": "リスト内包記法 変換"}
{"in": "any(x.name == 't2' for x in l)", "out": "リスト内包記法 変換"}
{"in": "[str(item[0]) for item in x if item and item[0]]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('\\\\s+(?=[^[\\\\(]*\\\\))|((?<=\\\\()\\\\s+)', '', my_string)", "out": "正規表現"}
{"in": "{k: v for k, v in list(points.items()) if v[0] < 5 and v[1] < 5}", "out": "辞書内包記法"}
{"in": "d = set([item for item in d if re.match('^[a-zA-Z]+$', item)])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "[(x, y, z) for x, y, z in a if (x + y) ** z > 30]", "out": "リスト内包記法 フィルタ 累乗演算子"}
{"in": "np.set_printoptions(formatter={'float': lambda x: '{0:0.3f}'.format(x)})", "out": "少数点表示制限"}
{"in": "rows = [i for i in range(0, len(a)) if a[i][0] == value]", "out": "リスト内包記法 フィルタ"}
{"in": "return int(''.join([('%d' % x) for x in numbers]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('(\\\\s+)(a|an|and|the)(\\\\s+)', '\\x01\\x03', text)", "out": "正規表現"}
{"in": "datetime.strptime(s, '%a %b %d %Y %H:%M:%S GMT%z (%Z)')", "out": "日付書式 時刻書式"}
{"in": "re.compile('[\\\\u0020-\\\\u00d7ff]', re.DEBUG)", "out": "正規表現 ユニコード"}
{"in": "Score.objects.values('student').annotate(latest_date=Max('date'))", "out": "正規表現"}
{"in": "[(x + i * y) for i in range(1, 10)]", "out": "リスト内包記法 変換"}
{"in": "np.savez(tmp, *getarray[:10])", "out": "引数展開"}
{"in": "re.findall(\"[\\\\w']+|[.,!?;]\", \"Hello, I'm a string!\")", "out": "正規表現"}
{"in": "np.hstack([np.arange(i, j) for i, j in zip(start, stop)])", "out": "リスト内包記法 変換"}
{"in": "[x for x in l if x[0].startswith('img')]", "out": "リスト内包記法 フィルタ"}
{"in": "A.ravel()[:A.shape[1] ** 2:A.shape[1] + 1]", "out": "累乗演算子"}
{"in": "[(x + y) for x in l2 for y in l1]", "out": "リスト内包記法 変換"}
{"in": "[i.strip() for i in l]", "out": "リスト内包記法 変換"}
{"in": "print('/'.join(new))", "out": "リストの文字列化"}
{"in": "~np.isnan(a).any(1)", "out": "反転演算子"}
{"in": "re.sub('[\\\\W_]+', '', 'a_b A_Z \\x80\\xff \\u0404', flags=re.UNICODE)", "out": "正規表現 ユニコード"}
{"in": "dict(set.intersection(*(set(d.items()) for d in dicts)))", "out": "辞書内包記法 引数展開"}
{"in": "return super(MyModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "df = df[~((df['group_A'] == 0) | (df['group_B'] == 0))]", "out": "反転演算子"}
{"in": "re.findall('\\\\[ (?:[^][]* \\\\[ [^][]* \\\\])* [^][]*  \\\\]', s, re.X)", "out": "正規表現"}
{"in": "some_func(**mydict)", "out": "引数展開"}
{"in": "any(i in a for i in b)", "out": "リスト内包記法 変換"}
{"in": "sum(x * y for x, y in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "[r for r in (f(char) for char in string) if r is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join(L)", "out": "リストの文字列化"}
{"in": "print([i for i in range(5)])", "out": "リスト内包記法 変換"}
{"in": "datetime.datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S GMT')", "out": "日付書式 時刻書式"}
{"in": "all(x in 'John Michael Marvulli'.split() for x in 'John Marvulli'.split())", "out": "リスト内包記法 変換"}
{"in": "return ''.join('Hello({})'.format(i) for i in range(100))", "out": "辞書内包記法 リストの文字列化"}
{"in": "re.sub('\\\\s+(a|an|and|the)(\\\\s+)', '\\x02', text)", "out": "正規表現"}
{"in": "print(re.sub('(.+)(?<=\\\\1)', '(\\\\g<0>)', test))", "out": "正規表現"}
{"in": "print(re.sub('(.)(?<=\\\\1)', '(\\\\g<0>)', test))", "out": "正規表現"}
{"in": "{k: (float(d2[k]) / d1[k]) for k in d1.keys() & d2}", "out": "辞書内包記法"}
{"in": "all(dict_obj.get(key) is not None for key in properties_to_check_for)", "out": "辞書内包記法"}
{"in": "[([k] + [(sum(x) / float(len(x))) for x in zip(*v)]) for k, v in list(d.items())]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[ord(c) for c in s]", "out": "リスト内包記法 変換"}
{"in": "[int(a[i:i + 3]) for i in range(0, len(a), 3)]", "out": "リスト内包記法 変換"}
{"in": "self.response.out.write(','.join(['a', 'cool', 'test']))", "out": "リストの文字列化"}
{"in": "b = a[:-1] + (a[-1] * 2,)", "out": "末尾の要素"}
{"in": "sorted(re.findall('g+', 'fggfggggfggfg'), key=len, reverse=True)", "out": "正規表現"}
{"in": "df.to_csv('pandasfile.csv', float_format='%.3f')", "out": "少数点表示制限"}
{"in": "a = [str(wi) for wi in wordids]", "out": "リスト内包記法 変換"}
{"in": "re.sub('(AA+B+)|(ABB+)', '', data)", "out": "正規表現"}
{"in": "zip(*[[5, 7], [6, 9], [7, 4]])", "out": "引数展開"}
{"in": "print(re.sub('[^\\\\w.]', '', string))", "out": "正規表現"}
{"in": "match = re.search('(.*?):([^-]*)-(.*)', line)", "out": "正規表現"}
{"in": "re.sub('([a-zA-Z0-9])\\\\s+(?=[a-zA-Z0-9])', '\\\\1*', '3 /a 5! b')", "out": "正規表現"}
{"in": "[[random.random() for i in range(N)] for j in range(N)]", "out": "リスト内包記法 変換"}
{"in": "c = [(x | y) for x, y in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join(map(str, sorted(list(range(1, 100, 4))) + list(range(2, 100, 4))))", "out": "リストの文字列化"}
{"in": "from functools import reduce\n[reduce(lambda x, y: x + y, i) for i in a]", "out": "リスト内包記法 変換"}
{"in": "[(i, j) for i in range(10) for j in range(i)]", "out": "リスト内包記法 変換"}
{"in": "results = [t[1] for t in mylist if t[0] == 10]", "out": "リスト内包記法 フィルタ"}
{"in": "{k: list(v) for k, v in df.groupby('Address')['ID']}", "out": "辞書内包記法"}
{"in": "print(aware.astimezone(Pacific).strftime('%a %b %d %X %z'))", "out": "正規表現"}
{"in": "ASCII = ''.join(chr(x) for x in range(128))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "fp.write('\\n'.join('%s %s' % x for x in mylist))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "find = re.compile('^(.*?)\\\\..*')", "out": "正規表現"}
{"in": "dates.dt.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "dict((name, locals()[name]) for name in list_of_variable_names)", "out": "辞書内包記法"}
{"in": "['_'.join(k + v for k, v in zip(d, v)) for v in product(*list(d.values()))]", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "match = re.search('[^a-zA-Z](is)[^a-zA-Z]', mystr)", "out": "正規表現"}
{"in": "print('\\n'.join(df.apply(func, axis=1)))", "out": "リストの文字列化"}
{"in": "re.match('[Ff][Oo]{2}bar', 'Foobar')", "out": "正規表現"}
{"in": "k.strftime('%H:%M:%S,%f ')", "out": "時刻書式"}
{"in": "[x for x in myList if x.age == 30]", "out": "リスト内包記法 フィルタ"}
{"in": "[l[i::5] for i in range(5)]", "out": "リスト内包記法 変換"}
{"in": "dict((k, mimes[k]) for k in mimes if mimes[k] == 'image/tiff')", "out": "辞書内包記法"}
{"in": "operator.itemgetter(*b)(a)", "out": "引数展開"}
{"in": "[(m.start(0), m.end(0)) for m in re.finditer(pattern, string)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "[i for i in range(len(s1)) if s1[i] != s2[i]]", "out": "リスト内包記法 フィルタ"}
{"in": "[list(e) for e in zip(*[fl[i::2] for i in range(2)])]", "out": "リスト内包記法 変換 引数展開 ひとつおきの列"}
{"in": "print(' '.join(['{: 3d}'.format(x) for x in rij3]))", "out": "辞書内包記法 リストの文字列化"}
{"in": "[el for el in re.split('(\\\\d+)', string) if el.strip()]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "a[~(a == 5).any(1)]", "out": "反転演算子"}
{"in": "big_regex = re.compile('\\\\b%s\\\\b' % '\\\\b|\\\\b'.join(map(re.escape, words)))", "out": "正規表現 リストの文字列化"}
{"in": "dict([(m.get(k, k), v) for k, v in list(d.items())])", "out": "辞書内包記法"}
{"in": "return re.sub('\\\\W+', '-', text)", "out": "正規表現"}
{"in": "a = '\\\\u2026'", "out": "ユニコード"}
{"in": "re.sub('[_\\\\W]+', ' ', s).upper()", "out": "正規表現"}
{"in": "done = [(i, x) for i in [a, b, c, d]]", "out": "リスト内包記法 変換"}
{"in": "sum(item.get('one', 0) for item in list(tadas.values()))", "out": "リスト内包記法 変換"}
{"in": "[i for i, x in enumerate(testlist) if x == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "dict((key_from_value(value), value) for value in values)", "out": "辞書内包記法"}
{"in": "print(','.join('-'.join(map(str, (g[0], g[-1])[:len(g)])) for g in G))", "out": "リスト内包記法 変換 リストの文字列化 末尾の要素"}
{"in": "df['A'].apply(lambda x: x.strftime('%d%m%Y'))", "out": "日付書式"}
{"in": "\"\"\" \"\"\".join(str(item) for item in my_list)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return [v for k, v in self.items() if v == value]", "out": "リスト内包記法 フィルタ"}
{"in": "print([a['data'] for a in thedata])", "out": "リスト内包記法 変換"}
{"in": "l = [(x * x) for x in range(0, 10)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('(\\\\w)([A-Z])', '\\\\1 \\\\2', 'WordWordWWWWWWWord')", "out": "正規表現"}
{"in": "dictionary = dict([(List[i], List[i + 1]) for i in range(0, len(List), 2)])", "out": "辞書内包記法"}
{"in": "re.sub('_', '', re.sub(pattern, '', x))", "out": "正規表現"}
{"in": "dfs = pd.concat([pd.read_csv('data/' + f) for f in files])", "out": "リスト内包記法 変換"}
{"in": "print('{:10.4f}'.format(x))", "out": "少数点表示制限"}
{"in": "new_list = [seq[0] for seq in yourlist]", "out": "リスト内包記法 変換"}
{"in": "re.sub('[_\\\\W]+', ' ', s).strip().upper()", "out": "正規表現"}
{"in": "my_dictionary = {k: f(v) for k, v in list(my_dictionary.items())}", "out": "辞書内包記法"}
{"in": "s[::-1]", "out": "逆順の列"}
{"in": "a[list(np.ogrid[[slice(x) for x in a.shape]][:-1]) + [i]]", "out": "リスト内包記法 変換"}
{"in": "open('someUnicodeFilename\\u03bb')", "out": "ユニコード"}
{"in": "df[df.genre.str.join(' ').str.contains('comedy')]", "out": "正規表現"}
{"in": "{i: j for i, j in zip(list(range(1, 5)), list(range(7, 11)))}", "out": "辞書内包記法"}
{"in": "print('[', ', '.join(repr(i) for i in list), ']')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "{k: v for k, v in list(mydict.items()) if k >= 6}", "out": "辞書内包記法"}
{"in": "methodB('argvalue', **kwargs)", "out": "引数展開"}
{"in": "re.search('@.*', test_string).group()", "out": "正規表現"}
{"in": "df['date'][df.index[-1]]", "out": "末尾の要素"}
{"in": "~df['col'].str.contains(word)", "out": "反転演算子"}
{"in": "re.findall('\\\\[([^\\\\]]*)\\\\]', str)", "out": "正規表現"}
{"in": "[(x * 2 if x % 2 == 0 else x) for x in a_list]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "return min(d['id'] for d in l if 'id' in d)", "out": "リスト内包記法 フィルタ"}
{"in": "[(x * 1.0 / y) for x, y in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"-\"\"\".join(a + b for a, b in zip(t, t))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "{{(variable | stringformat): '.3f'}}", "out": "少数点表示制限"}
{"in": "x = [x for x in b.split() if x in a.split()]", "out": "リスト内包記法 フィルタ"}
{"in": "regex = re.compile('\\\\b[A-Z]{3,}\\\\b')", "out": "正規表現"}
{"in": "[l for l in paragraph3]", "out": "リスト内包記法 変換"}
{"in": "sorted(s, key=lambda x: int(x[-1]))", "out": "末尾の要素"}
{"in": "[(g[0], len(list(g[1]))) for g in itertools.groupby(['a', 'a', 'b', 'b', 'b'])]", "out": "リスト内包記法 変換"}
{"in": "res = re.findall('-(?!(?:aa|bb)-)([^-]+)(?=-)', s)", "out": "正規表現"}
{"in": "return ''.join([(i if ord(i) < 128 else ' ') for i in text])", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "func(1, *args, **kwargs)", "out": "引数展開"}
{"in": "re.findall('car|bus|[a-z]', s)", "out": "正規表現"}
{"in": "next((x for x in range(10) if x > 3))", "out": "リスト内包記法 フィルタ"}
{"in": "(df[cols] > 0).apply(lambda x: ' '.join(x[x].index), axis=1)", "out": "リストの文字列化"}
{"in": "result = [(x + dx, y + dy) for x, y in points for dx, dy in offsets]", "out": "リスト内包記法 変換"}
{"in": "df['WIN1'] = df['WIN'].map(lambda x: 1 if x == 'Yes' else 0)", "out": "三項演算子"}
{"in": "min([x[::-1] for x in a])[::-1]", "out": "リスト内包記法 変換 逆順の列"}
{"in": "[ord(x) for x in letters]", "out": "リスト内包記法 変換"}
{"in": "r = dict((v, k) for k, v in d.items())", "out": "辞書内包記法"}
{"in": "print(re.findall('[^/|(]+(?:\\\\([^)]*\\\\))*', re.sub('^qr/(.*)/i$', '\\\\1', str)))", "out": "正規表現"}
{"in": "longest_strings = [s for s in stringlist if len(s) == maxlength]", "out": "リスト内包記法 フィルタ"}
{"in": "json.dump(datetime.now().strftime('%Y-%m-%dT%H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "print([(x[0], x[-1]) for x in l])", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "print('\\n'.join('%s = %s' % (key, value) for key, value in d.items()))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.findall('(?=(\\\\b\\\\w+\\\\s\\\\b\\\\w+))', st)", "out": "正規表現"}
{"in": "sorted((sorted(item) for item in data), key=lambda x: (len(x), x))", "out": "リスト内包記法 変換"}
{"in": "[i for i in x if 60 < i < 70]", "out": "リスト内包記法 フィルタ"}
{"in": "print(dt.strftime('%a, %b %d, %Y at %I:%M %p'))", "out": "日付書式"}
{"in": "[(x[i] + x[i + 1]) for i in range(0, len(x), 2)]", "out": "リスト内包記法 変換"}
{"in": "[v[0] for v in sorted(iter(d.items()), key=lambda k_v: (-k_v[1], k_v[0]))]", "out": "リスト内包記法 変換"}
{"in": "fu_list = [(k, fus_d.get(k), fus_s.get(k)) for k in fus_d.keys() | fus_s]", "out": "リスト内包記法 変換"}
{"in": "d = {int(k): [int(i) for i in v] for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "re.sub('Term|Term1|Term2', '', file_name)", "out": "正規表現"}
{"in": "re.sub('(get)', '\\\\1@', text)", "out": "正規表現"}
{"in": "[[(k, x[k], y[k]) for k in x if x[k] != y[k]] for x, y in pairs if x != y]", "out": "リスト内包記法 フィルタ"}
{"in": "s += '(' + ', '.join(map(str, tup)) + ')'", "out": "リストの文字列化"}
{"in": "max([x for x in num_list if x < 3])", "out": "リスト内包記法 フィルタ"}
{"in": "super(ModelB, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "struct.unpack('<i', bytes + ('\\x00' if bytes[2] < '\\x80' else '\\xff'))", "out": "三項演算子"}
{"in": "super(MyModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "[int(s) for s in str.split() if s.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "list({e.id: e for e in somelist}.values())", "out": "辞書内包記法"}
{"in": "l = re.compile('(\\\\s)').split(s)", "out": "正規表現"}
{"in": "l = re.compile('\\\\s').split(s)", "out": "正規表現"}
{"in": "datetime.datetime(*struct.unpack('>HBBBBBB', s))", "out": "引数展開"}
{"in": "[dict(zip(keys, a)) for a in zip(values[::2], values[1::2])]", "out": "辞書内包記法 ひとつおきの列"}
{"in": "[item for sublist in l for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "[item for sublist in list_of_lists for item in sublist if valid(item)]", "out": "リスト内包記法 フィルタ"}
{"in": "fields = tuple(field.strip() for field in line.split(','))", "out": "リスト内包記法 変換"}
{"in": "date = datetime.strptime(match.group(), '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "[x for x in d if x not in ('Domain Source', 'Recommend Suppress')]", "out": "リスト内包記法 フィルタ"}
{"in": "{k: v for k, v in points.items() if v[0] < 5 and v[1] < 5}", "out": "辞書内包記法"}
{"in": "any(item.startswith('qwerty') for item in myList)", "out": "リスト内包記法 変換"}
{"in": "re.sub('foo', 'bar', s, 1)", "out": "正規表現"}
{"in": "from functools import reduce\nreduce(lambda x, y: x if len(x) < len(y) else y, l)", "out": "三項演算子"}
{"in": "\"\"\" & \"\"\".join(['_'.join(inp[:2]), '_'.join(inp[2:])])", "out": "リストの文字列化"}
{"in": "[''.join(i) for i in itertools.product('ab', repeat=4)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[x for x in foo]", "out": "リスト内包記法 変換"}
{"in": "[x for x, y, z in G]", "out": "リスト内包記法 変換"}
{"in": "my_list = [col for row in matrix for col in row]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('\\\\bv\\\\w+', thesentence))", "out": "正規表現"}
{"in": "mylist = [int(x) for x in '3 ,2 ,6 '.split(',')]", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\s+', line)", "out": "正規表現"}
{"in": "return super(MyListView, self).dispatch(request, *args, **kwargs)", "out": "引数展開"}
{"in": "return [row[i] for row in matrix]", "out": "リスト内包記法 変換"}
{"in": "[(a - int(a)) for a in l]", "out": "リスト内包記法 変換"}
{"in": "[[[(0) for _ in range(n)] for _ in range(n)] for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\":\"\"\".join(x.encode('hex') for x in 'Hello World!')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "pd.Series([np.array(e)[~np.isnan(e)] for e in x.values])", "out": "リスト内包記法 変換 反転演算子"}
{"in": "return [dict(zip(keys, values[i:i + n])) for i in range(0, len(values), n)]", "out": "辞書内包記法"}
{"in": "dictionary = dict(zip(List[0::2], List[1::2]))", "out": "ひとつおきの列"}
{"in": "data = {tuple(sorted(item)) for item in lst}", "out": "辞書内包記法"}
{"in": "list1 = [i for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "{v[0]: data[v[0]] for v in list(by_ip.values())}", "out": "辞書内包記法"}
{"in": "data = [[int(v) for v in line.split()] for line in lines]", "out": "リスト内包記法 変換"}
{"in": "[list(l[0]) for l in mylist]", "out": "リスト内包記法 変換"}
{"in": "sum(v[0] for v in list(d.values())) / float(len(d))", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile('|'.join(list(d.keys())))", "out": "正規表現 リストの文字列化"}
{"in": "[ind for ind, sub in enumerate(totalist) if sub[:2] == ['A', 'B']]", "out": "リスト内包記法 フィルタ"}
{"in": "original[::-1]", "out": "逆順の列"}
{"in": "sum([(x * y) for x, y in zip(*lists)])", "out": "リスト内包記法 変換 引数展開"}
{"in": "c = [tuple(x + b[i] for i, x in enumerate(y)) for y in a]", "out": "リスト内包記法 変換"}
{"in": "keys, values = zip(*list(dictionary.items()))", "out": "引数展開"}
{"in": "dict([i for i in iter(d.items()) if i[0] in validkeys])", "out": "辞書内包記法"}
{"in": "re.findall('<wx\\\\.(?:.*?)> >', i)", "out": "正規表現"}
{"in": "f = lambda x: '' if x is None else x", "out": "三項演算子"}
{"in": "dict((itm.split('=')[0], itm.split('=')[1]) for itm in qstring.split('&'))", "out": "辞書内包記法"}
{"in": "somelist = [x for x in somelist if not determine(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(formatted))", "out": "リストの文字列化"}
{"in": "[i for i in Records if i['Price']]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(char if char.isalpha() else ' ' for char in test).split()", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "[i for i in range(10) if i % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "names = [line.strip() for line in open('names.txt')]", "out": "リスト内包記法 変換"}
{"in": "print(soupHandler.findAll('div', id=re.compile('^post-')))", "out": "正規表現"}
{"in": "super(Model, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "d = {k: frozenset(v) for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "\"\"\" \"\"\".join([i for i in word_list if i not in remove_list])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print(', '.join(row))", "out": "リストの文字列化"}
{"in": "L = [L[i] for i in ndx]", "out": "リスト内包記法 変換"}
{"in": "l = [map(int, line.split(',')) for line in f if line.strip() != '']", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('\\\\w+=\".*?\"', comp)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join('%02x' % i for i in input)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "d = dict((y, x) for x, y in enumerate(t))", "out": "辞書内包記法"}
{"in": "zip(*s)[0]", "out": "引数展開"}
{"in": "\"\"\",\"\"\".join(str(item) for innerlist in outerlist for item in innerlist)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.match('.*?([0-9]+)$', s).group(1)", "out": "正規表現"}
{"in": "print([''.join(p) for i in range(1, len(s) + 1) for p in permutations(s, i)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "('%.2f' % 1.2333333).replace('.', ',')", "out": "少数点表示制限"}
{"in": "a, b, c = (int(i) for i in line.split())", "out": "リスト内包記法 変換"}
{"in": "print(','.join('-'.join(map(str, (g[0][1], g[-1][1])[:len(g)])) for g in G))", "out": "リスト内包記法 変換 リストの文字列化 末尾の要素"}
{"in": "bool(re.match('el', 'Hello', re.I))", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join([a[::-1][i:i + 2][::-1] for i in range(0, len(a), 2)])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "set([os.path.split(x)[0] for x in zf.namelist() if '/' in x])", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('[^A-Za-z ]|  ', 'Are you 9 years old?')[0].strip()", "out": "正規表現"}
{"in": "test[numpy.logical_or.reduce([(test[:, (1)] == x) for x in wanted])]", "out": "リスト内包記法 変換"}
{"in": "results = [s for s in strings if any(m in s for m in matchers)]", "out": "リスト内包記法 フィルタ"}
{"in": "reverse_lst = lst[::-1]", "out": "逆順の列"}
{"in": "[cryptogen.random() for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "dict(zip(*([iter(l)] * 2)))", "out": "引数展開"}
{"in": "df[~df.applymap(np.isreal).all(1)]", "out": "反転演算子"}
{"in": "b = [int(i != 0) for i in a]", "out": "リスト内包記法 変換"}
{"in": "names = [description[0] for description in cursor.description]", "out": "リスト内包記法 変換"}
{"in": "obj = [('Even' if i % 2 == 0 else 'Odd') for i in range(10)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "dict((k, v) for k, v in list(points.items()) if all(x < 5 for x in v))", "out": "辞書内包記法"}
{"in": "(x * x for x in range(10))", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('\\\\d+', re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text)[0]))", "out": "正規表現"}
{"in": "re.sub(' (?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)', '', s)", "out": "正規表現"}
{"in": "singleitem = mylist[-1]", "out": "末尾の要素"}
{"in": "rightmost = re.compile('^Path=').sub('', fullPath)", "out": "正規表現"}
{"in": "df.index = ['/'.join(i) for i in df.index]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[('%s+%s' % x) for x in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "array.append([int(x) for x in line.split()])", "out": "リスト内包記法 変換"}
{"in": "verts = [[(0) for x in range(100)] for y in range(10)]", "out": "リスト内包記法 変換"}
{"in": "{k: v for k, v in zip(range(1, 5), count(7))}", "out": "辞書内包記法"}
{"in": "store.select('df', columns=['A'])", "out": "正規表現"}
{"in": "\"\"\"^[A-Za-z0-9._~()'!*:@,;+?-]*$\"\"\"", "out": "反転演算子"}
{"in": "formatted.columns = [x.strip().replace(' ', '_') for x in formatted.columns]", "out": "リスト内包記法 変換"}
{"in": "A = [[(0) for i in range(n)] for j in range(2 ** n)]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "c = ', '.join('{}={}'.format(*t) for t in zip(a, b))", "out": "辞書内包記法 引数展開 リストの文字列化"}
{"in": "conn = sqlite3.connect('C:\\\\users\\\\guest\\\\desktop\\\\example.db')", "out": "ユニコード"}
{"in": "print(json.dumps('\\u0411', ensure_ascii=False))", "out": "ユニコード"}
{"in": "files = [file for file in files if not file.endswith(('.dat', '.tar'))]", "out": "リスト内包記法 フィルタ"}
{"in": "((a[:, (np.newaxis), :] - v) ** 2).sum(axis=-1).shape", "out": "累乗演算子"}
{"in": "print(int(''.join(str(x) for x in [7, 7, 7, 7])))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict((name, eval(name)) for name in list_of_variable_names)", "out": "辞書内包記法"}
{"in": "df[df.index.levels[0].isin([int(i) for i in stk_list])]", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(w[::-1] for w in s.split())", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "new_string = re.sub('[^{}]+'.format(printable), '', the_string)", "out": "正規表現"}
{"in": "print(' '.join([function(word) for word in split]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.findall(' +|[^ ]+', s)", "out": "正規表現"}
{"in": "df[~df.col.str.startswith(('t', 'c'))]", "out": "反転演算子"}
{"in": "[list(x) for x in zip(*sorted(zip(list1, list2), key=itemgetter(0)))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "print('\\u25b2')", "out": "ユニコード"}
{"in": "float('{0}.{1}'.format(a[0], ''.join(str(n) for n in a[1:])))", "out": "辞書内包記法 リストの文字列化"}
{"in": "print(''.join(x[::-1] for x in pattern.split(string)))", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "print(datetime.utcnow().strftime('%Y%m%d%H%M%S%f'))", "out": "日付書式 時刻書式"}
{"in": "print(''.join(chr(ord('A') + i) if b else ' ' for i, b in enumerate(bools)))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "df['mnth_yr'] = df['date_column'].apply(lambda x: x.strftime('%B-%Y'))", "out": "日付書式"}
{"in": "next((i for i, v in enumerate(l) if is_odd(v)))", "out": "リスト内包記法 フィルタ"}
{"in": "return super(MyModelAdmin, self).get_form(request, obj, **kwargs)", "out": "引数展開"}
{"in": "[[random.random() for x in range(N)] for y in range(N)]", "out": "リスト内包記法 変換"}
{"in": "return [d for d in list1 if (d['classname'], d['testname']) not in check]", "out": "リスト内包記法 フィルタ"}
{"in": "return super(MyModelViewSet, self).dispatch(*args, **kwargs)", "out": "引数展開"}
{"in": "[values for key, values in list(rev_multidict.items()) if len(values) > 1]", "out": "辞書内包記法"}
{"in": "result = [list(someListOfElements) for _ in range(x)]", "out": "リスト内包記法 変換"}
{"in": "print(all(lst[i].lower() < lst[i + 1].lower() for i in range(len(lst) - 1)))", "out": "リスト内包記法 変換"}
{"in": "len([x for x in s if x['success']])", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"foo is {foo}, bar is {bar} and baz is {baz}\"\"\".format(**d)", "out": "引数展開"}
{"in": "sum(int(c) for c in strs if c.isdigit())", "out": "リスト内包記法 フィルタ"}
{"in": "n = [(i if i.startswith('h') else 'http' + i) for i in n]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "res = re.findall('-(?!(?:aa|bb)-)(\\\\w+)(?=-)', s)", "out": "正規表現"}
{"in": "format(f, '.2f').rstrip('0').rstrip('.')", "out": "少数点表示制限"}
{"in": "pairs = dict([match.split(':', 1) for match in matches])", "out": "辞書内包記法"}
{"in": "[x for i in range(len(l)) for x in l[i]]", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(words))", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join([c for c in string if c != \"'\"])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print(' '.join(['{0:b}'.format(x) for x in a_bytes]))", "out": "辞書内包記法 リストの文字列化"}
{"in": "file2.write(' '.join(buffer))", "out": "リストの文字列化"}
{"in": "any(pred(x) for x in lst)", "out": "リスト内包記法 変換"}
{"in": "print([x for x in A if all(y in x for y in B)])", "out": "リスト内包記法 フィルタ"}
{"in": "'%012d' % random.randrange(10 ** 12)", "out": "累乗演算子"}
{"in": "fout.write(binascii.unhexlify(''.join(line.split())))", "out": "リストの文字列化"}
{"in": "words = [word.replace('[br]', '<br />') for word in words]", "out": "リスト内包記法 変換"}
{"in": "[(lambda x: x * i) for i in range(4)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('[a-z]+', s)", "out": "正規表現"}
{"in": "my_array.compress([(x in ['this', 'that']) for x in my_array['job']])", "out": "リスト内包記法 変換"}
{"in": "zip(*[(1, 2), (3, 4), (5, 6)])", "out": "引数展開"}
{"in": "func('arg', 'arg2', 'some value' if condition else None)", "out": "三項演算子"}
{"in": "tuple_list = [(a, some_process(b)) for a, b in tuple_list]", "out": "リスト内包記法 変換"}
{"in": "\"\"\", \"\"\".join(str(f) for f in fruits)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "datetime.datetime.strptime('Mar232012', '%b%d%Y').strftime('%m/%d/%Y')", "out": "日付書式"}
{"in": "[int(i) for i in str(12345)]", "out": "リスト内包記法 変換"}
{"in": "print('test \\\\u0259'.decode('unicode-escape'))", "out": "ユニコード"}
{"in": "print('hi' if str1.startswith('\"') and str1.endswith('\"') else 'fails')", "out": "三項演算子"}
{"in": "test = sorted(test, key=lambda x: len(x) if type(x) == list else 1)", "out": "三項演算子"}
{"in": "holes = [(table[i][1] + 1, table[i + 1][0] - 1) for i in range(len(table) - 1)]", "out": "リスト内包記法 変換"}
{"in": "{k: (v * dict2[k]) for k, v in list(dict1.items()) if k in dict2}", "out": "辞書内包記法"}
{"in": "dic = dict((y, x) for x, y in enumerate(al, 1))", "out": "辞書内包記法"}
{"in": "text = os.linesep.join([s for s in text.splitlines() if s])", "out": "リスト内包記法 フィルタ"}
{"in": "print(['-'.join(words[i:i + span]) for i in range(0, len(words), span)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('(?<=.)(?=.)', '-', string)", "out": "正規表現"}
{"in": "somelist[:] = [x for x in somelist if not determine(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "{x[0]: len(list(x[1])) for x in itertools.groupby(sorted(mylist))}", "out": "辞書内包記法"}
{"in": "(lambda x, f: list(y[1] for y in f(x)))(lst, lambda x: (sorted(y) for y in x))", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\[.*\\\\]|\\\\{.*\\\\}', '', one)", "out": "正規表現"}
{"in": "[s.strip().split(': ') for s in data_string.splitlines()]", "out": "リスト内包記法 変換"}
{"in": "f.write(struct.pack('i', int(bits[::-1], 2)))", "out": "逆順の列"}
{"in": "[np.nonzero(np.in1d(x, c))[0] for x in [a, b, d, c]]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join('{0:04b}'.format(int(c, 16)) for c in hex_string)", "out": "辞書内包記法 リストの文字列化"}
{"in": "tuple(tup[0] for tup in A)", "out": "リスト内包記法 変換"}
{"in": "result.extend(re.split('_(?:f?or|and)_', s))", "out": "正規表現"}
{"in": "sum(c != ' ' for c in word)", "out": "リスト内包記法 変換"}
{"in": "new_dict = dict((item['id'], item) for item in initial_list)", "out": "辞書内包記法"}
{"in": "[list(g) for k, g in itertools.groupby(iterable)]", "out": "リスト内包記法 変換"}
{"in": "[k for k, g in groupby(sorted(chain.from_iterable(iter(content.values()))))]", "out": "リスト内包記法 変換"}
{"in": "np.asarray([func(i) for i in arr])", "out": "リスト内包記法 変換"}
{"in": "re.sub(',(?=[^][]*\\\\])', '', str)", "out": "正規表現"}
{"in": "print(''.join(mismatches))", "out": "リストの文字列化"}
{"in": "\"\"\" \"\"\".join([str(x) for x in t])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('[^-\\\\w]', ' ', 'black#white')", "out": "正規表現"}
{"in": "return (string[0 + i:length + i] for i in range(0, len(string), length))", "out": "リスト内包記法 変換"}
{"in": "s = re.match('^.*?\\\\.zip', s).group(0)", "out": "正規表現"}
{"in": "d.update((k, 'value3') for k, v in d.items() if v == 'value2')", "out": "リスト内包記法 フィルタ"}
{"in": "words = [word for word in string.split() if len(word) == 3]", "out": "リスト内包記法 フィルタ"}
{"in": "map(max, zip(*alist))", "out": "引数展開"}
{"in": "subset = [x for x in df2.columns if len(x) > 3]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(x for x in fn if x.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "dict(zip(l[::2], l[1::2]))", "out": "ひとつおきの列"}
{"in": "return [(i ** 2) for i in list]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "timeit.timeit(stmt=\"'hi' if True else 'bye'\")", "out": "三項演算子"}
{"in": "mydict = dict((rows[0], rows[1]) for rows in reader)", "out": "辞書内包記法"}
{"in": "result = '\\n'.join('\\t'.join(map(str, l)) for l in lists)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict((n, int(v)) for n, v in (a.split('=') for a in string.split()))", "out": "辞書内包記法"}
{"in": "{k: v for k, v in list(dict.items()) if v > something}", "out": "辞書内包記法"}
{"in": "[k for k, count in list(Counter(L).items()) if count > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "entry = [str(x) for x in cols.findAll(text=True)]", "out": "リスト内包記法 変換"}
{"in": "re.compile('(\\\\s{0,})+')", "out": "正規表現"}
{"in": "re.compile('(\\\\s{1,})+')", "out": "正規表現"}
{"in": "send = re.findall('\\\\$([^$]*)\\\\$', string)", "out": "正規表現"}
{"in": "re.findall('[+-]?\\\\d+', ' 1 sd  2 s 3 sfs 0 -1')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(re.findall('[A-Z][^A-Z]*', s)[3:])", "out": "正規表現 リストの文字列化"}
{"in": "{k: [x for x in v if x != 'x'] for k, v in myDict.items()}", "out": "辞書内包記法"}
{"in": "[int(el) for el in inputstring.split(',')]", "out": "リスト内包記法 変換"}
{"in": "re.sub('[\\\\t\\\\n\\\\r]', ' ', '1\\n2\\r3\\t4')", "out": "正規表現"}
{"in": "zip(*sorted(zip(x, y), key=ig0))", "out": "引数展開"}
{"in": "return [dictio for dictio in dictlist if dictio[key] in valuelist]", "out": "辞書内包記法"}
{"in": "sum(abs(x - y) for x, y in zip(sorted(xs), sorted(ys)))", "out": "リスト内包記法 変換"}
{"in": "df[col] = df[col].apply(lambda i: ''.join(i))", "out": "リストの文字列化"}
{"in": "[[int(y) for y in x] for x in values]", "out": "リスト内包記法 変換"}
{"in": "[OrderedDict((k, d[k](v)) for k, v in l.items()) for l in L]", "out": "リスト内包記法 変換"}
{"in": "datetime.datetime.strptime(myDate, '%Y-%m-%d %H:%M:%S,%f').timetuple()", "out": "日付書式 時刻書式"}
{"in": "l = np.array([list(method().values()) for _ in range(1, 11)])", "out": "リスト内包記法 変換"}
{"in": "re.split('(?<=\\\\))\\\\.', '(1.2).2')", "out": "正規表現"}
{"in": "print(re.findall(pattern, x))", "out": "正規表現"}
{"in": "[i for i, item in enumerate(a) if item in b]", "out": "リスト内包記法 フィルタ"}
{"in": "[tuple(l) for l in nested_lst]", "out": "リスト内包記法 変換"}
{"in": "thelist[:] = [d for d in thelist if d.get('id') != 2]", "out": "リスト内包記法 フィルタ"}
{"in": "[transform(x) for x in results if condition(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "min(x for x in lst if isinstance(x, str))", "out": "リスト内包記法 フィルタ"}
{"in": "print('%d  %.2f' % (count, conv))", "out": "少数点表示制限"}
{"in": "interestingelts = (x for x in oldlist if x not in ['a', 'c'])", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('|'.join(re.escape(x) for x in list1), s)", "out": "リスト内包記法 変換 正規表現 リストの文字列化"}
{"in": "\"\"\"My name is {surname}, {name} {surname}. I am {age}.\"\"\".format(**locals())", "out": "引数展開"}
{"in": "[[(i * j) for i, j in zip(*row)] for row in zip(matrix1, matrix2)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[x for x in l if not '2' in x]", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('(\\\\D+)', s)", "out": "正規表現"}
{"in": "[int(i) for i in str(number)]", "out": "リスト内包記法 変換"}
{"in": "[(i * y + x) for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "[x.start() for x in re.finditer('foo', 'foo foo foo foo')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "number = re.search('\\\\d+', filename).group()", "out": "正規表現"}
{"in": "sum(c.A for c in c_list)", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\p{P}', lambda m: '-' if m.group(0) == '-' else '', text)", "out": "三項演算子 正規表現"}
{"in": "soup.findAll('meta', attrs={'name': re.compile('^description$', re.I)})", "out": "正規表現"}
{"in": "pixmap4 = pixmap.scaled(64, 64, QtCore.Qt.KeepAspectRatio)", "out": "正規表現"}
{"in": "[synset.name.split('.')[0] for synset in wn.synsets('dog')]", "out": "リスト内包記法 変換"}
{"in": "re.findall('#(\\\\w+)', s)", "out": "正規表現"}
{"in": "revdict = dict((v, k) for k, v in list(ref.items()))", "out": "辞書内包記法"}
{"in": "zip(*lists)", "out": "引数展開"}
{"in": "dt.datetime.strptime('1985-04-12T23:20:50.52', '%Y-%m-%dT%H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "print(re.sub('\\u032f+', '\\u032f', unicodedata.normalize('NFKD', s)))", "out": "正規表現 ユニコード"}
{"in": "dict((k, 2) for k in a)", "out": "辞書内包記法"}
{"in": "a[:, ::2] + a[:, 1::2]", "out": "ひとつおきの列"}
{"in": "[a for a in s if s.count(a) == 1][0]", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join([str(x) for x in l]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict([(t.__name__, t) for t in fun_list])", "out": "辞書内包記法"}
{"in": "\"\"\"S H A N N O N  B R A D L E Y\"\"\".replace('  ', '   ')[::2]", "out": "ひとつおきの列"}
{"in": "re.sub('\\\\bfoo\\\\b', cased_replacer('bar'), 'this is foo', flags=re.I)", "out": "正規表現"}
{"in": "l = [x for x in l if x.strip()]", "out": "リスト内包記法 フィルタ"}
{"in": "file.write('\\ufeff')", "out": "ユニコード"}
{"in": "set([i[1:] for i in line.split() if i.startswith('#')])", "out": "リスト内包記法 フィルタ"}
{"in": "np.put(arr, np.where(~np.in1d(arr, valid))[0], 0)", "out": "反転演算子"}
{"in": "re.search('sample', line)", "out": "正規表現"}
{"in": "set(x[0] for x in list1).intersection(y[0] for y in list2)", "out": "リスト内包記法 変換"}
{"in": "strftime('%Y{0}%m{1}%d{2}').format(*'\\xe5\\xb9\\xb4\\xe6\\x9c\\x88\\xe6\\x97\\xa5')", "out": "日付書式 引数展開"}
{"in": "re.findall('(1(23))45', '12345')", "out": "正規表現"}
{"in": "print(unicodedata.normalize('NFC', 'c\\u0327'))", "out": "ユニコード"}
{"in": "a[-1] * (a[-1] + a[0]) / 2 - sum(a)", "out": "末尾の要素"}
{"in": "your_list = [int(i) for i in f.read().split()]", "out": "リスト内包記法 変換"}
{"in": "print('Who lives in a Pineapple under the sea? {name!s}.'.format(**locals()))", "out": "引数展開"}
{"in": "[x for d in thedict.values() for alist in d.values() for x in alist]", "out": "辞書内包記法"}
{"in": "list({len(s): s for s in jones}.values())", "out": "辞書内包記法"}
{"in": "super(ModelA, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "file_out[-1] = file_out[-1].strip('\\n')", "out": "末尾の要素"}
{"in": "User.query.join(User.person).filter(Person.id.in_(p.id for p in people)).all()", "out": "リスト内包記法 変換"}
{"in": "len([x for x in s if x.get('success', False)])", "out": "リスト内包記法 フィルタ"}
{"in": "x = min(float(s) for s in l)", "out": "リスト内包記法 変換"}
{"in": "re.search('[^f]', 'ffffooooooooo').start()", "out": "正規表現"}
{"in": "mylist[:] = [i for i in mylist if i != '']", "out": "リスト内包記法 フィルタ"}
{"in": "new_string = ''.join(ch for ch in your_string if ch.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "mylist = [int(x) for x in '3 ,2 ,6 '.split(',') if x.strip().isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "objects = ' and '.join(['{num} {obj}'.format(**item) for item in items])", "out": "辞書内包記法 引数展開 リストの文字列化"}
{"in": "result = re.sub('(?:@\\\\S*|#\\\\S*|http(?=.*://)\\\\S*)', '', subject)", "out": "正規表現"}
{"in": "return [i for i, x in enumerate(lst) if x < a or x > b]", "out": "リスト内包記法 フィルタ"}
{"in": "y = (i[0] for i in x)", "out": "リスト内包記法 変換"}
{"in": "logging.debug('Nothing special here... Keep walking')", "out": "正規表現"}
{"in": "s.split('.')[-1]", "out": "末尾の要素"}
{"in": "return QtCore.Qt.ItemIsEnabled", "out": "正規表現"}
{"in": "re.sub('[^\\\\x00-\\\\x7f]', ' ', n)", "out": "正規表現"}
{"in": "re.findall('-|\\\\+=|==|=|\\\\+|[^-+=\\\\s]+', 'hello-+==== =+  there')", "out": "正規表現"}
{"in": "[x for x in L if 'ab' in x]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[a-zA-Z]+\\\\b(?!\\\\()', 'movav(x/2, 2)*movsum(y, 3)*z')", "out": "正規表現"}
{"in": "f(*args)", "out": "引数展開"}
{"in": "new_data = (' '.join(w) for w in sixgrams)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\", \"\"\".join(map(str, myList))", "out": "リストの文字列化"}
{"in": "return ''.join(random.choice(alphabet) for i in range(length))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "{x: (0) for x in string.printable}", "out": "辞書内包記法"}
{"in": "datetime.strptime('2014-12-04', '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "[expensive_function(x) for x in range(5) if expensive_function(x) % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "tuple(s[i:i + 2] for i in range(0, len(s), 2))", "out": "リスト内包記法 変換"}
{"in": "[map(int, x) for x in values]", "out": "リスト内包記法 変換"}
{"in": "re.sub('(<!--)|(<!--)', '<comment>', child.text, flags=re.MULTILINE)", "out": "正規表現"}
{"in": "aList, bList = [[x for x in a if x[0] == i] for i in (0, 1)]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\":\"\"\".join(x.encode('hex') for x in 'Hello World!')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict(x.split(':') for x in lis)", "out": "辞書内包記法"}
{"in": "ones = [(x, y) for x, y in l if y == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "[(s + mystring) for s in mylist]", "out": "リスト内包記法 変換"}
{"in": "return [process_row(row) for row in table.xpath('./tr')]", "out": "リスト内包記法 変換"}
{"in": "result = sum(x for x in range(1, 401, 4))", "out": "リスト内包記法 変換"}
{"in": "list([x for x in totalist if x[:2] == ['A', 'B']])", "out": "リスト内包記法 フィルタ"}
{"in": "newString = re.sub('\\\\boldword\\\\b', 'newword', oldString)", "out": "正規表現"}
{"in": "f.write('# Data for Class A\\n')", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(re.split('(?<=[.?!])\\\\s+', phrase, 2)[:-1])", "out": "正規表現 リストの文字列化"}
{"in": "ar = [r[0] for r in cur.fetchall()]", "out": "リスト内包記法 変換"}
{"in": "all_subdirs = [d for d in os.listdir('.') if os.path.isdir(d)]", "out": "リスト内包記法 フィルタ"}
{"in": "tupleX = [x for x in tupleX if x > 5]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('[a-z]*', '123abc789')", "out": "正規表現"}
{"in": "re.findall('[a-z]*', '123456789')", "out": "正規表現"}
{"in": "sorted(set().union(*input_list))", "out": "引数展開"}
{"in": "\"\"\"{0:.2f}\"\"\".format(5)", "out": "少数点表示制限"}
{"in": "d = {k: [] for k in keys}", "out": "辞書内包記法"}
{"in": "print(''.join(x.stripped_strings))", "out": "リストの文字列化"}
{"in": "forms.ModelForm.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "hex_list = ('{:02x}'.format(ord(c)) for c in fp.read())", "out": "辞書内包記法"}
{"in": "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))", "out": "日付書式"}
{"in": "re.findall('(b+ab+)+', mystring)", "out": "正規表現"}
{"in": "a = [map(int, row.split()) for row in stdin]", "out": "リスト内包記法 変換"}
{"in": "['{:.2f}'.format(x) for x in nums]", "out": "辞書内包記法 少数点表示制限"}
{"in": "[word for line in f for word in line.split()]", "out": "リスト内包記法 変換"}
{"in": "integers = [(int(i) - 1) for i in line.split()]", "out": "リスト内包記法 変換"}
{"in": "print(list(itertools.chain(*[l for l in lst if l is not None]))[-5:])", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "int('{0:b}'.format(n)[::-1], 2)", "out": "逆順の列"}
{"in": "re.split('(?u)\\\\s', 'a\\u200bc d')", "out": "正規表現 ユニコード"}
{"in": "\"\"\", \"\"\".join('{} {}'.format(k, v) for k, v in list(d.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "{d[0]: (' '.join(d[1:]) if d[1:] else 0) for d in data}", "out": "辞書内包記法 三項演算子 リストの文字列化"}
{"in": "[numbers[i % len(numbers)] for i in range(start, start + len(numbers))]", "out": "リスト内包記法 変換"}
{"in": "json.dumps([dict(mpn=pn) for pn in lst])", "out": "辞書内包記法"}
{"in": "s = re.split('[0-9]{5,}', string)[0].strip()", "out": "正規表現"}
{"in": "foo = ''.join(foo.split())[:-3].upper()", "out": "リストの文字列化"}
{"in": "map(lambda y: [np.mean(y[i:i + length]) for i in range(0, len(y), length)], a)", "out": "リスト内包記法 変換"}
{"in": "[sum(zip(*x)[1]) for x in data]", "out": "リスト内包記法 変換 引数展開"}
{"in": "'\\ud800', '\\udc00', '-', '\\udbff', '\\udfff'", "out": "ユニコード"}
{"in": "res_list = [i[0] for i in rows]", "out": "リスト内包記法 変換"}
{"in": "score = sum([(x * y) for x, y in zip(a, b)])", "out": "リスト内包記法 変換"}
{"in": "b = [i for sub in a for i in sub]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(reverse('hello'))", "out": "リストの文字列化"}
{"in": "[j for i in range(100) if i > 10 for j in range(i) if j < 20]", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('\\\\s+', s)", "out": "正規表現"}
{"in": "yourstring = ''.join(('L', 'yourstring', 'LL'))", "out": "リストの文字列化"}
{"in": "[[y for y in x if y not in to_del] for x in my_list]", "out": "リスト内包記法 フィルタ"}
{"in": "my_list = [line.rstrip('\\n') for line in f]", "out": "リスト内包記法 変換"}
{"in": "[(int(i) if i.isdigit() else float(i)) for i in s]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "my_pattern = re.compile('\\xde\\xad[@-O].')", "out": "正規表現"}
{"in": "re.sub('(?<=\\\\.)(?!\\\\s)', ' ', para)", "out": "正規表現"}
{"in": "tree.delete(*tree.get_children())", "out": "引数展開"}
{"in": "[n for i, n in enumerate(xs) if i == 0 or n != xs[i - 1]]", "out": "リスト内包記法 フィルタ"}
{"in": "d.update((b, a[:, (i)]) for i, b in enumerate(a))", "out": "リスト内包記法 変換"}
{"in": "indices = [i for i, s in enumerate(mylist) if 'aa' in s]", "out": "リスト内包記法 フィルタ"}
{"in": "next((i for i, val in enumerate(lst) if np.all(val == array)), -1)", "out": "リスト内包記法 フィルタ"}
{"in": "x = [[foo for i in range(10)] for j in range(10)]", "out": "リスト内包記法 変換"}
{"in": "reg = re.compile('\\\\d{3}\\\\d{3}\\\\d{4}')", "out": "正規表現"}
{"in": "new_list = [' '.join(words) for words in words_list]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[len(x) for x in a[0]]", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(map(str, LIST)))", "out": "リストの文字列化"}
{"in": "map(ord, 'Hello, \\u9a6c\\u514b')", "out": "ユニコード"}
{"in": "[v for i, v in enumerate(myList) if i not in toRemove]", "out": "リスト内包記法 フィルタ"}
{"in": "bool(re.compile('^[a-z0-9\\\\.]+\\\\Z').match('1234\\n'))", "out": "正規表現"}
{"in": "return map(lambda f: f(*args), funcs)", "out": "引数展開"}
{"in": "y = [i[0] for i in x]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(format(ord(x), 'b') for x in a))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[x for x in a if x <= 1 or x >= 4]", "out": "リスト内包記法 フィルタ"}
{"in": "f(*args, **kwargs)", "out": "引数展開"}
{"in": "mylist = [i for i in mylist if i != '']", "out": "リスト内包記法 フィルタ"}
{"in": "c = [item for pair in zip(a, b) for item in pair]", "out": "リスト内包記法 変換"}
{"in": "s = re.sub('[^\\\\w\\\\s]', '', s)", "out": "正規表現"}
{"in": "re.sub('|'.join(map(re.escape, replace_list)), '', words)", "out": "正規表現 リストの文字列化"}
{"in": "l = [i.split() for i in l]", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('[\\\\[\\\\]]', '', np.array_str(a)))", "out": "正規表現"}
{"in": "return [x for x in l if x % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "FieldSet = dict((k, v) for k, v in FieldSet.items() if len(v) != 1)", "out": "辞書内包記法"}
{"in": "sum(v for k, v in c.items() if v > 1)", "out": "リスト内包記法 フィルタ"}
{"in": "datetime.datetime.strptime(conformed_timestamp, '%Y%m%dT%H%M%S.%f%z')", "out": "日付書式 時刻書式"}
{"in": "re.findall('\\\\d+', s)", "out": "正規表現"}
{"in": "l = [item.lower() for item in l]", "out": "リスト内包記法 変換"}
{"in": "[item for item in my_list if some_condition()]", "out": "リスト内包記法 フィルタ"}
{"in": "np.maximum.accumulate((A2 < 0)[:, ::-1], axis=1)[:, ::-1]", "out": "逆順の列"}
{"in": "tuple([tuple(row) for row in myarray])", "out": "リスト内包記法 変換"}
{"in": "coord = tuple(sum(x) for x in zip(coord, change))", "out": "リスト内包記法 変換"}
{"in": "new_items = [(x if x % 2 else None) for x in items]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "{l[1]: l for l in lol}", "out": "辞書内包記法"}
{"in": "data = json.loads(request.POST['mydata']) if 'mydata' in request.POST else {}", "out": "三項演算子"}
{"in": "any(k in s for k in keywords)", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\b0+(?!\\\\b)', '', '012 + 2 + 0 - 01 + 204 - 0')", "out": "正規表現"}
{"in": "len(a) == len(b) and all(a.count(i) == b.count(i) for i in a)", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\s\\\\s+', ' ', s)", "out": "正規表現"}
{"in": "[x for x in primes if '0' not in str(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "dict((k, v['_status']['md5']) for k, v in list(json_result.items()))", "out": "辞書内包記法"}
{"in": "os.path.isfile('C:\\\\Users\\\\xxx\\\\Desktop\\\\xxx')", "out": "ユニコード"}
{"in": "n = sum([(len(v) + 1) for k, v in list(dict_test.items())])", "out": "辞書内包記法"}
{"in": "\"\"\",\"\"\".join(map(str, a))", "out": "リストの文字列化"}
{"in": "[random.choice(list_of_lists) for _ in range(sample_size)]", "out": "リスト内包記法 変換"}
{"in": "mySet = set((x, y) for x in range(1, 51) for y in range(1, 51))", "out": "リスト内包記法 変換"}
{"in": "[i for i, (a, b) in enumerate(zip(vec1, vec2)) if a == b]", "out": "リスト内包記法 フィルタ"}
{"in": "return super(MyAdmin, self).formfield_for_dbfield(db_field, **kwargs)", "out": "引数展開"}
{"in": "dict(j for i in L for j in list(i.items()))", "out": "辞書内包記法"}
{"in": "print(re.findall('^.*\\\\.$\\\\Z', data, re.MULTILINE))", "out": "正規表現"}
{"in": "print(' '.join(i))", "out": "リストの文字列化"}
{"in": "pattern = re.compile('[^\\\\u0000-\\\\uFFFF]', re.UNICODE)", "out": "正規表現 ユニコード"}
{"in": "print([s[i] for i in index])", "out": "リスト内包記法 変換"}
{"in": "print((i, [round(255 * x) for x in rgb]))", "out": "リスト内包記法 変換"}
{"in": "[len(x) for x in s.split()]", "out": "リスト内包記法 変換"}
{"in": "[y for y in a if y not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "return [(x + 1) for x in y]", "out": "リスト内包記法 変換"}
{"in": "[(3 * x) for x in [111, 222, 333]]", "out": "リスト内包記法 変換"}
{"in": "regex = re.compile('\\\\d+(?:,\\\\d+)*')", "out": "正規表現"}
{"in": "regex = re.compile('\\\\s*[Ff]eat\\\\.\\\\s*')", "out": "正規表現"}
{"in": "{i: (0) for i in range(0, 10)}", "out": "辞書内包記法"}
{"in": "re.sub('\\\\{\\\\{.*\\\\}\\\\} ', '', s)", "out": "正規表現"}
{"in": "re.findall('.{1,2}', s, re.DOTALL)", "out": "正規表現"}
{"in": "[item for sublist in (list_of_lists for item in sublist)]", "out": "リスト内包記法 変換"}
{"in": "[a for a in A.objects.all() if a.b_set.count() < 2]", "out": "リスト内包記法 フィルタ"}
{"in": "return int(s[1:], 2) / 2.0 ** (len(s) - 1)", "out": "累乗演算子"}
{"in": "[x[0] for x in a]", "out": "リスト内包記法 変換"}
{"in": "any(i in '<string>' for i in ('11', '22', '33'))", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('[a-zA-Z?]', '', my_string).strip())", "out": "正規表現"}
{"in": "[w for w in re.split('\\\\W', 'Hello world, my name is...James!') if w]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "l3 = [x for x in l1 if x not in l2]", "out": "リスト内包記法 フィルタ"}
{"in": "return [t[len(parm):] for t in dir.split('_') if t.startswith(parm)]", "out": "リスト内包記法 フィルタ"}
{"in": "datetime.datetime.strptime('5/10/1955', '%d/%m/%Y').strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "filtered_dict = {k: v for k, v in my_dict.items() if not st.isdisjoint(v)}", "out": "辞書内包記法"}
{"in": "simplelist = [SimpleClass(count) for count in range(4)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(sorted(x))", "out": "リストの文字列化"}
{"in": "[add(x, 2) for x in [1, 2, 3]]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\d+', \"hello 42 I'm a 32 string 30\")", "out": "正規表現"}
{"in": "df.ix[:, (~np.in1d(df.dtypes, ['object', 'datetime']))] *= 3", "out": "反転演算子"}
{"in": "a[np.lexsort(a[:, ::-1].T)]", "out": "逆順の列"}
{"in": "my_dict2 = {y: x for x, y in my_dict.items()}", "out": "辞書内包記法"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "return ' '.join(word[::-1] for word in sentence.split())", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "[key for key, val in list(dct.items()) if val]", "out": "リスト内包記法 フィルタ"}
{"in": "int(0 if value is None else value)", "out": "三項演算子"}
{"in": "[heapq.nsmallest(x, 2)[1] for x in list_of_lists]", "out": "リスト内包記法 変換"}
{"in": "a = [(b + 4 if b < 0 else b) for b in a]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "print(', '.join(data[:-2] + [' and '.join(data[-2:])]))", "out": "リストの文字列化"}
{"in": "c = ', '.join('%s=%s' % t for t in zip(a, b))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "','.join(my_list[:-1]) + '&' + my_list[-1]", "out": "リストの文字列化 末尾の要素"}
{"in": "any(np.array_equal(np.array([[0, 0], [0, 0]]), x) for x in my_list)", "out": "リスト内包記法 変換"}
{"in": "[(x, y) for x, y in numpy.ndindex(a.shape)]", "out": "リスト内包記法 変換"}
{"in": "sum(1 for row in rows for i in row if i)", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(map(chr, L))", "out": "リストの文字列化"}
{"in": "[(movie_dict['title'], movie_dict['year']) for movie_dict in movie_dicts]", "out": "辞書内包記法"}
{"in": "{k: sum(v) for k, v in list(trimmed.items())}", "out": "辞書内包記法"}
{"in": "f.write(' '.join(str(s) for s in t) + '\\n')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "(dist ** 2).sum(axis=1) ** 0.5", "out": "累乗演算子"}
{"in": "lst = [os.path.splitext(x)[0] for x in accounts]", "out": "リスト内包記法 変換"}
{"in": "soup.body.findAll(text=re.compile('^Python$'))", "out": "正規表現"}
{"in": "{' '.join([keys[char] for char in k]): v for k, v in list(event_types.items())}", "out": "辞書内包記法 リストの文字列化"}
{"in": "lambda x: x if x < 3 else None", "out": "三項演算子"}
{"in": "print(date.strftime('%a, %d %b %Y %H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "my_list2, my_list1 = map(list, zip(*my_list))", "out": "引数展開"}
{"in": "return sum(1 for c in string if c.islower())", "out": "リスト内包記法 フィルタ"}
{"in": "[a[i // 2] for i in range(len(a) * 2)]", "out": "リスト内包記法 変換"}
{"in": "print('The average is: ' + format(average, ',.3f') + '%')", "out": "少数点表示制限"}
{"in": "\"\"\", \"\"\".join(map(str, tups))", "out": "リストの文字列化"}
{"in": "a_lower = dict((k.lower(), v) for k, v in list(a.items()))", "out": "辞書内包記法"}
{"in": "{tuple(x) for x in l1}.intersection(map(tuple, l2))", "out": "辞書内包記法"}
{"in": "starf = [int(i) for i in starf]", "out": "リスト内包記法 変換"}
{"in": "sum(zip(*structure)[1])", "out": "引数展開"}
{"in": "[list(itertools.chain(*x)) for x in zip(L1, L2)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "{k: [(a + b) for a, b in zip(*v)] for k, v in list(d.items())}", "out": "辞書内包記法 引数展開"}
{"in": "len([_ for s in re.finditer('(?=aa)', 'aaa')])", "out": "リスト内包記法 変換 正規表現"}
{"in": "\"\"\"\"\"\".join(ch for ch, _ in itertools.groupby(foo))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "codecs.decode('\\\\u000D', 'unicode-escape')", "out": "ユニコード"}
{"in": "\"\"\"\"\"\".join(chr(int(data[i:i + 2], 16)) for i in range(0, len(data), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(2 * x) for x in some_list if x > 2]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\", \"\"\".join(('abc', 'def', 'ghi'))", "out": "リストの文字列化"}
{"in": "[''.join(x) for x in window('7316717', 3)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "data = [[int(i) for i in line.split()] for line in original]", "out": "リスト内包記法 変換"}
{"in": "subsampled = df.ix[(choice(x) for x in list(grouped.groups.values()))]", "out": "リスト内包記法 変換"}
{"in": "[next(iter(s)) for _ in range(10)]", "out": "リスト内包記法 変換"}
{"in": "[os.path.split(r)[-1] for r, d, f in os.walk(tree) if not d]", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "pprint([OrderedDict(zip(names, subl)) for subl in list_of_lists])", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(map(bin, bytearray(st)))", "out": "リストの文字列化"}
{"in": "re.findall(rx, st, re.VERBOSE)", "out": "正規表現"}
{"in": "{key: data[key] for key in data if not_seen(key.split(':')[0])}", "out": "辞書内包記法"}
{"in": "ax.set_title('Title for first plot')", "out": "リスト内包記法 変換"}
{"in": "testVar = input('Ask user for something.')", "out": "リスト内包記法 変換"}
{"in": "a[([i for i in range(a.shape[0]) if i != 1]), :, :]", "out": "リスト内包記法 フィルタ"}
{"in": "[(x, y) for x in a for y in b]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\bdelhi\\\\b(?=(?:\"[^\"]*\"|[^\"])*$)', '', a)", "out": "正規表現"}
{"in": "re.findall('\\\\S+', s)", "out": "正規表現"}
{"in": "[str(n) for n in range(10)]", "out": "リスト内包記法 変換"}
{"in": "filtered_dict = {k: v for k, v in list(d.items()) if filter_string in k}", "out": "辞書内包記法"}
{"in": "result = copy.deepcopy(old_dict) if old_dict is not None else {}", "out": "三項演算子"}
{"in": "re.findall('(?u)\\\\b\\\\w\\\\w+\\\\b', 'this is a sentence! this is another one.')", "out": "正規表現"}
{"in": "np.concatenate((A[::-1, :], A), axis=0)", "out": "逆順の列"}
{"in": "[random.random() for _ in range(0, 10)]", "out": "リスト内包記法 変換"}
{"in": "[x for x in data if x['site'] == 'Superuser']", "out": "リスト内包記法 フィルタ"}
{"in": "[(x[1], x[2]) for x in (x.split(';') for x in a.split('\\n')) if x[1] != 5]", "out": "リスト内包記法 フィルタ"}
{"in": "[i for i in range(len(word)) if word[i] == letter]", "out": "リスト内包記法 フィルタ"}
{"in": "print(', '.join(LIST))", "out": "リストの文字列化"}
{"in": "all('\\u4e00' <= c <= '\\u9fff' for c in name.decode('utf-8'))", "out": "リスト内包記法 変換 ユニコード"}
{"in": "subbed = re.sub('\\\\s{2,}', '|', line.strip())", "out": "正規表現"}
{"in": "[random.sample(s, 1)[0] for _ in range(10)]", "out": "リスト内包記法 変換"}
{"in": "json.dumps({str(k): v for k, v in list(data.items())})", "out": "辞書内包記法"}
{"in": "c = [(i, 0) for i in a]", "out": "リスト内包記法 変換"}
{"in": "{'name': [p['name'] for p in persons], 'age': [p['age'] for p in persons]}", "out": "辞書内包記法"}
{"in": "zip(*elements)[1]", "out": "引数展開"}
{"in": "ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))", "out": "少数点表示制限"}
{"in": "sum(sum(1 for i in row if i) for row in rows)", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.sub('(.+?)(going|you|$)', subit, s))", "out": "正規表現"}
{"in": "logging.Formatter(fmt='%(asctime)s.%(msecs)03d', datefmt='%Y-%m-%d,%H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "sum([v[0] for v in list(d.values())]) / float(len(d))", "out": "リスト内包記法 変換"}
{"in": "total = sum(int(r[1]) for r in csv.reader(fin))", "out": "リスト内包記法 変換"}
{"in": "(1 + math.cos(i)) ** (1 / 3.0)", "out": "累乗演算子"}
{"in": "[(m.get(k, k), v) for k, v in list(d.items())]", "out": "リスト内包記法 変換"}
{"in": "int(''.join([hex(ord(x))[2:] for x in 'YZ']), 16)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(mylist[i:] + [newelement] + mylist[:i]) for i in range(len(mylist), -1, -1)]", "out": "リスト内包記法 変換"}
{"in": "q.write(''.join(w))", "out": "リストの文字列化"}
{"in": "print([tryeval(x) for x in L])", "out": "リスト内包記法 変換"}
{"in": "[(m + str(n)) for m, n in zip(b, a)]", "out": "リスト内包記法 変換"}
{"in": "[x.start() for x in re.finditer('\\\\|', str)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "sum(int(n) for n in str(2 ** 1000))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "match = re.search('(?<=Value=?)([^&>]+)', strJunk)", "out": "正規表現"}
{"in": "['{}_{}'.format(k, v) for k, l in list(d.items()) for v in l]", "out": "辞書内包記法"}
{"in": "[l[i:i + 3] for i in range(0, len(l), 3)]", "out": "リスト内包記法 変換"}
{"in": "re.split('[^0-9A-Za-z]+', strs)", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join(sorted(k + ':' + v for k, v in list(d.items())))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "sum(i % 4 == 3 for i in l)", "out": "リスト内包記法 変換"}
{"in": "myfunc(*args)", "out": "引数展開"}
{"in": "[int(s) for s in I.split() if s.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "myval = myval if myval is not None else defaultval", "out": "三項演算子"}
{"in": "datetime.date(2002, 12, 4).strftime('%Y%m%d')", "out": "日付書式"}
{"in": "result.update((k, v) for k, v in user.items() if v is not None)", "out": "リスト内包記法 フィルタ"}
{"in": "pd.read_hdf('my_store.h5', 'a_table_node', ['index>100'])", "out": "正規表現"}
{"in": "np.concatenate((A[::-1, :], A[1:, :]), axis=0)", "out": "逆順の列"}
{"in": "lambda x: x if x is not None else ''", "out": "三項演算子"}
{"in": "[x[0] for x in tuple_list]", "out": "リスト内包記法 変換"}
{"in": "new_list = [(a, new_b) for a, b in tuple_list]", "out": "リスト内包記法 変換"}
{"in": "[list(map(int, x)) for x in values]", "out": "リスト内包記法 変換"}
{"in": "re.findall('(?:A|B|C)D', 'BDE')", "out": "正規表現"}
{"in": "new_dict = {k: my_dict[k] for k in my_list if k in my_dict}", "out": "辞書内包記法"}
{"in": "min([x for x in [None, 1, 2] if x is not None])", "out": "リスト内包記法 フィルタ"}
{"in": "set.intersection(*(set(x) for x in d.values()))", "out": "リスト内包記法 変換 引数展開"}
{"in": "sum(i for i in a)", "out": "リスト内包記法 変換"}
{"in": "print('{%s}' % ', '.join([('\"%s\": \"%s\"' % (k, v)) for k, v in list(pairs.items())]))", "out": "辞書内包記法 リストの文字列化"}
{"in": "dict((k, mydict[k]) for k in keys_to_select if k in mydict)", "out": "辞書内包記法"}
{"in": "C1 = [float(i) for i in C if i]", "out": "リスト内包記法 フィルタ"}
{"in": "[d[key] for d in dicts if key in d]", "out": "辞書内包記法"}
{"in": "[([1] * 4) for n in range(3)]", "out": "リスト内包記法 変換"}
{"in": "[w for w in open('file.txt') if not re.search('([aeiou])\\\\1', w)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "return set(zip(*[lst[i:] for i in range(n)]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "s = ' '.join(word[0].upper() + word[1:] for word in s.split())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "A = [(A[i + 1] + A[i]) for i in range(len(A) - 1)]", "out": "リスト内包記法 変換"}
{"in": "return [numbers[i] for i in range(len(numbers)) if i not in indices]", "out": "リスト内包記法 フィルタ"}
{"in": "yourlist = ['{}_{}_{}'.format(s.rsplit('_', 2)[0], x, y) for s in yourlist]", "out": "辞書内包記法"}
{"in": "print(mydate.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "[i for e in bad for i in my_list if e in i]", "out": "リスト内包記法 フィルタ"}
{"in": "Popen(['python', 'StripCore.py'])", "out": "正規表現"}
{"in": "rand_smpl = [mylist[i] for i in sorted(random.sample(range(len(mylist)), 4))]", "out": "リスト内包記法 変換"}
{"in": "list([x for x in l if x not in f])", "out": "リスト内包記法 フィルタ"}
{"in": "lst = [int(i) for i in str(num)]", "out": "リスト内包記法 変換"}
{"in": "res = list(set(a) ^ set(b))", "out": "排他的論理和"}
{"in": "dict(((h, h * 2) for h in range(5)), foo='foo', **{'bar': 'bar'})", "out": "辞書内包記法 引数展開"}
{"in": "print(['{0:0.2f}'.format(i) for i in a])", "out": "辞書内包記法 少数点表示制限"}
{"in": "datetime.datetime.strptime(time.ctime(), '%a %b %d %H:%M:%S %Y')", "out": "日付書式 時刻書式"}
{"in": "return ''.join(random.choice(char) for x in range(length))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[i for i, j in enumerate(a) if j == m]", "out": "リスト内包記法 フィルタ"}
{"in": "self.matches = [s for s in self.options if s and s.startswith(text)]", "out": "リスト内包記法 フィルタ"}
{"in": "norm = [(float(i) / sum(raw)) for i in raw]", "out": "リスト内包記法 変換"}
{"in": "c = sum(1 for word in words if word[0] == word[-1])", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "array = [[int(j) for j in i.split(',')] for i in tmp]", "out": "リスト内包記法 変換"}
{"in": "[map(dict.get, list(range(1, 6))) for _ in range(10)]", "out": "辞書内包記法"}
{"in": "re.sub(reg, rep, text)", "out": "正規表現"}
{"in": "print('[' + ','.join(\"'\" + str(x) + \"'\" for x in s) + ']')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "next((i for i, v in enumerate(a) if i == 666), None)", "out": "リスト内包記法 フィルタ"}
{"in": "new = [int(i) for i in old]", "out": "リスト内包記法 変換"}
{"in": "s = ''.join(F(c) for c in s)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "any(x in set(b) for x in a)", "out": "リスト内包記法 変換"}
{"in": "foo = ''.join(foo.split())", "out": "リストの文字列化"}
{"in": "sum([i for i in range(1000) if i % 3 == 0 or i % 5 == 0])", "out": "リスト内包記法 フィルタ"}
{"in": "df['c'] = (df.a.str[-1] == df.b).astype(int)", "out": "末尾の要素"}
{"in": "float('{0}.{1}'.format(*a))", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(str(ord(c)) for c in s)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(j - i) for i, j in zip(t[:-1], t[1:])]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(set(foo))", "out": "リストの文字列化"}
{"in": "f.write('\\u5e73\\u621015')", "out": "ユニコード"}
{"in": "bytetable = [('00000000' + bin(x)[2:])[-8:] for x in range(256)]", "out": "リスト内包記法 変換"}
{"in": "print('.'.join([bin(int(x) + 256)[3:] for x in ip.split('.')]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "all(b >= a for a, b in zip(the_list, it))", "out": "リスト内包記法 変換"}
{"in": "[(n / d) for n, d in (map(float, i.split('/')) for i in data)]", "out": "リスト内包記法 変換"}
{"in": "zip(*A)", "out": "引数展開"}
{"in": "print(d.strftime('%m/%d/%Y'))", "out": "日付書式"}
{"in": "print(re.match('[^/]+', text))", "out": "正規表現"}
{"in": "all(x.isalpha() for x in ['ab1', 'def'])", "out": "リスト内包記法 変換"}
{"in": "var1, var2 = [int(x) for x in input('Enter two numbers here: ').split()]", "out": "リスト内包記法 変換"}
{"in": "[word for word in l if word.isalnum()]", "out": "リスト内包記法 フィルタ"}
{"in": "c = [x for x in b if x in _auxset]", "out": "リスト内包記法 フィルタ"}
{"in": "[list(x[1]) for x in itertools.groupby(data, lambda x: x == 0) if not x[0]]", "out": "リスト内包記法 フィルタ"}
{"in": "zip(*([iter(num_str.split(','))] * 4))", "out": "引数展開"}
{"in": "list(itertools.chain(*[([k] * v) for k, v in list(d.items())]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "D.update((k, v) for k, v in user.items() if v is not None)", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"{:.2f}\"\"\".format(round(2606.89579999999, 2))", "out": "少数点表示制限"}
{"in": "any(x.startswith('%s/' % name.rstrip('/')) for x in z.namelist())", "out": "リスト内包記法 変換"}
{"in": "print([[j.split('(')[0] for j in i.split()] for i in L1])", "out": "リスト内包記法 変換"}
{"in": "dict(i.split('=') for i in x)", "out": "辞書内包記法"}
{"in": "parts = [your_string[i:i + n] for i in range(0, len(your_string), n)]", "out": "リスト内包記法 変換"}
{"in": "data_slices.sort(key=lambda s: s[-1].start)", "out": "末尾の要素"}
{"in": "return '\\n'.join(lines)", "out": "リストの文字列化"}
{"in": "Cordi1 = [[int(i) for i in line.split()] for line in data]", "out": "リスト内包記法 変換"}
{"in": "re.compile('[')", "out": "正規表現"}
{"in": "[x for b in a for x in b]", "out": "リスト内包記法 変換"}
{"in": "ax.xaxis.set_major_formatter(dates.DateFormatter('%H:%M'))", "out": "時刻書式"}
{"in": "htmlspaced = re.sub('\\\\r\\\\n', ' ', html)", "out": "正規表現"}
{"in": "[(int(i) if int(i) == i else i) for i in li]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "{key: val for key, val in parent_dict.items() if 2 < key < 4}", "out": "辞書内包記法"}
{"in": "np.array([(arr + i) for i in np.arange(-0.2, 0.25, 0.1)]).T.ravel()", "out": "リスト内包記法 変換"}
{"in": "min([t for t in l if not math.isnan(t[1])], key=itemgetter(1))", "out": "リスト内包記法 フィルタ"}
{"in": "zeros = [([0] * M) for _ in range(N)]", "out": "リスト内包記法 変換"}
{"in": "[list(i.group(1, 2)) for i in re.finditer('(\\\\d{2})(020511|00)', theStr)]", "out": "辞書内包記法 正規表現"}
{"in": "return dict([k_v for k_v in list(d1.items()) if k_v[0] in d2 and d2[k_v[0]] == k_v[1]])", "out": "辞書内包記法"}
{"in": "ax.set_title('Title for second plot')", "out": "リスト内包記法 変換"}
{"in": "Series([str(x) for x in htmldata])", "out": "リスト内包記法 変換"}
{"in": "print([(lst[i], lst[i + 1]) for i in range(0, len(lst), 2)])", "out": "リスト内包記法 変換"}
{"in": "df.select(lambda x: re.search('prefix$', str(x)) is None, axis=1)", "out": "正規表現"}
{"in": "return re.split(seperator, f.read())", "out": "正規表現"}
{"in": "\"\"\"SELECT {0} FROM searchterms WHERE onstate = 1\"\"\".format(', '.join(columns))", "out": "リストの文字列化"}
{"in": "t = time.mktime(time.strptime('29.08.2011 11:05:02', '%d.%m.%Y %H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "re.findall('alpha(.*?)bravo', st)", "out": "正規表現"}
{"in": "print([(s, s in st1) for s in re.findall(pat, st2)])", "out": "リスト内包記法 変換 正規表現"}
{"in": "mylist[:] = [s.replace(':', '') for s in mylist]", "out": "リスト内包記法 変換"}
{"in": "print(item[0], ', '.join(map(str, item[1:])))", "out": "リストの文字列化"}
{"in": "[x for y in l for x in y]", "out": "リスト内包記法 変換"}
{"in": "pd.to_datetime(pd.Series(['05/23/2005']), format='%m/%d/%Y')", "out": "日付書式"}
{"in": "re.match('[a-zA-Z][\\\\w-]*$', 'A\\n')", "out": "正規表現"}
{"in": "np.einsum('ij,jk->ik', nodes, x ** np.array([2, 1, 0])[:, (None)])", "out": "累乗演算子"}
{"in": "str = re.sub('(&[a-zA-Z])', dictsub, str)", "out": "正規表現"}
{"in": "re.split('[^\\\\d\\\\.]+', s)", "out": "正規表現"}
{"in": "time.strftime('%Y-%m-%d %H:%M', time.strptime(s, '%d-%m-%Y %H:%M'))", "out": "日付書式 時刻書式"}
{"in": "next((e for e in mylist if my_criteria(e)), None)", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(sorted(d['Name'] for d in thisismylist)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "{tuple(key): value for key, value in zip(bins, count)}", "out": "辞書内包記法"}
{"in": "{key: list(set.difference(set(a[key]), b.get(key, []))) for key in a}", "out": "辞書内包記法"}
{"in": "print(list(chain.from_iterable((x, x + 1) for x in l)))", "out": "リスト内包記法 変換"}
{"in": "[(a, b, c) for a in [1, 2, 3] for b in ['a', 'b'] for c in [4, 5]]", "out": "リスト内包記法 変換"}
{"in": "[[[x, y] for x in list1] for y in list2]", "out": "リスト内包記法 変換"}
{"in": "a.__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "a[~np.isnan(a).any(1)]", "out": "反転演算子"}
{"in": "list(StreetCat._meta.parents.keys())[-1]", "out": "末尾の要素"}
{"in": "out_file.write('\\n'.join(data))", "out": "リストの文字列化"}
{"in": "[v for k, v in list(my_dict.items()) if k.startswith('Date')]", "out": "辞書内包記法"}
{"in": "return struct.pack('f' * len(data), *data)", "out": "引数展開"}
{"in": "[2, 3] in [v[i:i + 2] for i in range(len(v) - 1)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\s+\\\\Z', '', s)", "out": "正規表現"}
{"in": "A2, B2 = zip(*sorted(zip(A, B), key=lambda x: x[1]))", "out": "引数展開"}
{"in": "re.sub('\\\\((\\\\d+)\\\\)', '\\\\1', a)", "out": "正規表現"}
{"in": "len([x for x in frequencies if x > 0])", "out": "リスト内包記法 フィルタ"}
{"in": "x[:, 1::2]", "out": "ひとつおきの列"}
{"in": "df[0].apply(lambda x: (0, 0) if x is np.nan else x)", "out": "三項演算子"}
{"in": "mergedgroupdict('(?P<b>.b.)|(?P<i>.i.)', 'abcdefghijk'[::-1])", "out": "逆順の列"}
{"in": "inlinkDict[docid] = adoc[1:] if adoc[1:] else 0", "out": "三項演算子"}
{"in": "print([d.strftime('%d/%m/%Y') for d in rr[::2]])", "out": "リスト内包記法 変換 日付書式 ひとつおきの列"}
{"in": "the_regex = re.compile(re.escape(the_value))", "out": "正規表現"}
{"in": "(0, 1) not in ((x % 2, y % 2) for x, y in zip(values, values[1:]))", "out": "リスト内包記法 変換"}
{"in": "\"\"\"{\"asset_id\": \"575155948f7d4c4ebccb02d4e8f84d2f\", \"body\": \"\\\\u003cscript\\\\u003e\\\\u003c/script\\\\u003e\", \"asset_created\": null}\"\"\"", "out": "ユニコード"}
{"in": "print(re.sub('<[A-Za-z\\\\/][^>]*>', '', my_string))", "out": "正規表現"}
{"in": "values = (int(i) for i in values.split(','))", "out": "リスト内包記法 変換"}
{"in": "re.split('[,;]+', 'This,is;a,;string')", "out": "正規表現"}
{"in": "list('\\u8fd9\\u662f\\u4e00\\u4e2a\\u53e5\\u5b50')", "out": "ユニコード"}
{"in": "sum(Decimal(n) * Decimal(10) ** Decimal(i) for i, n in zip(count(0, -1), a))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "print('\\n'.join([','.join(x) for x in A]), file=f)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[float(i) for i in a.strip('{}').split(',')]", "out": "辞書内包記法"}
{"in": "max(n for n in range(1000) if str(n) == str(n)[::-1] and is_prime(n))", "out": "リスト内包記法 フィルタ 逆順の列"}
{"in": "np.maximum.accumulate(Q[:, ::-1], axis=1)[:, ::-1]", "out": "逆順の列"}
{"in": "legend.figure.canvas.mpl_connect('motion_notify_event', self.on_motion)", "out": "正規表現"}
{"in": "foodict = {k: v for k, v in list(mydict.items()) if k.startswith('foo')}", "out": "辞書内包記法"}
{"in": "rect = picture.get_rect()", "out": "正規表現"}
{"in": "kludged = re.sub('(?i)([a-z_].*?):', '\"\\\\1\":', string)", "out": "正規表現"}
{"in": "y = [j for i in x for j in i]", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join(map(str, li2))", "out": "リストの文字列化"}
{"in": "sum(1 for d in my_list if d.get('id') == 1)", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join([x.rsplit(None, 1)[0] for x in target.strip().split('\\n')]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "super(UsuarioForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[sum(x) for x in zip(*lists_of_lists)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "return '{0:0{x}d}'.format(random.randint(0, 10 ** x - 1), x=x)", "out": "累乗演算子"}
{"in": "wordsep_re = re.compile('(\\\\s+|(?:-|\\\\+|\\\\*\\\\*|\\\\*))')", "out": "正規表現"}
{"in": "p = re.compile('name (.*?) is valid')", "out": "正規表現"}
{"in": "soup.findAll('meta', name=re.compile('^description$', re.I))", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(g)", "out": "リストの文字列化"}
{"in": "return [x for i, x in enumerate(numbers) if i not in indices]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('\\\\D(\\\\d{5})\\\\D', ' ' + s + ' ')", "out": "正規表現"}
{"in": "set.intersection(*map(set, d))", "out": "引数展開"}
{"in": "plt.gca().xaxis.set_major_formatter(DateFormatter('%H:%M:%S'))", "out": "時刻書式"}
{"in": "re.sub('\\\\d+', lambda x: x.group().zfill(padding), s)", "out": "正規表現"}
{"in": "regx = re.compile('\\\\s+and\\\\s+|\\\\s*,\\\\s*')", "out": "正規表現"}
{"in": "files = [fi for fi in files if not fi.endswith('.dat')]", "out": "リスト内包記法 フィルタ"}
{"in": "{i: functools.reduce(dict.__getitem__, keys, d[i]) for i in d}", "out": "辞書内包記法"}
{"in": "mylist = [('XXX' if v == 'abc' else v) for v in mylist]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "sorted(lis, key=lambda a: Infinity() if a['name'] is None else a['name'])", "out": "三項演算子"}
{"in": "(x for x in List)", "out": "リスト内包記法 変換"}
{"in": "print(sum(num for num in numbers if num % 2 == 1))", "out": "リスト内包記法 フィルタ"}
{"in": "d = datetime.strptime(date_str, '%Y-%m-%d')", "out": "日付書式"}
{"in": "some_func(*params)", "out": "引数展開"}
{"in": "os.system('cls' if os.name == 'nt' else 'clear')", "out": "三項演算子"}
{"in": "column_names = [item[0] for item in cursor.description]", "out": "リスト内包記法 変換"}
{"in": "[i for i in range(100) if i > 10 if i < 50]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub(' and (?=.* and )', ', ', str)", "out": "正規表現"}
{"in": "sorted({x for v in content.values() for x in v})", "out": "辞書内包記法"}
{"in": "set(tuple(i) for i in l)", "out": "リスト内包記法 変換"}
{"in": "[e for i, e in enumerate(main_list) if i in indexes]", "out": "リスト内包記法 フィルタ"}
{"in": "return sum(int(x) for x in digit if x.isdigit())", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('\\\\d+|[^\\\\d\\\\s]+', string)", "out": "正規表現"}
{"in": "configfiles = glob.glob('C:\\\\Users\\\\sam\\\\Desktop\\\\*\\\\*.txt')", "out": "ユニコード"}
{"in": "\"\"\":\"\"\".join('{:02x}'.format(ord(c)) for c in s)", "out": "辞書内包記法 リストの文字列化"}
{"in": "print(''.join(format(x, '02x') for x in array_alpha))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[k for k, v in colour.items() if v == min_val]", "out": "リスト内包記法 フィルタ"}
{"in": "blob_reader = blobstore.BlobReader('my_blobstore_key')", "out": "正規表現"}
{"in": "[y for y in a if y not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "[int(char) for char in str(634)]", "out": "リスト内包記法 変換"}
{"in": "{{url_for('post_blueprint.get_post', **post)}}", "out": "引数展開"}
{"in": "re.sub(' +', ' ', 'The     quick brown    fox')", "out": "正規表現"}
{"in": "print(re.sub('-+', '-', astr))", "out": "正規表現"}
{"in": "newNums = [i for i, x in enumerate(nums) if x == 12]", "out": "リスト内包記法 フィルタ"}
{"in": "[peaks([x, y]) for x, y in zip(xscat, yscat)]", "out": "リスト内包記法 変換"}
{"in": "p = re.compile('name (.*) is valid')", "out": "正規表現"}
{"in": "{x.split(':')[0]: x.split(':')[1] for x in a}", "out": "辞書内包記法"}
{"in": "re.sub('(\\\\d+)', lambda m: '%.0f' % (float(m.group(1)) * 2), 'test line 123')", "out": "正規表現"}
{"in": "df['data'] = pd.to_datetime(df['data'], format='%d/%b/%Y:%H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "sys.path.append(os.path.expanduser('~/python/libs'))", "out": "反転演算子"}
{"in": "good_data = [data[(n), :][flag == 1].tolist() for n in range(data.shape[0])]", "out": "リスト内包記法 変換"}
{"in": "mydatetime.strftime('%-m/%d/%Y %-I:%M%p')", "out": "日付書式"}
{"in": "sum(x > 0 for x in frequencies)", "out": "リスト内包記法 変換"}
{"in": "\"\"\"google.com. 1700 IN TXT \"v=spf1 include:_netblocks.google.com ip4:216.73.93.70/31 ip4:216.73.93.72/31 ~all\\\"\"\"\"", "out": "反転演算子"}
{"in": "re.split('\\\\||<>', input)", "out": "正規表現"}
{"in": "[(key, len(list(it))) for key, it in itertools.groupby(list_one)]", "out": "リスト内包記法 変換"}
{"in": "[int(x) for line in data for x in line.split()]", "out": "リスト内包記法 変換"}
{"in": "np.mgrid[[slice(row[0], row[1], n * 1j) for row, n in zip(bounds, n_bins)]]", "out": "リスト内包記法 変換"}
{"in": "return super(UserSettingsView, self).dispatch(*args, **kwargs)", "out": "引数展開"}
{"in": "from functools import reduce\nreduce(lambda x, y: x ^ y, [hash(item) for item in list(d.items())])", "out": "リスト内包記法 変換 排他的論理和"}
{"in": "results = [r for k in keywords for r in re.findall(k, message.lower())]", "out": "リスト内包記法 変換 正規表現"}
{"in": "re.findall('\\\\bpresent\\\\b', tale)", "out": "正規表現"}
{"in": "print([hex(x) for x in numbers])", "out": "リスト内包記法 変換"}
{"in": "['{}_{}'.format(k, v) for k, v in list(d.items())]", "out": "辞書内包記法"}
{"in": "sum(Decimal(i) for i in a)", "out": "リスト内包記法 変換"}
{"in": "re.search('^((?!bantime|(invokername=server)).)*$', s, re.M).group()", "out": "正規表現"}
{"in": "print(re.sub('(\\\\\\\\u[0-9A-Fa-f]+)', unescapematch, 'Wi\\\\u2011Fi'))", "out": "正規表現 ユニコード"}
{"in": "a = re.compile('p(?:resent|eople)')", "out": "正規表現"}
{"in": "a = re.compile('p(?:resent)')", "out": "正規表現"}
{"in": "alpha = img.convert('RGBA').split()[-1]", "out": "末尾の要素"}
{"in": "dict((y, x) for x, y in t)", "out": "辞書内包記法"}
{"in": "print(len(set(w.lower() for w in open('filename.dat').read().split())))", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(k for k, g in groupby(sorted('aaabcabccd')))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "my_function(**data)", "out": "引数展開"}
{"in": "'fue' + '\\u0301'", "out": "ユニコード"}
{"in": "[s[0] for s in formula.split('+')]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"::2012-05-14 18:10:20.856000::\"\"\".translate(None, ' -.:')", "out": "ひとつおきの列"}
{"in": "newdf = df.withColumn('total', sum(df[col] for col in df.columns))", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(op))", "out": "リストの文字列化"}
{"in": "[[cell for cell in row] for row in X]", "out": "リスト内包記法 変換"}
{"in": "s[::-1]", "out": "逆順の列"}
{"in": "print([[x for x in a if len(x) == i] for i in set(len(k) for k in a)])", "out": "リスト内包記法 フィルタ"}
{"in": "all((c[i] == np.cross(a[i], b[i])).all() for i in range(len(c)))", "out": "リスト内包記法 変換"}
{"in": "uly = uly.replace('-', 'S') if '-' in uly else 'N' + uly", "out": "三項演算子"}
{"in": "df = df[~df['User Name'].str.endswith(('DA', 'PL'))]", "out": "反転演算子"}
{"in": "[L[i] for i in [2, 1, 0]]", "out": "リスト内包記法 変換"}
{"in": "re.sub('(?<=\\\\w)(?=\\\\w)', '-', str)", "out": "正規表現"}
{"in": "print(dict(re.findall('\\\\{(\\\\S+)\\\\s+\\\\{*(.*?)\\\\}+', x)))", "out": "正規表現"}
{"in": "x[1::2, 1::2]", "out": "ひとつおきの列"}
{"in": "datetime.strptime(data[4].partition('T')[0], '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "datetime.strptime('2012-02-10', '%Y-%m-%d')", "out": "日付書式"}
{"in": "regexRef = re.compile('\\\\w', re.UNICODE)", "out": "正規表現"}
{"in": "return [str[start:start + num] for start in range(0, len(str), num)]", "out": "リスト内包記法 変換"}
{"in": "re.split('[\\\\n\\\\r]+', line)", "out": "正規表現"}
{"in": "list(item[1] for item in pkgutil.iter_modules())", "out": "リスト内包記法 変換"}
{"in": "print('Valid' if re.match('^[a-zA-Z0-9_]*$', word) else 'Invalid')", "out": "三項演算子 正規表現"}
{"in": "[s.strip() for s in data_string.splitlines()]", "out": "リスト内包記法 変換"}
{"in": "re.sub('[^0-9+._ -]+', '', strs)", "out": "正規表現"}
{"in": "print(alphs[:i] + alphs[i::-1])", "out": "逆順の列"}
{"in": "[dict(zip(d, v)) for v in product(*list(d.values()))]", "out": "辞書内包記法 引数展開"}
{"in": "map(lambda x: func(*x), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "out": "引数展開"}
{"in": "min(s.find(i) if i in s else None for i in a)", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "print(re.findall('\\\\[([^]]*)\\\\]', s))", "out": "正規表現"}
{"in": "list(dict((v['id'], v) for v in L).values())", "out": "辞書内包記法"}
{"in": "mySubList = [dict((k, v) for k, v in myDict.items() if v.field2 >= 2)]", "out": "辞書内包記法"}
{"in": "squared = [(x ** 2) for x in lst]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "print(' '.join([str(i) for i in a]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\"\"\"\".join(random.choices(string.ascii_uppercase + string.digits, k=N))", "out": "リストの文字列化"}
{"in": "re.sub('[a-zA-Z]\\\\d,', lambda x: x.group(0)[0] + '0' + x.group(0)[1:], s)", "out": "正規表現"}
{"in": "re.sub('(.{6})', '\\\\1#', str)", "out": "正規表現"}
{"in": "regex2 = re.compile('.*({}).*'.format(what2look4))", "out": "正規表現"}
{"in": "df['last_updated_time'] = d.dt.strftime('%H:%M:%S')", "out": "時刻書式"}
{"in": "re.sub('\\\\s+', '', 'strip my spaces')", "out": "正規表現"}
{"in": "print('\\n'.join(''.join(s) for s in something))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[k for j in re.findall(\"(\\\\d)|'([^']*)'\", i) for k in j if k]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "self.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)", "out": "正規表現"}
{"in": "re.sub('(%)', '\\\\g<1>\\\\g<1>', original)", "out": "正規表現"}
{"in": "super(RaceModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "d = dict((v[0], v[1:]) for v in arr)", "out": "辞書内包記法"}
{"in": "size = re.findall('\\\\d+(?:,\\\\d{3})*(?:\\\\.\\\\d+)?', my_string)", "out": "正規表現"}
{"in": "return ''.join(word)", "out": "リストの文字列化"}
{"in": "[item for item in lis if item[1] not in seen and not seen.add(item[1])]", "out": "リスト内包記法 フィルタ"}
{"in": "any(([1, 2] == x).all() for x in a)", "out": "リスト内包記法 変換"}
{"in": "[(x + b[i]) for i, x in enumerate(a)]", "out": "リスト内包記法 変換"}
{"in": "[(tuple[a], tuple[a + 1]) for a in range(0, len(tuple), 2)]", "out": "リスト内包記法 変換"}
{"in": "np.array(a).reshape(-1, 100)[::2].ravel()", "out": "ひとつおきの列"}
{"in": "x = '{} {}'.format(*s)", "out": "引数展開"}
{"in": "s[::-1].replace('2', 'x', 1)[::-1]", "out": "逆順の列"}
{"in": "[((i // 2) ** 2 if i % 2 else i // 2) for i in range(2, 20)]", "out": "リスト内包記法 フィルタ 三項演算子 累乗演算子"}
{"in": "zip(*([iter(l)] * 2))", "out": "引数展開"}
{"in": "MyModel.all().filter('prop >=', prefix).filter('prop <', prefix + '\\ufffd')", "out": "ユニコード"}
{"in": "[(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('(\\\\d+|[a-zA-Z]+)', '12fgsdfg234jhfq35rjg')", "out": "正規表現"}
{"in": "sum(int(i) for i in data)", "out": "リスト内包記法 変換"}
{"in": "[[[flatten[int(i * 2)]]] for i in range(int(len(flatten) / 2))]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(str(port) for port in ports))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "results = [int(i) for i in results]", "out": "リスト内包記法 変換"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "return [m.group(1) for m in (re.search(regex, l) for l in lines) if m]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "time.strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "print(sum(sum(map(int, r.findall(line))) for line in data))", "out": "リスト内包記法 変換"}
{"in": "[x[1] for x in L]", "out": "リスト内包記法 変換"}
{"in": "count = sum(1 for line in myfile if line.rstrip('\\n'))", "out": "リスト内包記法 フィルタ"}
{"in": "[([0.0] * 10) for _ in range(10)]", "out": "リスト内包記法 変換"}
{"in": "[myDictionary.get(key) for key in keys]", "out": "リスト内包記法 変換"}
{"in": "max((t for t in yourlist if t[2] >= 100), key=itemgetter(1))", "out": "リスト内包記法 フィルタ"}
{"in": "super(BaseModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(re.findall('[A-Z]?[^A-Z\\\\s]+|[A-Z]+', vendor))", "out": "正規表現 リストの文字列化"}
{"in": "a.sort(key=lambda x: x.split('-', 2)[-1])", "out": "末尾の要素"}
{"in": "return ''.join(parts)", "out": "リストの文字列化"}
{"in": "re.split('(?m)^\\\\s*$\\\\s*', text)", "out": "正規表現"}
{"in": "[line for line in file if not line.startswith('#')]", "out": "リスト内包記法 フィルタ"}
{"in": "output.write('%s\\t%s' % (' '.join(words[:-1]), words[-1]))", "out": "リストの文字列化 末尾の要素"}
{"in": "dummy_df.loc[:, (~(dummy_df == '0%').all())]", "out": "反転演算子"}
{"in": "dict((item[0], (item[1], z[item[0]])) for item in l)", "out": "辞書内包記法"}
{"in": "QtCore.SIGNAL('finished(int)')", "out": "正規表現"}
{"in": "QtCore.SIGNAL('finished(PyQt_PyObject)')", "out": "正規表現"}
{"in": "sum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))", "out": "リスト内包記法 フィルタ"}
{"in": "total = sum([int(i) for i in cost])", "out": "リスト内包記法 変換"}
{"in": "n ^= (1 << upper) - 1 & ~((1 << lower) - 1)", "out": "反転演算子"}
{"in": "d = dict(itertools.zip_longest(fillvalue='', *([iter(l)] * 2)))", "out": "引数展開"}
{"in": "[(x ** 2) for x in range(10)]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "dict([x.split(':') for x in a])", "out": "辞書内包記法"}
{"in": "[ast.literal_eval(re.sub('\\\\b0+\\\\B', '', pixel)) for pixel in pixels]", "out": "リスト内包記法 変換 正規表現"}
{"in": "sum(a * b for a, b in zip(it, it))", "out": "リスト内包記法 変換"}
{"in": "[(float(i) if '.' in i else int(i)) for i in s]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "L = [c for c in L if c not in ['a', 'c']]", "out": "リスト内包記法 フィルタ"}
{"in": "x = [v for i, v in enumerate(x) if i not in frozenset((2, 3, 4, 5))]", "out": "リスト内包記法 フィルタ"}
{"in": "[(float(c) / t) for c, t in zip(conversions, trials)]", "out": "リスト内包記法 変換"}
{"in": "[i for i in my_list if all(x not in i for x in ['91', '18'])]", "out": "リスト内包記法 フィルタ"}
{"in": "[list(t) for t in set(tuple(element) for element in xx)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(item[0] for item in groupby(s.split()))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.findall('\\\\D(\\\\d{5})\\\\D', s)", "out": "正規表現"}
{"in": "tom_index = next(index for index, d in enumerate(lst) if d['name'] == 'Tom')", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('[AEIOU]+', lambda m: m.group(0).lower(), 'SOME TEXT HERE')", "out": "正規表現"}
{"in": "sorted(l, key=lambda x: (x[:-1], x[-1].isdigit()))", "out": "末尾の要素"}
{"in": "print(df.to_html(float_format=lambda x: '%10.2f' % x))", "out": "少数点表示制限"}
{"in": "print(re.findall('[\\u4e00-\\u9fff]+', ipath))", "out": "正規表現 ユニコード"}
{"in": "result = [float(x.strip(' \"')) for x in A1]", "out": "リスト内包記法 変換"}
{"in": "super(ConcurrentModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join([c for c in s if c.isupper()])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "foo(*i)", "out": "引数展開"}
{"in": "print(''.join(L))", "out": "リストの文字列化"}
{"in": "test_df.where(~(test_df < 4))", "out": "反転演算子"}
{"in": "{v: (v ** 2) for v in l}", "out": "辞書内包記法 累乗演算子"}
{"in": "Lmerge = [(i1 + i2) for i1, i2 in zip(L1, L2)]", "out": "リスト内包記法 変換"}
{"in": "[[try_int(x) for x in lst] for lst in list_of_lists]", "out": "リスト内包記法 変換"}
{"in": "output = ''.join(item[0].upper() for item in re.findall('\\\\w+', input))", "out": "リスト内包記法 変換 正規表現 リストの文字列化"}
{"in": "ind = [i for i in range(len(yVar)) if yVar[i] < 100]", "out": "リスト内包記法 フィルタ"}
{"in": "x = [(0) for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "str = re.sub(',(?=[^\"]*\"[^\"]*$)', '@', str)", "out": "正規表現"}
{"in": "[data[i:i + n] for i in range(0, len(data), n)]", "out": "リスト内包記法 変換"}
{"in": "np.array([(labels == i).astype(np.float32) for i in np.arange(3)])", "out": "リスト内包記法 変換"}
{"in": "matchObj = re.search('^(?!OK|\\\\.).*', item)", "out": "正規表現"}
{"in": "[elem.encode('hex') for elem in str]", "out": "リスト内包記法 変換"}
{"in": "vet = [random.randint(1, 10) for _ in range(100000)]", "out": "リスト内包記法 変換"}
{"in": "print(('+'.join(str(i) for i in n_nx1lst) + ' = ', sum(n_nx1lst)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(re.sub('(</?\\\\w+>)', lambda up: up.group(1).upper(), '<tag>input</tag>'))", "out": "正規表現"}
{"in": "x1, y1, a1, b1, x2, y2 = (int(eval(input())) for _ in range(6))", "out": "リスト内包記法 変換"}
{"in": "coautorshipDictionary = {int(k): int(v) for k, v in json.load(json_data)}", "out": "辞書内包記法"}
{"in": "items = [some(a.split(), d, n) for a, d, n in (list(m.values()) for m in dl)]", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('[\\u4e00-\\u9fff]+', ipath.decode('utf-8')))", "out": "正規表現 ユニコード"}
{"in": "a_lower = {k.lower(): v for k, v in list(a.items())}", "out": "辞書内包記法"}
{"in": "print([var for var in list(globals().keys()) if '__' not in var])", "out": "リスト内包記法 フィルタ"}
{"in": "[list(g) for k, g in itertools.groupby(sorted(iterable))]", "out": "リスト内包記法 変換"}
{"in": "salesdata.loc[~salesdata.Outlet_Size.isnull(), 'Outlet_Size'].unique()", "out": "反転演算子"}
{"in": "s = date.strftime('%Y%m%d')", "out": "日付書式"}
{"in": "[key for key, val in list(dct.items()) if val == True]", "out": "リスト内包記法 フィルタ"}
{"in": "reg = re.compile('.*?(\\\\(?\\\\d{3}\\\\D{0,3}\\\\d{3}\\\\D{0,3}\\\\d{4}).*?', re.S)", "out": "正規表現"}
{"in": "print(' '.join([s.split()[-1]] + s.split()[:-1]))", "out": "リストの文字列化 末尾の要素"}
{"in": "print(list(itertools.product(*itertools.repeat((False, True), 3))))", "out": "引数展開"}
{"in": "df.columns = [strip_non_ascii(x) for x in df.columns]", "out": "リスト内包記法 変換"}
{"in": "a_order, a_sorted = zip(*sorted(enumerate(a), key=lambda item: item[1]))", "out": "引数展開"}
{"in": "print('Marked - %s\\r\\nUnmarked - %s' % (' '.join(marked), ' '.join(unmarked)))", "out": "リストの文字列化"}
{"in": "wildcards = ','.join(['%s'] * len(frame.columns))", "out": "リストの文字列化"}
{"in": "[[int(j) for j in i] for i in a]", "out": "リスト内包記法 変換"}
{"in": "myRoundedList = [round(elem, 2) for elem in myList]", "out": "リスト内包記法 変換"}
{"in": "[x for x in itertools.product(lst, repeat=3) if sum(x) == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "[(x, y) for x in range(3) for y in range(2)]", "out": "リスト内包記法 変換"}
{"in": "[i.partition('\\t')[-1] for i in l]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "verts = [(0) for x in range(1000)]", "out": "リスト内包記法 変換"}
{"in": "[(1) for _ in range(6)]", "out": "リスト内包記法 変換"}
{"in": "print('yes' if 0 < x < 0.5 else 'no')", "out": "三項演算子"}
{"in": "jsonify(eqtls=[e.serialize() for e in my_list_of_eqtls])", "out": "リスト内包記法 変換"}
{"in": "sum(len(i) for i in x if len(i) > 1)", "out": "リスト内包記法 フィルタ"}
{"in": "[[k for k in x if x[k] != y[k]] for x, y in pairs if x != y]", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\n'.join(lst))", "out": "リストの文字列化"}
{"in": "norm = [(float(i) / max(raw)) for i in raw]", "out": "リスト内包記法 変換"}
{"in": "next(s for s in list_of_string if s)", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('\\\\\\\\{(\\\\d+)\\\\\\\\}', '(?P<_\\\\1>.+)', re.escape('Version {0}.{1}.{2}'))", "out": "正規表現"}
{"in": "myList = [x for x in myList if myDict.get(x[1], None) != x[0]]", "out": "リスト内包記法 フィルタ"}
{"in": "return [x for x in mylist if x in pattern]", "out": "リスト内包記法 フィルタ"}
{"in": "[x[:] for x in [[foo] * 10] * 10]", "out": "リスト内包記法 変換"}
{"in": "arr = arr[:, :, 0::2]", "out": "ひとつおきの列"}
{"in": "[set(i) for i in OrderedDict.fromkeys(frozenset(item) for item in L)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\nThis.*?ok', '', a, flags=re.DOTALL)", "out": "正規表現"}
{"in": "len(re.findall('(a)(?=\\\\1)', 'aaa'))", "out": "正規表現"}
{"in": "[i for i in range(4) if i <= 1 or i >= 4]", "out": "リスト内包記法 フィルタ"}
{"in": "[l[i:i + 2] for i in range(0, len(l), 2)]", "out": "リスト内包記法 変換"}
{"in": "new_foo = [item for item in foo if item % 3 != 0]", "out": "リスト内包記法 フィルタ"}
{"in": "[math.log10(i) for i in x]", "out": "リスト内包記法 変換"}
{"in": "background.paste(fire, (x, y), fire.convert('RGBA'))", "out": "正規表現"}
{"in": "super(Child, self).__init__(**kwargs)", "out": "引数展開"}
{"in": "print(' '.join([string[:5]] * 2))", "out": "リストの文字列化"}
{"in": "plt.savefig('figure.pdf')", "out": "正規表現"}
{"in": "[(not x) for x in some_list]", "out": "リスト内包記法 変換"}
{"in": "len([phrase for phrase in nltk.Chunker(sentence) if phrase[1] == 'VP'])", "out": "リスト内包記法 フィルタ"}
{"in": "indices = [i for i, x in enumerate(myList) if re.search(pattern, x)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "datetime.datetime.strptime('24052010', '%d%m%Y').date()", "out": "日付書式"}
{"in": "print(re.sub('\\\\s+(STREET|ST|TRAIL|TRL|TR)\\\\s*$', '', target, flags=re.M))", "out": "正規表現"}
{"in": "[(x + 1 if x >= 45 else x + 5) for x in l]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "list(chain(*(i if isinstance(i, tuple) else (i,) for i in l)))", "out": "リスト内包記法 フィルタ 三項演算子 引数展開"}
{"in": "struct.unpack('>I', ''.join([chr(x) for x in response[:-1]]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "lst = ['He', 'is', 'so', '', 'cool']\n[_f for _f in lst if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "[func(x, y) for x, y in zip(xs, ys)]", "out": "リスト内包記法 変換"}
{"in": "[filterList(numbers, ranges[i], ranges[i + 1]) for i in range(len(ranges) - 1)]", "out": "リスト内包記法 変換"}
{"in": "new_list = list(''.join(my_list))", "out": "リストの文字列化"}
{"in": "\"\"\", \"\"\".join(['1', '2', '3'])", "out": "リストの文字列化"}
{"in": "[k for k, v in numbers.items() if v == max(numbers.values())]", "out": "リスト内包記法 フィルタ"}
{"in": "dt = datetime.datetime.strptime(new_dt, '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "[i for i, (m, n) in enumerate(zip(bool_array[:-1], bool_array[1:])) if m != n]", "out": "リスト内包記法 フィルタ"}
{"in": "int(re.sub('[^\\\\d-]+', '', your_string))", "out": "正規表現"}
{"in": "re.compile('\\\\A\\\\Z|\\\\A\\\\Z*|\\\\A\\\\Z+')", "out": "正規表現"}
{"in": "filtered_dict = {k: v for k, v in d.items() if filter_string in k}", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join('{:02X}'.format(a) for a in numbers)", "out": "辞書内包記法 リストの文字列化"}
{"in": "\"\"\"\"\"\".join(new)", "out": "リストの文字列化"}
{"in": "print('True' if mydict['key'] else 'False')", "out": "三項演算子"}
{"in": "not any(not isinstance(y, int) for y in [1, 'a', 2, 3])", "out": "リスト内包記法 変換"}
{"in": "[list(group) for k, group in groupby(l, bool) if k]", "out": "リスト内包記法 フィルタ"}
{"in": "good_data = [data[(n), :][flag == 1] for n in range(data.shape[0])]", "out": "リスト内包記法 変換"}
{"in": "[l for l in a if l in b]", "out": "リスト内包記法 フィルタ"}
{"in": "list([a for a in x if a != 2])", "out": "リスト内包記法 フィルタ"}
{"in": "mylist = [(100 if i in (0, 1, 3) else e) for i, e in enumerate(mylist)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[x for x in l if '2' in x]", "out": "リスト内包記法 フィルタ"}
{"in": "return [random.uniform(lbound, rbound) for i in range(n)]", "out": "リスト内包記法 変換"}
{"in": "re.search('[0-9]* (?:ABC(...))', '123 ABCDEF 456').group(1)", "out": "正規表現"}
{"in": "t.xpath('//a[@href = \"http://exact url\"]/ancestor::table')[-1]", "out": "末尾の要素"}
{"in": "any(key.startswith(mystr) for key in mydict)", "out": "辞書内包記法"}
{"in": "re.match('[a-zA-Z][\\\\w-]*$', 'A_B')", "out": "正規表現"}
{"in": "re.match('[a-zA-Z][\\\\w-]*$', '0A')", "out": "正規表現"}
{"in": "reg = re.compile('(\\\\d{3}\\\\d{3}\\\\d{4})')", "out": "正規表現"}
{"in": "reg = re.compile('(\\\\d{3}\\\\D{0,3}\\\\d{3}\\\\D{0,3}\\\\d{4})')", "out": "正規表現"}
{"in": "reg = re.compile('(\\\\(?\\\\d{3}\\\\D{0,3}\\\\d{3}\\\\D{0,3}\\\\d{4}).*?')", "out": "正規表現"}
{"in": "reg = re.compile('.*?(\\\\(?\\\\d{3}\\\\D{0,3}\\\\d{3}\\\\D{0,3}\\\\d{4}).*?')", "out": "正規表現"}
{"in": "return [int(digit) for digit in bin(n)[2:]]", "out": "リスト内包記法 変換"}
{"in": "np.where(np.logical_or.reduce([(x == y) for y in [0, 180, 360]]))", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime('2015/01/01 0:12am', '%Y/%m/%d %I:%M%p')", "out": "日付書式"}
{"in": "return re.search('\\\\d+', filename).group(0)", "out": "正規表現"}
{"in": "bytetable = [('00000000' + bin(x)[2:])[-1:-9:-1] for x in range(256)]", "out": "リスト内包記法 変換"}
{"in": "re.escape('www.stackoverflow.com')", "out": "正規表現"}
{"in": "result = re.sub('(\\\\d.*?)\\\\s(\\\\d.*?)', '\\\\1 \\\\2', string1)", "out": "正規表現"}
{"in": "f(*((1, 4),))", "out": "引数展開"}
{"in": "[x.strip() for x in my_string.split(',')]", "out": "リスト内包記法 変換"}
{"in": "np.ma.array(np.tile(arr, (cond.shape[0], 1)), mask=~cond).argmax(axis=1)", "out": "反転演算子"}
{"in": "[item for item in my_list if item not in to_be_removed]", "out": "リスト内包記法 フィルタ"}
{"in": "d = dict(s.split('=', 1) for s in a)", "out": "辞書内包記法"}
{"in": "globals().update((k, v) for k, v in d.items() if k in ['foo', 'bar'])", "out": "リスト内包記法 フィルタ"}
{"in": "[item for item in my_list if 1 <= item <= 5]", "out": "リスト内包記法 フィルタ"}
{"in": "print([next(c) for _ in range(10)])", "out": "リスト内包記法 変換"}
{"in": "t[-1] = t[-1].strip()", "out": "末尾の要素"}
{"in": "return ''.join(sorted(comb_))", "out": "リストの文字列化"}
{"in": "csv_output.writerows(zip(*rows))", "out": "引数展開"}
{"in": "[k for k, v in G.degree().items() if v == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "p.append(tuple('{0:.2f}'.format(c) for c in b))", "out": "辞書内包記法 少数点表示制限"}
{"in": "print(bool(re.match(patter, ' ')))", "out": "正規表現"}
{"in": "driver.get('http://matrix.itasoftware.com/')", "out": "正規表現"}
{"in": "regex = re.compile('[,\\\\.!?]')", "out": "正規表現"}
{"in": "config = {'color': 'red', 'numbers': [5, 8], re.compile('^spam'): 'eggs'}", "out": "正規表現"}
{"in": "A = np.array([C[:, (B == i)].sum(axis=1) for i in range(M)])", "out": "リスト内包記法 変換"}
{"in": "dic = {x: i for i, x in enumerate(al, 1)}", "out": "辞書内包記法"}
{"in": "m = {k: (float(d) / len(cs)) for k, d in sum(cs).items()}", "out": "辞書内包記法"}
{"in": "sum([_f for _f in [1, 2, 3, None] if _f])", "out": "リスト内包記法 フィルタ"}
{"in": "sum(1 for d in my_list if d.get('id') == 2)", "out": "リスト内包記法 フィルタ"}
{"in": "x = [1, 3, 5]\nsum(d * 10 ** i for i, d in enumerate(x[::-1]))", "out": "リスト内包記法 変換 逆順の列 累乗演算子"}
{"in": "\"\"\", \"\"\".join('\"' + item + '\"' for item in parameters)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('(foo)', '\\\\g<1>123', 'foobar')", "out": "正規表現"}
{"in": "re.sub('(?i)abc', 'Python', a)", "out": "正規表現"}
{"in": "matplotlib.rcParams['figure.figsize']", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(sorted(s))", "out": "リストの文字列化"}
{"in": "re.sub('([a-zA-Z])(\\\\d+)', '\\\\1[\\\\2]', s)", "out": "正規表現"}
{"in": "sum(1 for row in open('data.txt', 'r'))", "out": "リスト内包記法 変換"}
{"in": "[abs(a - b) for a, b in zip(l, l[1:] + l[:-1])]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\d+', target_string)", "out": "正規表現"}
{"in": "s = re.split(',\\\\s*(?=[^)]*(?:\\\\(|$))', x)", "out": "正規表現"}
{"in": "super(Purchase, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "[i for i in my_list if '91' not in i and '18' not in i]", "out": "リスト内包記法 フィルタ"}
{"in": "[(k, list(g)) for k, g in groups]", "out": "リスト内包記法 変換"}
{"in": "tuples_filtered = [tup for tup in tuples if tup[0] in filter_set]", "out": "リスト内包記法 フィルタ"}
{"in": "row = [(v.decode('utf8') if isinstance(v, str) else v) for v in row]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "re.sub('[\\\\W_]+', '', s, flags=re.LOCALE)", "out": "正規表現"}
{"in": "print(' '.join(item))", "out": "リストの文字列化"}
{"in": "'::2012-05-14 18:10:20.856000::'.translate({ord(k): None for k in ' -.:'})", "out": "辞書内包記法 ひとつおきの列"}
{"in": "s[::-1].replace('bbb', 'xxx', 1)[::-1]", "out": "逆順の列"}
{"in": "list_words = ['<a href=\"http://url.com/{}\">{}</a>'.format(a, a) for a in l]", "out": "辞書内包記法"}
{"in": "sum(1 for a, b, c in combinations(l, r=3) if a < b < a + d < c < b + d)", "out": "リスト内包記法 フィルタ"}
{"in": "print(', '.join(map(quote, x)))", "out": "リストの文字列化"}
{"in": "print(my_date.strftime('%Y, %d %B'))", "out": "日付書式"}
{"in": "super(foo, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[(items[:i] + items[i + 1:]) for i in range(len(items))]", "out": "リスト内包記法 変換"}
{"in": "np.arange(a.shape[0])[~np.in1d(a, b)].tolist()", "out": "反転演算子"}
{"in": "m = [row for row in l if 'a' in row[0]]", "out": "リスト内包記法 フィルタ"}
{"in": "cursor.execute('SELECT count(*) FROM components WHERE name = ?', (name,))", "out": "引数展開"}
{"in": "version, sdk = re.findall('(?:Version: |SDK )([\\\\w.-]+)', s)", "out": "正規表現"}
{"in": "x = dict((i, set()) for i in range(10))", "out": "辞書内包記法"}
{"in": "[y for x in text.split() for y in x.split('-')]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"foo:bar:baz\"\"\".rpartition(':')[-1]", "out": "末尾の要素"}
{"in": "print([i.split('/')[1] for i in input if i.find('/') == 1])", "out": "リスト内包記法 フィルタ"}
{"in": "my_list = [s for s in my_list if not re.search('\\\\d', s)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "yourlist = [(s.rsplit('_', 2)[0] + '_' + x + '_' + y) for s in yourlist]", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(map(bin, bytearray(st, 'utf8')))", "out": "リストの文字列化"}
{"in": "numbers = int(re.search('\\\\d+', filename).group())", "out": "正規表現"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "file.writelines('%s\\n' % item for item in my_list)", "out": "リスト内包記法 変換"}
{"in": "[item for item in my_list if any(x in item for x in bad)]", "out": "リスト内包記法 フィルタ"}
{"in": "forms.ModelForm.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "re.match('[a-zA-Z][\\\\w-]*$', 'A')", "out": "正規表現"}
{"in": "[line for line in mystr.split('\\n') if line.strip() != '']", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('<object.*?</object>(?:<br /><a.*?</a>)?', a)", "out": "正規表現"}
{"in": "self.figure.canvas.draw()", "out": "正規表現"}
{"in": "[key for key, group in groupby(li) if all(i == 0 for i, j in enumerate(group))]", "out": "リスト内包記法 フィルタ"}
{"in": "Counter(re.findall(\"[\\\\w']+\", text.lower()))", "out": "正規表現"}
{"in": "zip(t[::2], t[1::2])", "out": "ひとつおきの列"}
{"in": "parts = [s[indices[i]:indices[i + 1]] for i in range(len(indices) - 1)]", "out": "リスト内包記法 変換"}
{"in": "list(chain.from_iterable((i, i ** 2) for i in range(1, 6)))", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "newD = {k: round(v) for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "[sub for sub in totalist if sub[:2] == ['A', 'B']]", "out": "リスト内包記法 フィルタ"}
{"in": "function(*array)", "out": "引数展開"}
{"in": "sum('banana'[x:x + 3] == 'ana' for x in range(len('banana')))", "out": "リスト内包記法 変換"}
{"in": "lowest_dirs.append(os.path.split(root)[-1])", "out": "末尾の要素"}
{"in": "print(re.sub('(?=[_%^$])', '\\\\\\\\', line))", "out": "正規表現"}
{"in": "return len([line for line in lines if line.startswith('#')])", "out": "リスト内包記法 フィルタ"}
{"in": "{key_for_value(value): value for value in values}", "out": "辞書内包記法"}
{"in": "f(3, 5, *(1, 2, 3))", "out": "引数展開"}
{"in": "my_list2, my_list1 = zip(*my_list)", "out": "引数展開"}
{"in": "dict(e.split(' - ') for e in s.split(','))", "out": "辞書内包記法"}
{"in": "all(key in dict_obj for key in properties_to_check_for)", "out": "辞書内包記法"}
{"in": "(1 / np.sqrt((A[:, (None)] - B) ** 2 + d ** 2)).sum(1)", "out": "累乗演算子"}
{"in": "[[x, y] for x in list1 for y in list2]", "out": "リスト内包記法 変換"}
{"in": "[x for x in lelist if lestring.count(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "super(Subject, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "L = [bytes_obj[i:i + 1] for i in range(len(bytes_obj))]", "out": "リスト内包記法 変換"}
{"in": "print(a if b else 0)", "out": "三項演算子"}
{"in": "[i.strip() for i in link.text.strip()[5:].split('-')]", "out": "リスト内包記法 変換"}
{"in": "[i for i, x in enumerate(l) if x == '\\n']", "out": "リスト内包記法 フィルタ"}
{"in": "[(x * 0.1) for x in range(0, 10)]", "out": "リスト内包記法 変換"}
{"in": "pat = re.compile('\\\\d+;[^;]*')", "out": "正規表現"}
{"in": "strip_list = [item.strip() for item in lines]", "out": "リスト内包記法 変換"}
{"in": "[int_or_float(el) for el in lst]", "out": "リスト内包記法 変換"}
{"in": "filtered_list = [i for i, v in zip(list_a, filter) if v]", "out": "リスト内包記法 フィルタ"}
{"in": "print(sorted(L, key=lambda x: [int(i) for i in x.rstrip('.').split('.')]))", "out": "リスト内包記法 変換"}
{"in": "L = [['x', 'y'] for i in range(10)]", "out": "リスト内包記法 変換"}
{"in": "super(Course, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "createkey = '_'.join(sorted(str(wi) for wi in wordids))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "x[:] = [value for value in x if len(value) == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "re.compile('[a-zA-Z\\xd1\\xf1]+', re.DEBUG)", "out": "正規表現"}
{"in": "[chr(i) for i in range(ord('a'), ord('z') + 1)]", "out": "リスト内包記法 変換"}
{"in": "return [(item, value) for item, value in config.items(section)]", "out": "リスト内包記法 変換"}
{"in": "array = [[int(x) for x in line.split()] for line in f]", "out": "リスト内包記法 変換"}
{"in": "max(len(s) for s in re.findall('a+', input))", "out": "リスト内包記法 変換 正規表現"}
{"in": "sorted(l, key=lambda x: float('inf') if x is None else x)", "out": "三項演算子"}
{"in": "create_dict_from_variables(first_name[:-3] + 'moo', last_name[::2])", "out": "ひとつおきの列"}
{"in": "print('\\n'.join(bids))", "out": "リストの文字列化"}
{"in": "print(len([name for name in os.listdir('.') if os.path.isfile(name)]))", "out": "リスト内包記法 フィルタ"}
{"in": "np.array([str(x) for x in [0, 33, 4444522]])", "out": "リスト内包記法 変換"}
{"in": "foo([x['uid'] for x in users])", "out": "リスト内包記法 変換"}
{"in": "return {c: s.count(c) for c in chars}", "out": "辞書内包記法"}
{"in": "return {str(k): convert_value(v) for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "return QtCore.Qt.ItemIsEnabled", "out": "正規表現"}
{"in": "data = [map(int, line.split()) for line in f]", "out": "リスト内包記法 変換"}
{"in": "d = dict(zip([o.name for o in object_list], object_list))", "out": "辞書内包記法"}
{"in": "keys = [i for i, v in scores.items() if v == max_value]", "out": "リスト内包記法 フィルタ"}
{"in": "[i[0] for i in x]", "out": "リスト内包記法 変換"}
{"in": "total = sum(x + y for x in (0, 1, 2, 3) for y in (0, 1, 2, 3) if x < y)", "out": "リスト内包記法 フィルタ"}
{"in": "list(key for key, val in itertools.groupby('aaabbccddeefaa'))", "out": "リスト内包記法 変換"}
{"in": "np.savetxt(f, line, fmt='%.2f')", "out": "少数点表示制限"}
{"in": "datetime.strptime('1998-4-52', '%Y-%w-%U')", "out": "日付書式"}
{"in": "\"\"\" + \"\"\".join(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])", "out": "リストの文字列化"}
{"in": "len([y for y in x if y > 2])", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\" \"\"\".join(soup.findAll(text=True))", "out": "リストの文字列化"}
{"in": "list({x.tag: x for x in myList}.values())", "out": "辞書内包記法"}
{"in": "\"\"\"Documentation for myscript\"\"\"", "out": "リスト内包記法 変換"}
{"in": "l[2:6] = [''.join(l[2:6])]", "out": "リストの文字列化"}
{"in": "list('\\u06f0\\u06f1\\u06f2\\u06f3\\u06f4\\u06f5\\u06f6\\u06f7\\u06f8\\u06f9')", "out": "ユニコード"}
{"in": "all(i.count(1) == n for i in l)", "out": "リスト内包記法 変換"}
{"in": "return [int(x) for x in '8743-12083-15'.split('-')]", "out": "リスト内包記法 変換"}
{"in": "re.split('[?.,]', test)", "out": "正規表現"}
{"in": "my_list = [json.loads(line) for line in f]", "out": "リスト内包記法 変換"}
{"in": "(c for c in s if c in '+-/*()_')", "out": "リスト内包記法 フィルタ"}
{"in": "all(v == 0 for v in values)", "out": "リスト内包記法 変換"}
{"in": "clean = re.sub('[^ -~]', '', dirty)", "out": "正規表現 反転演算子"}
{"in": "zip(*([iter(L)] * 2))", "out": "引数展開"}
{"in": "print('; '.join(err.messages))", "out": "リストの文字列化"}
{"in": "return (dict(zip(dicts, x)) for x in itertools.product(*list(dicts.values())))", "out": "辞書内包記法 引数展開"}
{"in": "[x for x in strings if x]", "out": "リスト内包記法 フィルタ"}
{"in": "print('{}, {}'.format(row[0], 1 if row[0] in List else 0))", "out": "三項演算子"}
{"in": "[word for word in words if not word.isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('\\\\d+', 'GoTo: 7018 6453 12654\\n')", "out": "正規表現"}
{"in": "\"\"\",\"\"\".join(map(str, record_ids))", "out": "リストの文字列化"}
{"in": "a, b, c = (int(i) for i in mystr.split()[1].split('.'))", "out": "リスト内包記法 変換"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "bool(re.search('((\\\\w)\\\\2){2}', 'bookkeeper'))", "out": "正規表現"}
{"in": "[re.findall('\\\\d+\\\\.\\\\d+', line) for line in f if line.startswith('foo')]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "print('\\n'.join(map(str, ports)))", "out": "リストの文字列化"}
{"in": "all(x in dct for x in ('foo', 'bar', 'baz'))", "out": "リスト内包記法 変換"}
{"in": "count = len(set(d['code'] for d in li))", "out": "リスト内包記法 変換"}
{"in": "d = dict(zip((o.name for o in object_list), object_list))", "out": "辞書内包記法"}
{"in": "print(sum(os.path.isfile(f) for f in glob.glob('/tmp/*')))", "out": "リスト内包記法 変換"}
{"in": "re.compile('(\\\\s*)+')", "out": "正規表現"}
{"in": "pd.concat([df[col].apply(pd.Series) for col in cols], axis=1, keys=cols)", "out": "リスト内包記法 変換"}
{"in": "format(num if num >= 0 else (1 << 16) + num, '016b')", "out": "三項演算子"}
{"in": "sum((Counter(d) for d in list(data.values())), Counter())", "out": "リスト内包記法 変換"}
{"in": "\"\"\"&\"\"\".join([','.join(my_list[:-1]), my_list[-1]])", "out": "リストの文字列化 末尾の要素"}
{"in": "print(sum(1 for x in arr if x is False))", "out": "リスト内包記法 フィルタ"}
{"in": "super(Material, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "fruit = re.compile('\\\\b(?:%s)\\\\b' % '|'.join(fruit_list))", "out": "正規表現 リストの文字列化"}
{"in": "d2 = dict((k, f(v)) for k, v in list(d.items()))", "out": "辞書内包記法"}
{"in": "re.sub('\\\\s', '', 'a b').isalpha()", "out": "正規表現"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "[name for name, age in list(mydict.items()) if age == search_age]", "out": "辞書内包記法"}
{"in": "[l for l in paragraph3 if sublist_contains('Derived: ', l)]", "out": "リスト内包記法 フィルタ"}
{"in": "foo(**{'foo': 123, 'bar': 456})", "out": "引数展開"}
{"in": "datetime.strptime('02/11/2010', '%d/%m/%Y').strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "\"\"\", \"\"\".join([('\"%s\"' % w) for w in words])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.search('\\\\by\\\\b', '\\xc3\\xbcy\\xc3\\xbc', re.UNICODE)", "out": "正規表現"}
{"in": "zip(*l)", "out": "引数展開"}
{"in": "dict((x, i) for i, x in enumerate(t))", "out": "辞書内包記法"}
{"in": "legend.figure.canvas.mpl_connect('pick_event', self.on_pick)", "out": "正規表現"}
{"in": "r = re.compile('<tr><td>(.*)</td><td>(.*)</td><td>(.*) s</td></tr>')", "out": "正規表現"}
{"in": "ranges = [(n, min(n + step, stop)) for n in range(start, stop, step)]", "out": "リスト内包記法 変換"}
{"in": "label = re.sub('([a-z])([A-Z])', '\\\\g<1> \\\\g<2>', label)", "out": "正規表現"}
{"in": "sum(int(x) for x in s if x.isdigit())", "out": "リスト内包記法 フィルタ"}
{"in": "[x for y in collection for x in y]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"-\"\"\".join([d[:4], d[4:6], d[6:]])", "out": "リストの文字列化"}
{"in": "g.vertices.index.lookup(**{'bad:identifier': 'value'})", "out": "引数展開"}
{"in": "[(i, [j for j in L if j != i]) for i in L]", "out": "リスト内包記法 フィルタ"}
{"in": "[int(i) for i in str(bin(x))[2:]]", "out": "リスト内包記法 変換"}
{"in": "dt = datetime.strptime(start, '%H:%M:%S').time()", "out": "時刻書式"}
{"in": "list(itertools.chain(*list(d.values())))", "out": "引数展開"}
{"in": "d = dict((x.key, x) for x in object_list)", "out": "辞書内包記法"}
{"in": "raise Exception('\\u0449')", "out": "ユニコード"}
{"in": "((x, y) for x in a for y in b)", "out": "リスト内包記法 変換"}
{"in": "df[~df2.index.isin(other2.index)]", "out": "反転演算子"}
{"in": "return [word for line in open(words_file, 'r') for word in line.split()]", "out": "リスト内包記法 変換"}
{"in": "f(*list(range(5000)))", "out": "引数展開"}
{"in": "return (dict(zip(dicts, x)) for x in product(*iter(dicts.values())))", "out": "辞書内包記法 引数展開"}
{"in": "from functools import reduce\n[r[1] for r in reduce(set.intersection, (set(x.items()) for x in myList))]", "out": "リスト内包記法 変換"}
{"in": "{f(k): v for k, v in d.items()}", "out": "辞書内包記法"}
{"in": "a = [t[1] for t in enumerate(a[1:]) if t[1][1] > a[t[0] - 1][1]]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('([A-z])\\\\-([A-z])', '\\\\1 \\\\2', original_term)", "out": "正規表現"}
{"in": "dict1 = dict(item.split('\\t') for item in list1)", "out": "辞書内包記法"}
{"in": "[i for i, d in enumerate(lod) if 2 in d]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"XXX\"\"\".join('mississippi'.rsplit('iss', 1))", "out": "リストの文字列化"}
{"in": "goal = ['<li>{0}</li>'.format(x) for x in l]", "out": "辞書内包記法"}
{"in": "foo(*i)", "out": "引数展開"}
{"in": "hand = dict((k, v) for k, v in hand.items() if v != 0)", "out": "辞書内包記法"}
{"in": "[item for sub_list in a[1:] for item in sub_list].count(1)", "out": "リスト内包記法 変換"}
{"in": "datetime.now().strftime('%b %d %Y')", "out": "日付書式"}
{"in": "set.intersection(*map(set, p))", "out": "引数展開"}
{"in": "re.sub('^\\\\s+', '', 'a\\n b\\n c', flags=re.MULTILINE)", "out": "正規表現"}
{"in": "print(''.join(lines))", "out": "リストの文字列化"}
{"in": "[main_list[x] for x in indexes]", "out": "リスト内包記法 変換"}
{"in": "return {k: v for k, v in list(d.items()) if k.startswith(s)}", "out": "辞書内包記法"}
{"in": "print('{:\\u3000>8s}'.format('\\u3042\\u308a\\u304c\\u3068\\u3046'))", "out": "ユニコード"}
{"in": "s = sum(a * b for a, b in zip(list_1, list_2))", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(['I', 'would', 'expect', 'multiple', 'lines']))", "out": "リストの文字列化"}
{"in": "return func(*args[::-1])", "out": "引数展開 逆順の列"}
{"in": "clean = re.sub('[\\x00\\x80-\\xff]', '', dirty)", "out": "正規表現"}
{"in": "s = ', '.join([(str(x) + ' ' + str(a[x])) for x in a])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "a[:, :, ::-1, ::-1]", "out": "逆順の列"}
{"in": "b = [x[:] for x in a]", "out": "リスト内包記法 変換"}
{"in": "sorted(l, key=lambda x: x[:-1] + '{' if x[-1].isdigit() else x)", "out": "三項演算子 末尾の要素"}
{"in": "((s.iloc[::2].values + s.iloc[1::2]) / 2).reset_index(drop=True)", "out": "ひとつおきの列"}
{"in": "any(x > 10 for x in l)", "out": "リスト内包記法 変換"}
{"in": "[i for i in range(len(string)) if string.startswith('test', i)]", "out": "リスト内包記法 フィルタ"}
{"in": "re.match('(?:(\\\\d+)Y)?(?:(\\\\d+)M)?', text).groups()", "out": "正規表現"}
{"in": "{i[0]: i[1:] for i in list1}", "out": "辞書内包記法"}
{"in": "foo(*t)", "out": "引数展開"}
{"in": "from functools import reduce\nreduce(lambda x, y: x or y, (iam(x) for x in [False, True, False]))", "out": "リスト内包記法 変換"}
{"in": "re.findall('([^.]*?apple[^.]*\\\\.)', txt)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(c for c in string if c != \"'\")", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print(''.join(tree.xpath('.//text()')))", "out": "リストの文字列化"}
{"in": "print(' '.join(output))", "out": "リストの文字列化"}
{"in": "super(Teenager, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[(x, y) for x, y in pairs if x != y]", "out": "リスト内包記法 フィルタ"}
{"in": "y = [('%02d' % v) for v in x]", "out": "リスト内包記法 変換"}
{"in": "f.write('\\n'.join(altered_lines) + '\\n')", "out": "リストの文字列化"}
{"in": "all(el == 'hello' for el in x)", "out": "リスト内包記法 変換"}
{"in": "aapl.index.to_series().diff().median() / (60 * 60 * 10 ** 9)", "out": "累乗演算子"}
{"in": "print('\\n'.join(lines))", "out": "リストの文字列化"}
{"in": "bids = [int(bid) for bid in bids]", "out": "リスト内包記法 変換"}
{"in": "output = [value for value, count in list(counts.items()) if count > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.sub('{[^{}]+}', lambda x: x.group(0).replace(',', ';'), text))", "out": "正規表現"}
{"in": "min(timeit.repeat(lambda : dict((k, v) for d in (x, y) for k, v in list(d.items()))))", "out": "辞書内包記法"}
{"in": "unidecode('\\u5f71\\u5e2b\\u55ce')", "out": "ユニコード"}
{"in": "now_aware = unaware.replace(tzinfo=pytz.UTC)", "out": "正規表現"}
{"in": "print('%.2f' % 5)", "out": "少数点表示制限"}
{"in": "brr[:] = brr[::-1]", "out": "逆順の列"}
{"in": "print(re.findall(\"\\\\'\\\\S+?\\\\':\\\\s*\\\\'?(.*?)\\\\'?(?:,|$)\", st))", "out": "正規表現"}
{"in": "letters = ''.join([choice(ascii_lowercase) for _ in range(5)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "bytes(int(x, 0) for x in ['0x28', '0x0', '0x0', '0x0'])", "out": "リスト内包記法 変換"}
{"in": "np.concatenate([a[a == i][:2] for i in np.unique(a)])", "out": "リスト内包記法 変換"}
{"in": "[(x + y) for x, y in l]", "out": "リスト内包記法 変換"}
{"in": "new_dict = dict((k, v) for k, v in list(old_dict.items()) if v in allowed_values)", "out": "辞書内包記法"}
{"in": "[[ch for ch in word] for word in ('apple', 'banana', 'pear', 'the', 'hello')]", "out": "リスト内包記法 変換"}
{"in": "return func(that, session, *args, **kwargs)", "out": "引数展開"}
{"in": "function(*args, **kwargs)", "out": "引数展開"}
{"in": "sum(letterGoodness.get(c, 0) for c in yourstring.upper())", "out": "リスト内包記法 変換"}
{"in": "list(d['answer'] for d in d_values(a, 3))", "out": "リスト内包記法 変換"}
{"in": "Matrix = [[(0) for x in range(w)] for y in range(h)]", "out": "リスト内包記法 変換"}
{"in": "[c for c in df if c[0] == 'd']", "out": "リスト内包記法 フィルタ"}
{"in": "{k: v for k, v in list(metadata.items()) if v}", "out": "辞書内包記法"}
{"in": "self.axes = self.figure.add_subplot(111)", "out": "正規表現"}
{"in": "s.groupby(s.notnull()[::-1].cumsum()[::-1]).transform(lambda g: g[-1] / g.size)", "out": "逆順の列 末尾の要素"}
{"in": "[sum(l) for l in l_o_l]", "out": "リスト内包記法 変換"}
{"in": "next((i for i, d in enumerate(lod) if 3 in d), None)", "out": "リスト内包記法 フィルタ"}
{"in": "s = 'svn cp {root_dir}/{trunk}/ {root_dir}/{tag}/'.format(**locals())", "out": "引数展開"}
{"in": "result = set(d[0]).intersection(*d)", "out": "引数展開"}
{"in": "[f for f in dir(np.lib.financial) if not f[0] == '_']", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(sorted(set(s)))", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join(chr(c) for c in b).decode('utf-16')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(sum(x) / len(x)) for x in zip(*a)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "line = re.sub(\"([^'])'f'(.)\", '\\\\1THIS_IS_FALSE\\\\2', line)", "out": "正規表現"}
{"in": "output = os.linesep.join(line for line in f if ' ' in line)", "out": "リスト内包記法 フィルタ"}
{"in": "all(c in '10' for c in aString) and len(aString) == 8", "out": "リスト内包記法 変換"}
{"in": "[('%s%02d' % t) for t in zip(b, a)]", "out": "リスト内包記法 変換"}
{"in": "l = [(2 * x) for x in l]", "out": "リスト内包記法 変換"}
{"in": "string = ''.join(['a', 'b', 'c'])", "out": "リストの文字列化"}
{"in": "cursor.execute('SELECT count(*) FROM aTable')", "out": "引数展開"}
{"in": "foo = [{} for _ in range(n)]", "out": "辞書内包記法"}
{"in": "return dict((k, [v[1] for v in itr]) for k, itr in grob)", "out": "辞書内包記法"}
{"in": "pd.DataFrame({k: dict.fromkeys(v, k) for k, v in list(dic.items())}).T.fillna('-')", "out": "辞書内包記法"}
{"in": "getattr(foo, bar)(*params, **keyword_params)", "out": "引数展開"}
{"in": "return f(*args, **kwargs)", "out": "引数展開"}
{"in": "x = [([None] * 5) for _ in range(6)]", "out": "リスト内包記法 変換"}
{"in": "y = [int(val) for val in x]", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\s', s)", "out": "正規表現"}
{"in": "re.sub('[^\\\\w\\\\-_\\\\. ]', '_', 'some\\\\*-file._n\\\\\\\\ame')", "out": "正規表現"}
{"in": "re.search('\\\\d+|$', '').group()", "out": "正規表現"}
{"in": "list(itertools.chain(*lst))", "out": "引数展開"}
{"in": "re.findall('(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])', 'CamelCaseXYZ')", "out": "正規表現"}
{"in": "next(i for i, d in enumerate(lod) if 3 in d)", "out": "リスト内包記法 フィルタ"}
{"in": "itemnumber = [d['itemnumber'] for d in list_of_dicts]", "out": "辞書内包記法"}
{"in": "\"\"\"{0:,.2f}\"\"\".format(123466666)", "out": "少数点表示制限"}
{"in": "struct.pack('BBB', *rgb).encode('hex')", "out": "引数展開"}
{"in": "\"\"\"client:user:username:type:1234567\"\"\".split(':')[-1]", "out": "末尾の要素"}
{"in": "format(12345.678, ',.2f')", "out": "少数点表示制限"}
{"in": "[(a + ',' + b) for a, b in zip(A, B)]", "out": "リスト内包記法 変換"}
{"in": "print(date_conv.strftime('%d.%m.%Y'))", "out": "日付書式"}
{"in": "{k: d1[k] for k in set(d1).intersection(l1)}", "out": "辞書内包記法"}
{"in": "[s for v in (re.findall('\\\\d+|\\\\D+', s) for s in L) for s in v]", "out": "リスト内包記法 変換 正規表現"}
{"in": "data = ''.join(code[i] for i in data)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[ast.literal_eval(re.sub('\\\\b0+', '', pixel)) for pixel in pixels]", "out": "リスト内包記法 変換 正規表現"}
{"in": "\"\"\"\"\"\".join(somestring.split('\\\\r'))", "out": "リストの文字列化"}
{"in": "[(x + y) for x in 'catty' for y in 'pot']", "out": "リスト内包記法 変換"}
{"in": "[(x, y) for x in L for y in L]", "out": "リスト内包記法 変換"}
{"in": "soup.find_all('a', text=re.compile('^[pP]rice'))", "out": "正規表現"}
{"in": "cleanedHost = re.sub('[^a-zA-Z0-9]+', '', host)", "out": "正規表現"}
{"in": "createkey = '_'.join(sorted([str(wi) for wi in wordids]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "a = '123' if b else '456'", "out": "三項演算子"}
{"in": "return ''.join([str(random.randint(0, 9)) for i in range(x)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[l for l in list_dirs if l.split('\\\\')[-1] not in unwanted_files]", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "pd.to_datetime(s, format='%d/%m/%Y')", "out": "日付書式"}
{"in": "return n if n <= 1 else fibo(n - 1) + fibo(n - 2)", "out": "三項演算子"}
{"in": "{k: v for k, v in list(d1.items()) if k in l1}", "out": "辞書内包記法"}
{"in": "file1 = dict(l.strip().split(':') for l in open('file1', 'r'))", "out": "辞書内包記法"}
{"in": "re.findall('[A-Z]?[a-z]+|[A-Z]+(?=[A-Z]|$)', 'camelCaseXYZ')", "out": "正規表現"}
{"in": "re.findall('[A-Z](?:[a-z]+|[A-Z]*(?=[A-Z]|$))', 'CamelCaseXYZ')", "out": "正規表現"}
{"in": "df_with_no_strings = df[~rows_with_strings]", "out": "反転演算子"}
{"in": "df.a + '~' + df.b + '~' + (df.c * 1).astype(str)", "out": "反転演算子"}
{"in": "del foo.fields[-1]", "out": "末尾の要素"}
{"in": "print('\\u4f60\\u597d'.encode('utf-8').decode('mbcs'))", "out": "ユニコード"}
{"in": "list(str(n) for n in range(10))", "out": "リスト内包記法 変換"}
{"in": "return ''.join(random.choice(allowed_chars) for i in range(length))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "len(re.findall('(?=(%s))' % re.escape(needle), haystack))", "out": "正規表現"}
{"in": "list(source_list) == zip(*zip(*source_list))", "out": "引数展開"}
{"in": "\"\"\", \"\"\".join(['{0} ({1})'.format(x[0], x[1]) for x in a])", "out": "辞書内包記法 リストの文字列化"}
{"in": "l = [dict(zip([1], [x])) for x in range(1, 100)]", "out": "辞書内包記法"}
{"in": "datetime.strptime(''.join(iso_ts.rsplit(':', 1)), '%Y-%m-%dT%H:%M:%S%z')", "out": "日付書式 時刻書式 リストの文字列化"}
{"in": "df_output_lines = [s.split() for s in os.popen('df -Ph').read().splitlines()]", "out": "リスト内包記法 変換"}
{"in": "b = np.array([a[i] for i in range(m.shape[0]) if i not in indices])", "out": "リスト内包記法 フィルタ"}
{"in": "t.strftime('%m/%d/%Y')", "out": "日付書式"}
{"in": "print(sorted([Card(c[0], c[1]) for e in a for c in e]))", "out": "リスト内包記法 変換"}
{"in": "return function(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(map(chr, [65, 66, 67]))", "out": "リストの文字列化"}
{"in": "'Dear Student, \\r\\n Please send your report\\r\\n Thank you for your attention'", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join([(next(replacer) if c == '@' else c) for c in s])", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "logging.info('Log Entry Here.')", "out": "正規表現"}
{"in": "soupHandler.findAll('div', id=re.compile('^post-$'))", "out": "正規表現"}
{"in": "total = sum(int(v) for name, v in table)", "out": "リスト内包記法 変換"}
{"in": "print('Last: ', list[-1])", "out": "末尾の要素"}
{"in": "print(''.join('%02x' % ord(c) for c in text))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return np.hstack(np.meshgrid(*L)).swapaxes(0, 1).reshape(ndims, -1).T", "out": "引数展開"}
{"in": "[(sum(group) / size) for group in zip(*(data[x::size] for x in range(size)))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[x for x in string.letters if x in (y for y in 'BigMan on campus')]", "out": "リスト内包記法 フィルタ"}
{"in": "re.compile('(.*)(?<!\\\\1)')", "out": "正規表現"}
{"in": "sum(1 for x in l if x)", "out": "リスト内包記法 フィルタ"}
{"in": "print('The total defects for date {} is {}'.format(d, count))", "out": "辞書内包記法"}
{"in": "[(d['id'], d['name']) for d in l]", "out": "リスト内包記法 変換"}
{"in": "[1, 2, 3, 4, 5, 6][::-1]", "out": "逆順の列"}
{"in": "return function(*args, **kwargs)", "out": "引数展開"}
{"in": "np.partition(data, -5, order='f1')[-5:][::-1]", "out": "逆順の列"}
{"in": "[p for p in process_list if all(e not in p for e in exclude_list)]", "out": "リスト内包記法 フィルタ"}
{"in": "bad = [x for x in mylist if x not in goodvals]", "out": "リスト内包記法 フィルタ"}
{"in": "parser.parse_args([('--' + p if '=' in p else p) for p in sys.argv[1:]])", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "\"\"\"\t\t\t\"\"\".join(('\\n' + myStr.lstrip()).splitlines(True))", "out": "リストの文字列化"}
{"in": "return np.vstack([np.array(u) for u in set([tuple(p) for p in points])])", "out": "リスト内包記法 変換"}
{"in": "d = dict((m.get(k, k), v) for k, v in list(d.items()))", "out": "辞書内包記法"}
{"in": "dict(i.split('@') for i in my_list)", "out": "辞書内包記法"}
{"in": "[rex.split(i) for i in sequence_list]", "out": "リスト内包記法 変換"}
{"in": "nf.write(''.join(str(random.randint(0, 1000)) for _ in range(1000)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(', '.join(lst[:-1]) + ' & ' + lst[-1])", "out": "リストの文字列化 末尾の要素"}
{"in": "{d[0]: d[1:] for d in data}", "out": "辞書内包記法"}
{"in": "dict((v, v ** 2) for v in l)", "out": "辞書内包記法 累乗演算子"}
{"in": "age_list = [int(a[0]) for a in ages_iterator]", "out": "リスト内包記法 変換"}
{"in": "fig.suptitle('Title for whole figure', fontsize=16)", "out": "リスト内包記法 変換"}
{"in": "potion_names = [p.name for p in list_of_potions]", "out": "リスト内包記法 変換"}
{"in": "print(dt.strftime('%d/%m/%Y'))", "out": "日付書式"}
{"in": "[list(t) for t in zip(*([iter(list(range(1, 10)))] * 3))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "function_that_needs_strings(*my_list)", "out": "引数展開"}
{"in": "matched_lines = [line for line in my_string.split('\\n') if 'substring' in line]", "out": "リスト内包記法 フィルタ"}
{"in": "len(re.findall('[A-Z]', string))", "out": "正規表現"}
{"in": "shutil.copy2(file, '\\u05d0')", "out": "ユニコード"}
{"in": "[x for x in l1 if tuple(x) in intersection]", "out": "リスト内包記法 フィルタ"}
{"in": "sorted(l, key=lambda x: x.rsplit(None, 1)[-1])", "out": "末尾の要素"}
{"in": "re.sub(pattern, '', s)", "out": "正規表現"}
{"in": "return sum(1 + count(i) for i in l if isinstance(i, list))", "out": "リスト内包記法 フィルタ"}
{"in": "[(n['name'], n['value']) for n in soup.findAll('input')]", "out": "リスト内包記法 変換"}
{"in": "print(func(*args))", "out": "引数展開"}
{"in": "print('Prob for {} is {}'.format(k, sum(i * j for i, j in zip(v, values))))", "out": "辞書内包記法"}
{"in": "[(x and int(x) or 0) for x in s.split(',')]", "out": "リスト内包記法 変換"}
{"in": "max(index for index, value in data if value == max_value)", "out": "リスト内包記法 フィルタ"}
{"in": "print(chr(1 + ord('\\u0b85')))", "out": "ユニコード"}
{"in": "[name for name in names if any([(p in name) for p in pattern])]", "out": "リスト内包記法 フィルタ"}
{"in": "b = re.sub('(0x[a-fA-F0-9]+|\\\\d+)', '[0-9]', a)", "out": "正規表現"}
{"in": "Achievement.objects.get(name=\"Mirror's Edge\\u2122\")", "out": "ユニコード"}
{"in": "return re.search('\\\\d{2}:\\\\d{2}(?:am|pm)', text, re.I).group()", "out": "正規表現"}
{"in": "re.findall('\\\\\"(.+?)\\\\\"', obj)", "out": "正規表現"}
{"in": "dict((x, a.get(x, 0) + b.get(x, 0)) for x in set(a) | set(b))", "out": "辞書内包記法"}
{"in": "cleaned_list = [_f for _f in some_list if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "pat = re.compile('((1(2[3456]+2)+1)*)')", "out": "正規表現"}
{"in": "self.matches = [s for s in self.options if text in s]", "out": "リスト内包記法 フィルタ"}
{"in": "lst = [float(x) for x in lst]", "out": "リスト内包記法 変換"}
{"in": "x.resample('D', how=lambda x: x.mean() if len(x) > 0 else 0)", "out": "三項演算子"}
{"in": "return re.sub('[^a-z]', '', s.lower())", "out": "正規表現"}
{"in": "[tuple(g[1]) for g in itertools.groupby(enumerate(l), lambda i_x: i_x[0] - i_x[1])]", "out": "リスト内包記法 変換"}
{"in": "return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(s1, s2))", "out": "リスト内包記法 変換 リストの文字列化 排他的論理和"}
{"in": "result = list([_f for _f in orig if _f])", "out": "リスト内包記法 フィルタ"}
{"in": "print(sorted(x.split(','), key=lambda k: int(re.findall('(?<=_g)\\\\d+$', k)[0])))", "out": "正規表現"}
{"in": "time.strftime('%l:%M%p %Z on %b %d, %Y')", "out": "日付書式"}
{"in": "{'foo': 'content for foo', 'bar': 'content for bar'}", "out": "辞書内包記法"}
{"in": "dest = '\\n'.join(line for line in src.split('\\n') if line[:1] != '#')", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[(a + b) for a, b in zip(A, B)]", "out": "リスト内包記法 変換"}
{"in": "[(x + y) for x, y in product('12345', 'ab')]", "out": "リスト内包記法 変換"}
{"in": "[tag.decompose() for tag in soup('script')]", "out": "リスト内包記法 変換"}
{"in": "buckets = [[(0) for col in range(5)] for row in range(10)]", "out": "リスト内包記法 変換"}
{"in": "lastprice = stock.iloc[-1]['Close']", "out": "末尾の要素"}
{"in": "[list(g) for _, g in groupby(bool_array)]", "out": "リスト内包記法 変換"}
{"in": "[word for word in l if word.isalpha()]", "out": "リスト内包記法 フィルタ"}
{"in": "return np.array([np.where(np.in1d(array, matched))[0] for array in arrays])", "out": "リスト内包記法 変換"}
{"in": "dict(item.split(' ') for item in s.split('\\n'))", "out": "辞書内包記法"}
{"in": "datetime.strptime('2014-12-04', '%Y-%m-%d').date()", "out": "日付書式"}
{"in": "list = [(str(a[i]) + str(b[i])) for i in range(len(a))]", "out": "リスト内包記法 変換"}
{"in": "s = ' '.join(s[i:i + 2] for i in range(0, len(s), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "longest = s1 if len(s1) > len(s2) else s2", "out": "三項演算子"}
{"in": "[i for i, (l1, l2) in enumerate(zip(list1, list2)) if l1 >= 1 and l2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "print(any(checkLower == val.lower() for val in ['qwert', 'AsDf']))", "out": "リスト内包記法 変換"}
{"in": "print('%.2f' % 315.15321531321)", "out": "少数点表示制限"}
{"in": "'\\n'.join([','.join(h) for h in zip(*df.columns)]) + '\\n'", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "[a.__setitem__('price', 0 if a['price'] == '' else a['price']) for a in data]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "\"\"\"\"\"\".join(L)", "out": "リストの文字列化"}
{"in": "int(re.search('\\\\d+', string1).group())", "out": "正規表現"}
{"in": "{k: list(g) for k, g in groupby(sorted(l, key=len), len)}", "out": "辞書内包記法"}
{"in": "line = re.sub('</?\\\\[\\\\d+>', '', line)", "out": "正規表現"}
{"in": "[''.join(x) for x in zip(l1, l2, l3, l4)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "int_list = [int(i) for i in line]", "out": "リスト内包記法 変換"}
{"in": "the_sum = sum(a[k] * b[k] for k in keys)", "out": "リスト内包記法 変換"}
{"in": "dates.append(datetime.strptime(row[5], '%a, %d %b %Y %H:%M:%S %Z'))", "out": "日付書式 時刻書式"}
{"in": "any(c.isalpha() for c in string_2)", "out": "リスト内包記法 変換"}
{"in": "sum(map(int, zip(*table)[-1]))", "out": "引数展開 末尾の要素"}
{"in": "float(2 * 10 ** 308)", "out": "累乗演算子"}
{"in": "self.legend.figure.canvas.draw()", "out": "正規表現"}
{"in": "[[] for _ in range(2)]", "out": "リスト内包記法 変換"}
{"in": "{k: mylist.count(k) for k in set(mylist)}", "out": "辞書内包記法"}
{"in": "sum(val for val in l1 if isinstance(val, numbers.Number))", "out": "リスト内包記法 フィルタ"}
{"in": "l = [1, 2, 3, 4, 5, 6, 7, 8]\nprint([[l[:i], l[i:]] for i in range(1, len(l))])", "out": "リスト内包記法 変換"}
{"in": "print([((a + b) / 2) for a, b in zip(data[::2], data[1::2])])", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "return [a for a, b in zip(nums, nums[1:] + [not nums[-1]]) if a != b]", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "\"\"\"\t\t\t\"\"\".join(myStr.splitlines(True))", "out": "リストの文字列化"}
{"in": "rbs = np.array([ish[4] for ish in realbooks])", "out": "リスト内包記法 変換"}
{"in": "[e for e in lelist if e in lestring]", "out": "リスト内包記法 フィルタ"}
{"in": "MyModel.objects.filter(pk=instance.id).update(**data)", "out": "引数展開"}
{"in": "mydic = {(i + 1): o['name'] for i, o in enumerate(iterload(f))}", "out": "辞書内包記法"}
{"in": "\"\"\", \"\"\".join(set_3)", "out": "リストの文字列化"}
{"in": "\"\"\" \"\"\".join(hxs.select('//body//p//text()').extract())", "out": "リストの文字列化"}
{"in": "{{'${:,.2f}'.format(543921.9354)}}", "out": "少数点表示制限"}
{"in": "d = dict(zip([o.name for o in object_list], object_list))", "out": "辞書内包記法"}
{"in": "[t for t in enumerate(l)]", "out": "リスト内包記法 変換"}
{"in": "print(('%.4f' % n)[:6])", "out": "少数点表示制限"}
{"in": "[np.ma.array(arr, mask=~c).argmax() for c in cond]", "out": "リスト内包記法 変換 反転演算子"}
{"in": "return dict((k, v) for k, v in dictionary.items() if begin <= k <= end)", "out": "辞書内包記法"}
{"in": "[y for y in x for x in data]", "out": "リスト内包記法 変換"}
{"in": "return super(ProtectedView, self).dispatch(*args, **kwargs)", "out": "引数展開"}
{"in": "y = [x for x in list(dict.keys()) if dict[x] > 0.0]", "out": "辞書内包記法"}
{"in": "b = [a.ix[i] for i in a.index if sorted1[i] >= sorted2[i]]", "out": "リスト内包記法 フィルタ"}
{"in": "[v for k, v in enumerate(mylist) if k % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('Num\\\\d{2}', text)[0]", "out": "正規表現"}
{"in": "next(i for i, j in enumerate('   xyz') if j.strip())", "out": "リスト内包記法 フィルタ"}
{"in": "struct.unpack('<i', chunk + ('\\x00' if chunk[2] < 128 else '\\xff'))", "out": "三項演算子"}
{"in": "(len(word) for word in wordslist)", "out": "リスト内包記法 変換"}
{"in": "return any(char.isdigit() for char in s)", "out": "リスト内包記法 変換"}
{"in": "re.findall('[A-Z][^A-Z]*', 'ABC')", "out": "正規表現"}
{"in": "d = dict((str(n), list(range(20))) for n in range(1000000))", "out": "辞書内包記法"}
{"in": "[s[a:b] for a, b in zip(accumulate([0] + keys), accumulate(keys))]", "out": "リスト内包記法 変換"}
{"in": "[0] + [(i + 1) for i in [4, 9, 12, 14, 18]] + [len(bool_array)]", "out": "リスト内包記法 変換"}
{"in": "super(DynamicForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"(?=({}))\"\"\".format('s\\\\+'.join('\\\\w+' for i in range(n)))", "out": "辞書内包記法 リストの文字列化"}
{"in": "print('\\\\u0631\\\\u064e\\\\u062c\\\\u0627')", "out": "ユニコード"}
{"in": "ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))", "out": "日付書式"}
{"in": "re.sub(pattern, replacement, text)", "out": "正規表現"}
{"in": "print(re.findall('\\\\([^()]*\\\\)', string))", "out": "正規表現"}
{"in": "[[(k, v) for k, v in sub_list if v is not None] for sub_list in oldList]", "out": "リスト内包記法 フィルタ"}
{"in": "((m.get(k, k), v) for k, v in list(d.items()))", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(''.join(item) for item in zip(u, l))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "OrderedDict((k, queue[key]) for k in key_order)", "out": "リスト内包記法 変換"}
{"in": "[{y: x[y].lower()} for x in messages for y in x]", "out": "辞書内包記法"}
{"in": "return [list(x) for x in a_strpadded]", "out": "リスト内包記法 変換"}
{"in": "sorted(l, key=lambda x: ''.join((x[:-1], '{')) if x[-1].isdigit() else x)", "out": "三項演算子 リストの文字列化 末尾の要素"}
{"in": "[item for item in l for repetitions in range(2)]", "out": "リスト内包記法 変換"}
{"in": "{d['city']: d['country'] for d in li}", "out": "辞書内包記法"}
{"in": "[x for x in matrix if x[2] == 1.0]", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('(\\\\W+)', 'Words, words, words.')", "out": "正規表現"}
{"in": "[min(j) for i, j in itertools.groupby(A, key=lambda x: x[:7])]", "out": "リスト内包記法 変換"}
{"in": "d.update((k, v * 0.5) for k, v in list(d.items()))", "out": "リスト内包記法 変換"}
{"in": "[m.group() for m in re.finditer('((\\\\w)\\\\2)+', 'bookkeeper')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "return ''.join(sorted(string))", "out": "リストの文字列化"}
{"in": "[listofLines[i] for i in sortedIndex]", "out": "リスト内包記法 変換"}
{"in": "return a.b.c if hasattr(a, 'b') and hasattr(a.b, 'c') else None", "out": "三項演算子"}
{"in": "data = ''.join(code.get(i, ' ') for i in data)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[b.append(item) for item in a if item not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "print('\\u3053')", "out": "ユニコード"}
{"in": "(n + 1) ** 2 == n ** 2 + (2 * n + 1)", "out": "累乗演算子"}
{"in": "print(re.sub('^\\\\S*\\\\s', '', s))", "out": "正規表現"}
{"in": "s = ''.join(random.choice('0123456789abcdef') for _ in range(10))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "{'df{0:d}.Close'.format(idx + 1): df['Close'] for idx, df in enumerate(dflist)}", "out": "辞書内包記法"}
{"in": "myl[:] = [(x if x != 4 else 44) for x in myl]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "nested_lst_of_tuples = [tuple(l) for l in nested_lst]", "out": "リスト内包記法 変換"}
{"in": "links = soup.find_all('a', {'id': re.compile('^c\\\\d+')})", "out": "正規表現"}
{"in": "~s.index.isin(list('BDE'))", "out": "反転演算子"}
{"in": "self.update(dict(*args, **kwargs))", "out": "引数展開"}
{"in": "match = re.search('\\\\d{4}-\\\\d{2}-\\\\d{2}', text)\ndate = datetime.strptime(match.group(), '%Y-%m-%d').date()", "out": "正規表現 日付書式"}
{"in": "{value: key for key, values in list(my_map.items()) for value in values}", "out": "辞書内包記法"}
{"in": "a = [[1, 2, 3, 4, 5] for _ in range(4)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join(sorted(set(strs)))", "out": "リストの文字列化"}
{"in": "len(mylist) - mylist[::-1].index(myvalue) - 1", "out": "逆順の列"}
{"in": "fu_list = [(k, fus_d.get(k), fus_s.get(k)) for k in s]", "out": "リスト内包記法 変換"}
{"in": "sum(n * (n - 1) // 2 for n in list(index2count.values()))", "out": "リスト内包記法 変換"}
{"in": "a = [int(x) for x in input().split()]", "out": "リスト内包記法 変換"}
{"in": "[d for d in test_list if d['id'] == 'an id']", "out": "リスト内包記法 フィルタ"}
{"in": "all_strings = [s for string_list in list(my_dict.values()) for s in string_list]", "out": "辞書内包記法"}
{"in": "vsampled = numpy.interp(numpy.arange(t[0], t[-1]), t, v)", "out": "末尾の要素"}
{"in": "re.findall('(\\\\d{2})(020511|00)', theStr)", "out": "正規表現"}
{"in": "[path for path in glob.iglob('./' + '[0-9]' * 14) if os.path.isdir(path)]", "out": "リスト内包記法 フィルタ"}
{"in": "jinja2.Template('{{ \" \".join(bar) }}').render(bar='baz')", "out": "リストの文字列化"}
{"in": "worst = sorted(Player(v, k) for k, v in list(d.items()))", "out": "リスト内包記法 変換"}
{"in": "return f(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(sorted(set(s.lower())))", "out": "リストの文字列化"}
{"in": "p = re.compile('^b*(abb*)*a?$')", "out": "正規表現"}
{"in": "func('arg', 'arg2', **({'arg3': 'some value'} if condition == True else {}))", "out": "三項演算子 引数展開"}
{"in": "function_in_library('Hello %s', ', '.join(my_args))", "out": "リストの文字列化"}
{"in": "int(''.join(bin(x)[:1:-1]), 2)", "out": "リストの文字列化"}
{"in": "\"\"\" \"\"\".join('{0}{1}'.format(key, val) for key, val in sorted(adict.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "\"\"\"i\"\"\".join('!' * len(x) for x in strs.split('i'))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "search_pattern = re.compile('\\\\+[a-zA-z]\\\\+')", "out": "正規表現"}
{"in": "print(re.sub('(?<!^)(?=[A-Z])', '_', example).lower())", "out": "正規表現"}
{"in": "return [ks[i] for i in range(len(ks)) if i == 0 or ks[i] != ks[i - 1]]", "out": "リスト内包記法 フィルタ"}
{"in": "~df['second'].str.contains(word)", "out": "反転演算子"}
{"in": "re.findall(p, test_str)", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join('\"{}\"'.format(x) if x.isdigit() else x for x in words.split())", "out": "辞書内包記法 三項演算子 リストの文字列化"}
{"in": "sum(x ** 2) * (x[1] - x[0])", "out": "累乗演算子"}
{"in": "(x * 2 for x in [2, 2])", "out": "リスト内包記法 変換"}
{"in": "print('Last: ', lst[-1])", "out": "末尾の要素"}
{"in": "a = [i[0] for i in sorted(zip(a, ind), key=lambda x: x[1])]", "out": "リスト内包記法 変換"}
{"in": "{k: v for k, v in (e.split(':') for e in a)}", "out": "辞書内包記法"}
{"in": "re.findall('(?:^|\\\\+)([A-Z])', formula)", "out": "正規表現"}
{"in": "ivd = {v: k for k, v in list(d.items())}", "out": "辞書内包記法"}
{"in": "[('%.2f' % (n / d)) for n, d in (map(float, i.split('/')) for i in data)]", "out": "リスト内包記法 変換 少数点表示制限"}
{"in": "df.agg(*[count(c).alias(c) for c in df.columns]).show()", "out": "リスト内包記法 変換 引数展開"}
{"in": "match = re.search('<a href=\"(?P<url>[^\"]*?)\"', line)", "out": "正規表現"}
{"in": "return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)", "out": "累乗演算子"}
{"in": "intbids = [int(bid) for bid in bids]", "out": "リスト内包記法 変換"}
{"in": "dict((k, mydict[k]) for k in keys_to_select)", "out": "辞書内包記法"}
{"in": "re.findall('.{1,6}', 'Four score and seven years ago.')", "out": "正規表現"}
{"in": "[((index % 8 + 2) * item) for index, item in enumerate(range(1, 21))]", "out": "リスト内包記法 変換"}
{"in": "list([x for x in names if 'aet' in x])", "out": "リスト内包記法 フィルタ"}
{"in": "(lambda a, b: a(a, b))(lambda a, b: b * a(a, b - 1) if b > 0 else 1, num)", "out": "三項演算子"}
{"in": "[string for string in dnalist if all(char in 'GATC' for char in string)]", "out": "リスト内包記法 フィルタ"}
{"in": "writer.writerows([[item] for item in new_text_list])", "out": "リスト内包記法 変換"}
{"in": "[(x + 2) for x in [1, 2, 3]]", "out": "リスト内包記法 変換"}
{"in": "[my_tuple[isinstance(x, str)].append(x) for x in a_list]", "out": "リスト内包記法 変換"}
{"in": "[[f for f in family if f != i] for i, family in enumerate(families)]", "out": "リスト内包記法 フィルタ"}
{"in": "best = sorted([Player(v, k) for k, v in list(d.items())], reverse=True)", "out": "リスト内包記法 変換"}
{"in": "all(x == mylist[0] for x in mylist)", "out": "リスト内包記法 変換"}
{"in": "Counter(elem[0] for elem in list1)", "out": "リスト内包記法 変換"}
{"in": "[('%s:%d' % (e, i)) for e in mylist for i in (1, 2)]", "out": "リスト内包記法 変換"}
{"in": "print('financial return of outcome 1 = {:.2f}'.format(Decimal('33.515')))", "out": "少数点表示制限"}
{"in": "print('\\n\\n'.join(paras))", "out": "リストの文字列化"}
{"in": "re.sub('[^\\\\x00-\\\\x7f]', ' ', s)", "out": "正規表現"}
{"in": "a = [([None] * 7) for _ in range(7)]", "out": "リスト内包記法 変換"}
{"in": "map(''.join, itertools.product(*letters))", "out": "引数展開"}
{"in": "my_list = [line.rstrip('\\n') for line in f]", "out": "リスト内包記法 変換"}
{"in": "res = [(i if i < 4 else 0) for i in range(1, 6)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "averages = [((x + y) / 2.0) for x, y in zip(my_list[:-1], my_list[1:])]", "out": "リスト内包記法 変換"}
{"in": "np.unpackbits(np.arange(2 ** r, dtype='uint8')[:, (None)], axis=1)[:, 8 - r:]", "out": "累乗演算子"}
{"in": "print([x for x in a if x in b])", "out": "リスト内包記法 フィルタ"}
{"in": "return int(''.join(map(str, nums)))", "out": "リストの文字列化"}
{"in": "newList = [[ch, len(ch), ch.upper()] for ch in sent]", "out": "リスト内包記法 変換"}
{"in": "print([{'type': x['type_id'], 'name': x['type_name']} for x in d])", "out": "辞書内包記法"}
{"in": "re.sub('\\\\s+', ' ', 'some   test with     ugly  whitespace')", "out": "正規表現"}
{"in": "unistring = '\\u039c\\u03b5\\u03c4\\u03b1\\u03bb\\u03bb\\u03b9\\u03ba\\u03b1'", "out": "ユニコード"}
{"in": "return [k for k in seq if counts[k] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "pattern = re.compile('^(?=.*Tim)(?=.*stupid).*$')", "out": "正規表現"}
{"in": "result = [r for r in x if not any(z in r for z in y)]", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join(OrderedDict.fromkeys(foo)))", "out": "リストの文字列化"}
{"in": "with open('daemons.txt', 'w') as fp:\n    fp.write('\\n'.join('%s %s' % x for x in mylist))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(x + y) for x, y in zip(string, string[i:])]", "out": "リスト内包記法 変換"}
{"in": "'Hello %s' % ', '.join([str(e) for e in my_args])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "df['period'] = df[['Year', 'quarter']].apply(lambda x: ''.join(x), axis=1)", "out": "リストの文字列化"}
{"in": "list_of_lists = [[] for _ in columns]", "out": "リスト内包記法 変換"}
{"in": "day_indexes = dict((name, i) for i, name in enumerate(calendar.day_name))", "out": "辞書内包記法"}
{"in": "print('{latitude} {longitude}'.format(**geopoint))", "out": "引数展開"}
{"in": "self.emit(QtCore.SIGNAL('stateChanged(int, int)'), index, checkState)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(char * n for char in s)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "list({v['id']: v for v in L}.values())", "out": "辞書内包記法"}
{"in": "list_1, list_2 = zip(*((x, y) for x, y in zip(list_1, list_2) if f(x)))", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "\"\"\"{:03d} {:03d} {:03d}\"\"\".format(*foo())", "out": "引数展開"}
{"in": "numpy.array([sub_array for sub_array in counts_array])", "out": "リスト内包記法 変換"}
{"in": "\"\"\"Hello {user.name}\"\"\".format(**stuf({'user': {'name': 'Markus'}}))", "out": "引数展開"}
{"in": "subj.translate(None, ''.join(chars_to_remove))", "out": "リストの文字列化"}
{"in": "t = tuple(int(v) for v in re.findall('[0-9]+', x))", "out": "リスト内包記法 変換 正規表現"}
{"in": "re.split('\\\\s{2,}', text)", "out": "正規表現"}
{"in": "print(re.sub('[aeiou]', repl, 'yesterday'))", "out": "正規表現"}
{"in": "print({k: v for k, v in mime_types.items()})", "out": "辞書内包記法"}
{"in": "[x for x in [f(v) for v in range(3)] if x > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "[i for i in a if i in '0123456789']", "out": "リスト内包記法 フィルタ"}
{"in": "return list(filter(os.path.isdir, [os.path.join(d, f) for f in os.listdir(d)]))", "out": "リスト内包記法 変換"}
{"in": "date_list = [(base - datetime.timedelta(days=x)) for x in range(0, numdays)]", "out": "リスト内包記法 変換"}
{"in": "all(x == 'QS' or 'H' in x for x in mycards)", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\w+', 'my. text, --without-- (punctuation) 123')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(sorted(set(s.lower()))).strip()", "out": "リストの文字列化"}
{"in": "'%(message)s' % {'message': Exception('\\u0449')}", "out": "ユニコード"}
{"in": "{value: key for key, values in my_map.items() for value in values}", "out": "辞書内包記法"}
{"in": "datetime.strptime('07/28/2014 18:54:55.099000', '%m/%d/%Y %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "re.match('cat\\\\ndog', s, re.M)", "out": "正規表現"}
{"in": "all(x > 0 for x in list_of_xs)", "out": "リスト内包記法 変換"}
{"in": "[(float(i) if '.' in i or 'e' in i else int(i)) for i in s]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[int(t) for t in (True, True, False)]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(str(i) for i in a))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "row = [thestring[i:i + 3] for i in range(0, len(thestring), 3)]", "out": "リスト内包記法 変換"}
{"in": "documents = [sub_list[0] for sub_list in documents]", "out": "リスト内包記法 変換"}
{"in": "data = [([0] * cols) for i in range(rows)]", "out": "リスト内包記法 変換"}
{"in": "dt = datetime.strptime(datestring, '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "print(key, sum([item['tmst'] for item in group]))", "out": "リスト内包記法 変換"}
{"in": "(x.count(item) for item in set(x))", "out": "リスト内包記法 変換"}
{"in": "[_f for _f in lis if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "re.match('^cat$\\\\ndog', s, re.M).group(0)", "out": "正規表現"}
{"in": "value = float(dic['value']) if dic['operator'] == '!=' else dic['value']", "out": "三項演算子"}
{"in": "active = True if request.POST.get('active') == 'true' else False", "out": "三項演算子"}
{"in": "documents = [' '.join(sentence) for sentence in documents]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return ''.join(chars[:-1])", "out": "リストの文字列化"}
{"in": "subList = [theList[n:n + N] for n in range(0, len(theList), N)]", "out": "リスト内包記法 変換"}
{"in": "result_dict = [u.__dict__ for u in my_query.all()]", "out": "辞書内包記法"}
{"in": "[item for item in full_list if all(x not in omit for x in item)]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('(?<!^)(\\\\B|\\\\b)(?!$)', '-', string)", "out": "正規表現"}
{"in": "re.sub('I am foo', 'I am(?: foo)?', '')", "out": "正規表現"}
{"in": "img[..., ::-1]", "out": "逆順の列"}
{"in": "\"\"\" \"\"\".join(word for word in msg.split() if word not in stopWords)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "max((v, i) for i, v in enumerate(a))[1]", "out": "リスト内包記法 変換"}
{"in": "repeat = re.compile('(?P<start>[a-z])(?P=start)+-?')", "out": "正規表現"}
{"in": "numpy.array([1, 2, 3, 4]) ** 2", "out": "累乗演算子"}
{"in": "np.sum(np.abs(x) ** 2, axis=-1) ** (1.0 / 2)", "out": "累乗演算子"}
{"in": "metros = [Metro(**k) for k in data['metros']]", "out": "リスト内包記法 変換 引数展開"}
{"in": "DateR = re.compile(Date)", "out": "正規表現"}
{"in": "xVar, yVar = zip(*((x, y) for x, y in zip(xVar, yVar) if y <= 100))", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "return dict((key, getattr(self, key)) for key in keys)", "out": "辞書内包記法"}
{"in": "new_list_of_dict = [new_dict(d) for d in list_of_dict]", "out": "辞書内包記法"}
{"in": "df = pd.concat([pd.read_sql_query(q, connection) for q in queries])", "out": "リスト内包記法 変換"}
{"in": "np.array([x for x in set(tuple(x) for x in A) & set(tuple(x) for x in B)])", "out": "リスト内包記法 変換"}
{"in": "legend.figure.canvas.mpl_connect('button_release_event', self.on_release)", "out": "正規表現"}
{"in": "print('\\n'.join(s.splitlines()))", "out": "リストの文字列化"}
{"in": "results = [int(match.group(1)) for match in matches]", "out": "リスト内包記法 変換"}
{"in": "fig.savefig('full_figure.png')", "out": "正規表現"}
{"in": "return [val for i, val in enumerate(values) if i not in indices]", "out": "リスト内包記法 フィルタ"}
{"in": "[some_string[i:i + 2] for i in range(0, len(some_string), 2)]", "out": "リスト内包記法 変換"}
{"in": "sum(1 for i in l if i % 4 == 3)", "out": "リスト内包記法 フィルタ"}
{"in": "tuple(x for sublist in base_lists for x in sublist)", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\s+', lambda m: str(m.end() - m.start()), string)", "out": "正規表現"}
{"in": "s = ', '.join(str(x) + ' ' + str(a[x]) for x in a)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "result = [i for k, g in groupby(lst, bool) for i in ((sum(g),) if k else g)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[s[i:i + 2] for i in range(0, len(s), 2)]", "out": "リスト内包記法 変換"}
{"in": "data = (float(row[1]) for row in incsv)", "out": "リスト内包記法 変換"}
{"in": "f(3, 5, *[1, 2, 3])", "out": "引数展開"}
{"in": "val, idx = min((val, idx) for idx, val in enumerate(my_list))", "out": "リスト内包記法 変換"}
{"in": "time.strptime('20100304 082835', '%Y%m%d %H%M%S')", "out": "日付書式 時刻書式"}
{"in": "write('Temperature is {0:.1f} and pressure is {1:.2f})'.format(X, Y))", "out": "少数点表示制限"}
{"in": "\"\"\"\"\"\".join(map(''.join, zip(*([iter(a)] * 2)))[::-1])", "out": "引数展開 リストの文字列化 逆順の列"}
{"in": "myiter = (100 if i in (0, 1, 3) else e for i, e in enumerate(mylist))", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "datetime.strptime(date_string, '%Y-%m-%d')", "out": "日付書式"}
{"in": "[x for t in zip(*lists) for x in t]", "out": "リスト内包記法 変換 引数展開"}
{"in": "re.sub('\\\\W+', '', your_string)", "out": "正規表現"}
{"in": "re.findall('\\\\w+', string)", "out": "正規表現"}
{"in": "re.findall('[^\\\\W\\\\d_]+|\\\\d+', 'Westminister15London England')", "out": "正規表現"}
{"in": "[entry for tag in tags for entry in entries if tag in entry]", "out": "リスト内包記法 フィルタ"}
{"in": "print('unmarked nodes: ' + ' '.join(str(x) for x, y in list(d.items()) if not y))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print(datetime.strftime('%b %d,%Y'))", "out": "日付書式"}
{"in": "[item for item in l for _ in range(r)]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join('{}: {}'.format(*k) for k in enumerate(lst)))", "out": "辞書内包記法 引数展開 リストの文字列化"}
{"in": "test = 'I have one {fruit} on the {place}.'.format(**dic)", "out": "引数展開"}
{"in": "[(n - 9 * int((n - 1) / 9)) for n in list1]", "out": "リスト内包記法 変換"}
{"in": "c = dict(a, **b)", "out": "引数展開"}
{"in": "print(re.sub('blah', callback, s))", "out": "正規表現"}
{"in": "c = [x[0] for x in A]", "out": "リスト内包記法 変換"}
{"in": "QtCore.QObject.connect(a, QtCore.SIGNAL('QtSig()'), pyClass.pyMethod)", "out": "正規表現"}
{"in": "[(A[x], B[x % len(B)]) for x in range(len(A))]", "out": "リスト内包記法 変換"}
{"in": "re.sub('[^\\\\w\\\\-_\\\\. ]', '_', filename)", "out": "正規表現"}
{"in": "files = sorted((f for f in files if firstFile <= int(f) < lastFile), key=int)", "out": "リスト内包記法 フィルタ"}
{"in": "binary_representation = struct.pack('{}i'.format(len(numbers)), *numbers)", "out": "引数展開"}
{"in": "sum(1 for _ in iterable)", "out": "リスト内包記法 変換"}
{"in": "d = {k: (lambda s, k=k: s * A[k]) for k in range(n)}", "out": "辞書内包記法"}
{"in": "[(p[0], sum(p[1:]) / 2.0) for p in PlayerList]", "out": "リスト内包記法 変換"}
{"in": "re.split('(\\\\W)', \"\"\"foo/bar spam\neggs\"\"\")", "out": "正規表現"}
{"in": "summary_dict = {c: [] for c in new.columns[1:]}", "out": "辞書内包記法"}
{"in": "[[i for i in sublist if counts[i] == 1] for sublist in mylist]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(item.get('one', 0) is True for item in list(tadas.values()))", "out": "リスト内包記法 変換"}
{"in": "next((a for a in s if s.count(a) == 1))", "out": "リスト内包記法 フィルタ"}
{"in": "bigList.sort(key=operator.itemgetter(*args))", "out": "引数展開"}
{"in": "print(sum(1 for elem in list1 if elem[0] == entry[0]))", "out": "リスト内包記法 フィルタ"}
{"in": "return '\\n'.join('{} {}'.format(k, v) for k, v in list(self.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "mylist = [''.join(word.split('l')[:2]) for word in ['Hello', 'world']]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.compile('<!-([^-])'), lambda match: '<!--' + match.group(1)", "out": "正規表現"}
{"in": "ivd = dict((v, k) for k, v in list(d.items()))", "out": "辞書内包記法"}
{"in": "plot.plot(linewidth=2.0, *np.log10(np.loadtxt('plot_me.dat', unpack=True)))", "out": "引数展開"}
{"in": "df.eq(3.2).any(axis=1) & ~df.isin([0.1, 1.2]).any(axis=1)", "out": "反転演算子"}
{"in": "print([item for item, count in list(collections.Counter(a).items()) if count > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "iqr = np.subtract(*np.percentile(x, [75, 25]))", "out": "引数展開"}
{"in": "print({k: round(v) for k, v in x.items()})", "out": "辞書内包記法"}
{"in": "x_pieces = [x[i:i + step] for i in range(0, len(x), step)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"NLTK is a python library for working human-written text. Summarize is a package that uses NLTK to create summaries.\"\"\"", "out": "リスト内包記法 変換"}
{"in": "b = [x for x in a if x not in itemsToRemove]", "out": "リスト内包記法 フィルタ"}
{"in": "super(PaginationFormSet, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return redirect('anotherView', username=request.user.username, **kwargs)", "out": "引数展開"}
{"in": "[(('', i[1]) if i[0] == None else i) for i in map(None, a, b)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "intersect = {key: [o, spec2[key]] for key, o in list(spec1.items()) if key in spec2}", "out": "辞書内包記法"}
{"in": "(np.arange(2 ** r)[:, (None)] & 2 ** np.arange(r)[::-1] > 0).astype(int)", "out": "逆順の列 累乗演算子"}
{"in": "from functools import reduce\nreturn sum(reduce(operator.mul, data) for data in zip(*lists))", "out": "リスト内包記法 変換 引数展開"}
{"in": "fruits = {k: [] for k in names}", "out": "辞書内包記法"}
{"in": "re.sub('(?<=fo+)bar(?=baz)', 'quux', 'foobarbaz')", "out": "正規表現"}
{"in": "[(int(i) if not i % 1 else i) for i in li]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "(x - y for x, y in it.izip(a[1:], a))", "out": "リスト内包記法 変換"}
{"in": "print([item for item in text.split() if item.count('-') == 5])", "out": "リスト内包記法 フィルタ"}
{"in": "'dammitimmad'[::-1] == 'dammitimmad'", "out": "逆順の列"}
{"in": "d = dict([(k, v) for k, v in zip(l[::2], l[1::2])])", "out": "辞書内包記法 ひとつおきの列"}
{"in": "print(re.sub('(.)\\\\1+', '\\\\1', a))", "out": "正規表現"}
{"in": "np.array([[d[str(i)], d[str(j)]] for i, j in A])", "out": "リスト内包記法 変換"}
{"in": "v1, v2, v3, v4 = [max(x, 0) for x in (A, B, C, D)]", "out": "リスト内包記法 変換"}
{"in": "df.where(~outliers_low, down_quantiles, axis=1)", "out": "反転演算子"}
{"in": "datetime.datetime(*d.timetuple()[:6])", "out": "引数展開"}
{"in": "myMethod(myVariable, *myTuple)", "out": "引数展開"}
{"in": "dict(x.split(':') for x in a)", "out": "辞書内包記法"}
{"in": "re.compile('(\\\\W+)').split('hello, foo')", "out": "正規表現"}
{"in": "fig.savefig('ax2_figure.png', bbox_inches=extent)", "out": "正規表現"}
{"in": "b = [list(x) for x in b_set]", "out": "リスト内包記法 変換"}
{"in": "x[-2::-1]", "out": "逆順の列"}
{"in": "return x ** 2 + 1", "out": "累乗演算子"}
{"in": "C = [[(0) for row in range(len(A))] for col in range(len(B[0]))]", "out": "リスト内包記法 変換"}
{"in": "[a['a'] for a in x1] == [b['a'] for b in x2]", "out": "リスト内包記法 変換"}
{"in": "return re.compile('\\\\w+').findall(text)", "out": "正規表現"}
{"in": "re.findall('\\\\b\\\\d\\\\d\\\\d\\\\d\\\\d\\\\b', 'Helpdesk-Agenten (m/w) Kennziffer: 12966')", "out": "正規表現"}
{"in": "return queryset.filter(**{'attributes__value': value})", "out": "引数展開"}
{"in": "my_dict = {k: [] for k in keys}", "out": "辞書内包記法"}
{"in": "lst_int = [int(x) for x in test.split('-')]", "out": "リスト内包記法 変換"}
{"in": "return super(MyResource, self).obj_update(bundle, **kwargs)", "out": "引数展開"}
{"in": "return math.sqrt((p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2)", "out": "累乗演算子"}
{"in": "d = {c: i for i, c in enumerate(ascii_lowercase, 1)}", "out": "辞書内包記法"}
{"in": "re.compile('|'.join(list_patterns))", "out": "正規表現 リストの文字列化"}
{"in": "aapl.index.to_series().diff().mean() / (60 * 60 * 10 ** 9)", "out": "累乗演算子"}
{"in": "\"\"\"\"\"\".join(random.choice('abcde') for _ in range(3))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[d[k] for k in lst]", "out": "リスト内包記法 変換"}
{"in": "print(myObject.myVar if hasattr(myObject, 'myVar') else 'not defined')", "out": "三項演算子"}
{"in": "[i for i, x in enumerate(t) if x]", "out": "リスト内包記法 フィルタ"}
{"in": "[(ord(x) % 32) for x in char2]", "out": "リスト内包記法 変換"}
{"in": "{'$where': 'function() { for (var i=0; i<1000000; i++) {}; return true; }'}", "out": "辞書内包記法"}
{"in": "Entry.objects.bulk_create([Entry(id=x) for x in list])", "out": "リスト内包記法 変換"}
{"in": "print('\\t'.join(nested_list))", "out": "リストの文字列化"}
{"in": "[e for l in lst for e in l]", "out": "リスト内包記法 変換"}
{"in": "return [y for y in listOfLists if y[x].isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('bus|cars|car|\\\\S', s)", "out": "正規表現"}
{"in": "sum(1 for _ in takewhile(lambda x: x == a[0], a))", "out": "リスト内包記法 変換"}
{"in": "[(x, y) for x, y, label in data_one]", "out": "リスト内包記法 変換"}
{"in": "time.strftime('%D %H:%M', time.localtime(int('1284101485')))", "out": "時刻書式"}
{"in": "hand = {k: v for k, v in hand.items() if v != 0}", "out": "辞書内包記法"}
{"in": "print('{0} {1} {2}'.format(*mystuff[x:x + 3]))", "out": "引数展開"}
{"in": "[[copy.deepcopy(foo) for x in range(10)] for y in range(10)]", "out": "リスト内包記法 変換"}
{"in": "dict((x1, (x0, x2)) for x0, x1, x2 in zip(x[:-2], x[1:-1], x[2:]))", "out": "辞書内包記法"}
{"in": "m = sqrt(a ** 2 + b ** 2)", "out": "累乗演算子"}
{"in": "re.sub(' \\\\(\\\\s+|\\\\s+\\\\)', lambda x: x.group().strip(), my_string)", "out": "正規表現"}
{"in": "x[index] if len(x) > index else default", "out": "三項演算子"}
{"in": "list(itertools.chain(*list(foo.values())))", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(t)", "out": "リストの文字列化"}
{"in": "list(min(x, y) for x, y in zip([1, 2, 3, 4], [0, 10, 0, 10]))", "out": "リスト内包記法 変換"}
{"in": "result = [numbers[i] for i in indices]", "out": "リスト内包記法 変換"}
{"in": "re.findall('imgurl=([^&]+)&', url)", "out": "正規表現"}
{"in": "result.append('\\n'.join(row_result))", "out": "リストの文字列化"}
{"in": "re.compile('\\\\d{3}')", "out": "正規表現"}
{"in": "User.query.filter_by(**kwargs)", "out": "引数展開"}
{"in": "file_writer.writerow([x[i] for x in lol])", "out": "リスト内包記法 変換"}
{"in": "[x['fileMod'] for x in fileList if x['fileName'] == 'filename2.typ'][0]", "out": "リスト内包記法 フィルタ"}
{"in": "[('XXX' if item == 'abc' else item) for item in mylist]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[sympy.diff(sum(m * m.T), i) for i in m]", "out": "リスト内包記法 変換"}
{"in": "soup.findAll(re.compile('^a$|(div)'))", "out": "正規表現"}
{"in": "all(0 < n < 50 for n in thetuple)", "out": "リスト内包記法 変換"}
{"in": "list_of_nums[:] = [x for x in list_of_nums if x != 2]", "out": "リスト内包記法 フィルタ"}
{"in": "sum([i for i in l1 if isinstance(i, int)])", "out": "リスト内包記法 フィルタ"}
{"in": "[[k, len(list(g))] for k, g in groupby(strs)]", "out": "リスト内包記法 変換"}
{"in": "print(''.join('{}_{}'.format(k, v) for k, v in r.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "ax1.set_yticks([int(j) for j in range(0, 4)])", "out": "リスト内包記法 変換"}
{"in": "f = lambda x, a=a: x ** a", "out": "累乗演算子"}
{"in": "re.sub('\\n*', '', yourstring)", "out": "正規表現"}
{"in": "zip(*filterer(list1, list2))", "out": "引数展開"}
{"in": "numpy.sqrt(numpy.sum((A - B) ** 2))", "out": "累乗演算子"}
{"in": "all(isinstance(e, int) and e > 0 for e in [1, 2, 'joe'])", "out": "リスト内包記法 変換"}
{"in": "re.findall('\\\\{(.+?)\\\\}', request.params['upsell'])", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(format(ord(c), '02x') for c in text)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\"{:.2f}\"\"\".format(1.679)", "out": "少数点表示制限"}
{"in": "print(''.join(c for c in s if c.islower()))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "lol = lambda lst, sz: [lst[i:i + sz] for i in range(0, len(lst), sz)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"{name} is a {adjective} {noun} that {verb}\"\"\".format(**locals())", "out": "引数展開"}
{"in": "p.update(**{'set__name': 'Hank', 'set__address': 'Far away'})", "out": "引数展開"}
{"in": "print('{:0>8.4f}'.format(2.02))", "out": "少数点表示制限"}
{"in": "[re.findall('\\\\w+|\\\\W+', s) for s in lst]", "out": "リスト内包記法 変換 正規表現"}
{"in": "a[~np.isnan(a).any(axis=1)]", "out": "反転演算子"}
{"in": "[(a.split('-', 1)[0], b) for a, b in sorted_x]", "out": "リスト内包記法 変換"}
{"in": "return [x for x in result.stdout.readlines() if 'Duration' in x]", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('(?<=>)(.+?)(?=<)', '<label>Olympic Games</label>')", "out": "正規表現"}
{"in": "text = re.sub('(get)', '\\\\1@', text)", "out": "正規表現"}
{"in": "result = set(d[0]).intersection(*d[:1])", "out": "引数展開"}
{"in": "print(re.findall('[^-]+-[^-]+', s))", "out": "正規表現"}
{"in": "sess.run(y, feed_dict={i: d for i, d in zip(inputs, data)})", "out": "辞書内包記法"}
{"in": "c = list(chain(*zip(a, b)))", "out": "引数展開"}
{"in": "a, b = [f()[k] for k in ('a', 'b')]", "out": "リスト内包記法 変換"}
{"in": "return re.sub('(-?\\\\d+)|(\\\\+1)', lambda m: str(int(m.group(0)) - 1), text)", "out": "正規表現"}
{"in": "return {k: v for k, v in d.items() if k.startswith(s)}", "out": "辞書内包記法"}
{"in": "(dict(x=x[ii], y=y[ii], z=z[ii]) for ii in range(10))", "out": "辞書内包記法"}
{"in": "res = [dict((k, None) for k in line) for line in l]", "out": "辞書内包記法"}
{"in": "s = map(sum, zip(*([s] * 2)))", "out": "引数展開"}
{"in": "[(x + y) for x, y in itertools.zip_longest('12345', 'ab', fillvalue='*')]", "out": "リスト内包記法 変換"}
{"in": "striped = [l.split() for l in [c.strip() for c in file_desc.readlines()] if l]", "out": "リスト内包記法 フィルタ"}
{"in": "print(', '.join(str(e) for e in s))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "df.columns = [('log(gdp)' if x == 'gdp' else x) for x in df.columns]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[x for t in a for x in t]", "out": "リスト内包記法 変換"}
{"in": "np.any([(x == i) for i in (2, 3)], axis=0)", "out": "リスト内包記法 変換"}
{"in": "plt.plot(*zip(*a))", "out": "引数展開"}
{"in": "'%.2f' % round(2606.89579999999, 2)", "out": "少数点表示制限"}
{"in": "list({v['id']: v for v in L}.values())", "out": "辞書内包記法"}
{"in": "myList[:] = [x for x in myList if x not in totoss]", "out": "リスト内包記法 フィルタ"}
{"in": "dt.datetime.strptime('30MAR1990', '%d%b%Y')", "out": "日付書式"}
{"in": "next(n for n in range(1000, 3, -1) if str(n) == str(n)[::-1] and is_prime(n))", "out": "リスト内包記法 フィルタ 逆順の列"}
{"in": "['%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y']", "out": "日付書式"}
{"in": "re.findall('\\\\w+', 'abc def g\\xc3\\xbci jkl', re.UNICODE)", "out": "正規表現"}
{"in": "Foobar.objects.filter(Q(blah=1) ^ Q(bar=2))", "out": "排他的論理和"}
{"in": "re.findall('.{1,2}', '123456789')", "out": "正規表現"}
{"in": "re.findall('..', '1234567890')", "out": "正規表現"}
{"in": "re.findall('..?', '123456789')", "out": "正規表現"}
{"in": "size = re.findall('\\\\d{1,3}(?:,\\\\d{3})*(?:\\\\.\\\\d+)?', my_string)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join('%3d' % num for num in nums)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "'\\u0430\\u0431\\u0432\\u0433\\u0434'", "out": "ユニコード"}
{"in": "[item for item in yourlist if item % 2]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\",\"\"\".join(L)", "out": "リストの文字列化"}
{"in": "return [int(i in locs) for i in range(size)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\", \"\"\".join(subdict['data3'] for subdict in list(maindict.values()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "\"\"\"|\"\"\".join(list(x.values()))", "out": "リストの文字列化"}
{"in": "[x for x in matrix if x[2] == 0.0]", "out": "リスト内包記法 フィルタ"}
{"in": "set(a[i] for i in range(1, len(a)) if a[i] == a[i - 1])", "out": "リスト内包記法 フィルタ"}
{"in": "re.escape('[') == '['", "out": "正規表現"}
{"in": "new_list = [dict((transform[k], v) for k, v in list(d.items())) for d in old_list]", "out": "辞書内包記法"}
{"in": "super(MainWindow, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "from functools import reduce\nreduce(lambda x, y: x + y * y, [l[:1][0] ** 2] + l[1:])", "out": "累乗演算子"}
{"in": "re.split('\\\\[|\\\\] *\\\\[?', s)[1:]", "out": "正規表現"}
{"in": "counter_list = [item for item in counter_list if item]", "out": "リスト内包記法 フィルタ"}
{"in": "print(s.strftime('%H:%M %d %B %Y (UTC)'))", "out": "日付書式 時刻書式"}
{"in": "exec('\\n'.join('%s=%r' % i for i in list(d.items())))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython')", "out": "ユニコード"}
{"in": "{p.id: {'id': p.id, 'position': i} for i, p in enumerate(p_list)}", "out": "辞書内包記法"}
{"in": "clean = [x for x in lis if x is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "figure.set_size_inches(8, 6)", "out": "正規表現"}
{"in": "print('e\\u0301a'[::-1])", "out": "ユニコード 逆順の列"}
{"in": "result = [x.decode('utf8') for x in proc.stdout.readlines()]", "out": "リスト内包記法 変換"}
{"in": "pua = re.compile('[\\ue000-\\uf8ff\\U000f0000-\\U000fffff\\U00100000-\\U0010ffff]')", "out": "正規表現 ユニコード"}
{"in": "[(a['a'] == b['a']) for a, b in zip(x1, x2)]", "out": "リスト内包記法 変換"}
{"in": "print([d.isoformat() for d in get_week(datetime.datetime.now().date())])", "out": "リスト内包記法 変換"}
{"in": "spam_list = [spam_list[i] for i in spam_order]", "out": "リスト内包記法 変換"}
{"in": "np.vstack({tuple(row) for row in a})", "out": "辞書内包記法"}
{"in": "l = L[1::2]", "out": "ひとつおきの列"}
{"in": "b = a[:, :, ::-1]", "out": "逆順の列"}
{"in": "[(a % 1) for a in l]", "out": "リスト内包記法 変換"}
{"in": "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())", "out": "日付書式 時刻書式"}
{"in": "[j for i in x for j in i]", "out": "リスト内包記法 変換"}
{"in": "return l[::-1]", "out": "逆順の列"}
{"in": "[t for t in mylist if t[0] == 10]", "out": "リスト内包記法 フィルタ"}
{"in": "d = Image.objects.filter(**{'image__endswith': 'jpg'})", "out": "引数展開"}
{"in": "isinstance(re.compile(''), re._pattern_type)", "out": "正規表現"}
{"in": "\"\"\"{0:15.2f}\"\"\".format(1464.1000000000001)", "out": "少数点表示制限"}
{"in": "new_list = [foo for foo in foos if foo.location == 2]", "out": "リスト内包記法 フィルタ"}
{"in": "[hex(ord(c)) for c in chars]", "out": "リスト内包記法 変換"}
{"in": "A = [operation(A[i], A[i + 1]) for i in range(len(A) - 1)]", "out": "リスト内包記法 変換"}
{"in": "return ''.join(i for i in s if ord(i) < 128)", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "len([i for i in a if i['Value'] == 'Blah'])", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\", \"\"\".join('\"{0}\"'.format(w) for w in words)", "out": "辞書内包記法 リストの文字列化"}
{"in": "my_dict = {x[0]: {k: v for k, v in zip(my_headers, x[1:])} for x in my_list}", "out": "辞書内包記法"}
{"in": "a, b, c, d = [x[i:i + step] for i in range(0, len(x), step)]", "out": "リスト内包記法 変換"}
{"in": "data.view(dtype=[(n, 'float64') for n in csv_names]).reshape(len(data))", "out": "リスト内包記法 変換"}
{"in": "print(datetime.datetime.strptime('2010-15-27', '%Y-%m-%d'))", "out": "日付書式"}
{"in": "re.findall('([A-Z][\\\\w-]*(?:\\\\s+[A-Z][\\\\w-]*)+)', article)", "out": "正規表現"}
{"in": "[m.start() for m in re.finditer('ab', s)][2]", "out": "リスト内包記法 変換 正規表現"}
{"in": "f(**arg_dict('a, b, c, d, e'))", "out": "引数展開"}
{"in": "[x for x in ['a', 'b', 'c', 'd', 'e'] if x not in ['b', 'c']]", "out": "リスト内包記法 フィルタ"}
{"in": "super(CacheMix, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[list(t) for t in zip(*l)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "res_list = [x for x, _ in rows]", "out": "リスト内包記法 変換"}
{"in": "s_datetime = datetime.datetime.strptime(s, '%Y%m%d')", "out": "日付書式"}
{"in": "[var for var in combinations([1, 2, 3, 4, 5], 3)]", "out": "リスト内包記法 変換"}
{"in": "[x for x in filter(lambda x: x not in ['b', 'c'], ['a', 'b', 'c', 'd', 'e'])]", "out": "リスト内包記法 変換"}
{"in": "list(object['value'] for object in test_data)", "out": "リスト内包記法 変換"}
{"in": "q = [[None for i in range(5)] for j in range(4)]", "out": "リスト内包記法 変換"}
{"in": "df.apply(lambda row: row[1] if row[0] > 0 else row[2], 1)", "out": "三項演算子"}
{"in": "set(a[i] for i in range(1, len(a)) if a[i] == a[i - 1])", "out": "リスト内包記法 フィルタ"}
{"in": "QtCore.QObject.__init__(self)", "out": "正規表現"}
{"in": "df.to_csv(filename, date_format='%Y-%m-%d')", "out": "日付書式"}
{"in": "return '\\n'.join(res)", "out": "リストの文字列化"}
{"in": "list(k for k, g in itertools.groupby(x for x in numbers if x != 0))", "out": "リスト内包記法 フィルタ"}
{"in": "[int(i) for i in x[num - n:num]]", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nresult = [reduce(lambda x, y: x + y, l) for l in a]", "out": "リスト内包記法 変換"}
{"in": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))", "out": "正規表現"}
{"in": "newList = [(x / myInt) for x in myList]", "out": "リスト内包記法 変換"}
{"in": "self.setWindowState(QtCore.Qt.WindowMinimized)", "out": "正規表現"}
{"in": "re.match('^org/(?P<company_name>\\\\w+)/?$', 'org/companyA').groupdict()", "out": "正規表現"}
{"in": "sorted((i, j) for i, j in zip(x, y))", "out": "リスト内包記法 変換"}
{"in": "myList = [item for item in data if item == 'number1']", "out": "リスト内包記法 フィルタ"}
{"in": "return '  '.join(input_string.split()) == input_string.strip()", "out": "リストの文字列化"}
{"in": "clusters = [X[labels == i] for i in range(n_clusters_)]", "out": "リスト内包記法 変換"}
{"in": "return f(*args, **kw)", "out": "引数展開"}
{"in": "return '%s and %s' % (', '.join(words[:-1]), words[-1])", "out": "リストの文字列化 末尾の要素"}
{"in": "[i for i in my_list if my_counter[i] > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "f = lambda x: x if x is not None else ''", "out": "三項演算子"}
{"in": "{'description': 'Some Description for the build'}", "out": "辞書内包記法"}
{"in": "\"\"\"\"\"\".join(c for c in s if c.islower())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "wx.Frame.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "arr = arr[:, :, ::2]", "out": "ひとつおきの列"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "np.array([int(i) for line in data for i in line.split()]).reshape((3, 6))", "out": "リスト内包記法 変換"}
{"in": "d.set_start_comment('Data for Class A')", "out": "リスト内包記法 変換"}
{"in": "weightMatrix = [{'A': 0, 'C': 0, 'G': 0, 'T': 0} for k in range(motifWidth)]", "out": "辞書内包記法"}
{"in": "m = [row for row in l if 'a' == row[0]]", "out": "リスト内包記法 フィルタ"}
{"in": "{t[0]: t[1:] for t in s}", "out": "辞書内包記法"}
{"in": "np.log(42 ** np.array([3, 4])) / np.log(42)", "out": "累乗演算子"}
{"in": "df['c'] = [a.join(b) for a, b in zip(df.a, df.b)]", "out": "リスト内包記法 変換"}
{"in": "print([v for v in simplex.vertices])", "out": "リスト内包記法 変換"}
{"in": "print(re.findall('\\\\A^.*\\\\.$', data, re.MULTILINE))", "out": "正規表現"}
{"in": "print(len('\\uc815\\uc815'.encode('UTF-32')))", "out": "ユニコード"}
{"in": "[sum(e) for e in zip(*data)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "C = [[(0) for col in range(len(B[0]))] for row in range(len(A))]", "out": "リスト内包記法 変換"}
{"in": "[i for i in range(10) if i == 9]", "out": "リスト内包記法 フィルタ"}
{"in": "d = dict(itertools.zip_longest(fillvalue='', *([iter(l)] * 2)))", "out": "引数展開"}
{"in": "re.sub('(\\\\w)([A-Z])', '\\\\1 \\\\2', 'WordWordWord')", "out": "正規表現"}
{"in": "s = re.sub(pattern2, ' ', s).strip()", "out": "正規表現"}
{"in": "print(type('\\u0646\\u0635 \\u0639\\u0631\\u0628\\u064a'))", "out": "ユニコード"}
{"in": "[random.random() for _ in range(100000)]", "out": "リスト内包記法 変換"}
{"in": "links = soup.findAll('a', {'id': re.compile('^c')})", "out": "正規表現"}
{"in": "new_foo = (item for item in foo if item % 3 != 0)", "out": "リスト内包記法 フィルタ"}
{"in": "versions_list.sort(key=lambda s: [int(u) for u in s.split('.')])", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join([c for c in subj if c not in sc])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "list_2 = [i for i in list_1 if isinstance(i, (int, float))]", "out": "リスト内包記法 フィルタ"}
{"in": "print(', '.join(repr(e) for e in LIST))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "reverse_dict = {value: keypath for keypath, value in keypaths(example_dict)}", "out": "辞書内包記法"}
{"in": "multi_line_word.setParseAction(lambda t: ''.join(t))", "out": "リストの文字列化"}
{"in": "np.fromiter((row[index] for row, index in zip(X, Y)), dtype=int)", "out": "リスト内包記法 変換"}
{"in": "sorted(l, key=lambda x: (x[:-1], x[-1].isdigit()))", "out": "末尾の要素"}
{"in": "print(single_date.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "return ''.join(reversed(result))", "out": "リストの文字列化"}
{"in": "m = re.search('//([^/]*)', str)\nprint(m.group(1))", "out": "正規表現"}
{"in": "return [item for item in theList if item in theDict]", "out": "リスト内包記法 フィルタ"}
{"in": "execute(secondSSH, hosts=[('notmmaley@%s:8101' % h) for h in env.hosts])", "out": "リスト内包記法 変換"}
{"in": "df.select(*[(count(c) / count('*')).alias(c) for c in df.columns]).show()", "out": "リスト内包記法 変換 引数展開"}
{"in": "numpy.array([[elem for elem in x_row] for x_row in X])", "out": "リスト内包記法 変換"}
{"in": "print([m.start(1) for m in matches])", "out": "リスト内包記法 変換"}
{"in": "re.sub('(\\\\d)([-+])', '\\\\1E\\\\2', number)", "out": "正規表現"}
{"in": "super(AuthorForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "some_class(*os.path.split(somefile))", "out": "引数展開"}
{"in": "re.sub('(.)(.)', '\\\\g<2>\\\\g<1>', s)", "out": "正規表現"}
{"in": "'Fizz' if i % 3 == 0 else ''", "out": "三項演算子"}
{"in": "list(chain(*(x.split(',') if ',' in x else x for x in lis)))", "out": "リスト内包記法 フィルタ 三項演算子 引数展開"}
{"in": "{{(variable | stringformat): '.3f'}}", "out": "少数点表示制限"}
{"in": "ordered = OrderedDict((k, mydict[k]) for k in myorder)", "out": "辞書内包記法"}
{"in": "uni = [k for k, v in a.items() if countMap[v] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "lowercase = [c for c in s if c.islower()]", "out": "リスト内包記法 フィルタ"}
{"in": "list(''.join(l + 'x' * (n % 3 == 2) for n, l in enumerate(letters)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "self.__dict__.update(*args, **kwargs)", "out": "引数展開"}
{"in": "return ''.join(chars[-i:])", "out": "リストの文字列化"}
{"in": "[a[i:i + 2] for i in range(0, len(a), 2)]", "out": "リスト内包記法 変換"}
{"in": "['{0:06}'.format(i) for i in range(1000000) if sum(map(int, str(i))) == 20]", "out": "辞書内包記法"}
{"in": "[_f for _f in lst if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "[y for x in list(d.values()) for y in x]", "out": "リスト内包記法 変換"}
{"in": "sorted([(0, 0, 0, int(random.getrandbits(4))) for x in range(10)])", "out": "リスト内包記法 変換"}
{"in": "d = {t[0]: t[1:] for t in arr}", "out": "辞書内包記法"}
{"in": "re.findall('(.{6}|.+$)', 'Four score and seven years ago.')", "out": "正規表現"}
{"in": "x, y, z = (v + 2 for v in l)", "out": "リスト内包記法 変換"}
{"in": "s = re.sub('(?<! )(?=[.,!?()])|(?<=[.,!?()])(?! )', ' ', s)", "out": "正規表現"}
{"in": "word1 = ' '.join(re.findall('[a-zA-Z]+', st))", "out": "正規表現 リストの文字列化"}
{"in": "[y for x in zip_longest(l1, l2) for y in x if y is not None]", "out": "リスト内包記法 フィルタ"}
{"in": "time.strptime('2009-09-09 16:26:57', '%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "ids = [t['id'] for t in json['test'] if t['description'] == 'Test 1']", "out": "リスト内包記法 フィルタ"}
{"in": "[tuple(zip(*x)) for x in lst]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[a.index(item) for item in b]", "out": "リスト内包記法 変換"}
{"in": "return map(lambda x: x ** 2, list)", "out": "累乗演算子"}
{"in": "\"\"\"{:,.2f}\"\"\".format(num).replace('.', '%').replace(',', '.').replace('%', ',')", "out": "少数点表示制限"}
{"in": "new_list = [f(x) for x in it.takewhile(lambda x: condition(x), l)]", "out": "リスト内包記法 変換"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "super(Match, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "pattern = re.compile('^/(?:\\\\\\\\.|[^/\\\\\\\\])*/')", "out": "正規表現"}
{"in": "[i[0] for i in list(zip(listOfTuples, bools)) if i[1] == True]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('({{.*?}})(?:\\\\Z|\\\\s+)', OUTPUT)", "out": "正規表現"}
{"in": "re.search('\\\\$.', str(p)).group(0)", "out": "正規表現"}
{"in": "H = dict(line.strip().split('=') for line in open('filename.txt'))", "out": "辞書内包記法"}
{"in": "data.append([int(v) for v in line.split()])", "out": "リスト内包記法 変換"}
{"in": "s = 'cat goose  mouse horse pig cat cow'\nre.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)", "out": "正規表現"}
{"in": "s = 'cat goose  mouse horse pig cat cow'\nre.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)", "out": "正規表現"}
{"in": "pat = re.compile('[a-f]+\\\\d+')", "out": "正規表現"}
{"in": "a = re.sub('This.*ok', '', a, flags=re.DOTALL)", "out": "正規表現"}
{"in": "max(re.findall('g+', 'fggfggggfggfg'), key=len)", "out": "正規表現"}
{"in": "print('{:10s} {:3d} \\xc2\\xa0{:7.2f}'.format('zz', 42, 123.34))", "out": "少数点表示制限"}
{"in": "return '{} and {}'.format(', '.join(lst[:-1]), lst[-1])", "out": "リストの文字列化 末尾の要素"}
{"in": "[b for a in ((x, -x) for x in range(1, 10 + 1)) for b in a]", "out": "リスト内包記法 変換"}
{"in": "[item for item in my_list if any(x in item for x in bad)]", "out": "リスト内包記法 フィルタ"}
{"in": "[{'type': k, 'items': v} for k, v in list(res.items())]", "out": "辞書内包記法"}
{"in": "postcodes = re.findall('[A-Z]{1,2}[0-9R]?[0-9A-Z]? [0-9][A-Z]{2}', content)", "out": "正規表現"}
{"in": "print(' '.join(get_words(['\\u0bae', '\\u0baa', '\\u0b9f', '\\u0bae\\u0bcd'])))", "out": "ユニコード リストの文字列化"}
{"in": "csv_writer.writerow([x for x in line])", "out": "リスト内包記法 変換"}
{"in": "print([len(x) for x in partition(list(range(105)), 10)])", "out": "リスト内包記法 変換"}
{"in": "result = ['_'.join((i, j)) for i, j in zip(la, itertools.cycle(lb))]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('@\\\\w+', my_replace, string)", "out": "正規表現"}
{"in": "lines = [line for line in open('/some/file') if random() >= 0.5]", "out": "リスト内包記法 フィルタ"}
{"in": "func(*args, **kwargs)", "out": "引数展開"}
{"in": "return [(i, sublist.index(item)) for i, sublist in enumerate(list)]", "out": "リスト内包記法 変換"}
{"in": "[v for k, v in d.items() if k not in (2, 5)]", "out": "リスト内包記法 フィルタ"}
{"in": "filtered_list = list([x for x in input_list if x % 2 == 0])", "out": "リスト内包記法 フィルタ"}
{"in": "print('{0}*10^({1})'.format(*item))", "out": "引数展開"}
{"in": "data = np.array([float(f) for f in file(filename).read().split()])", "out": "リスト内包記法 変換"}
{"in": "result = [r for r in x if all(z not in r for z in y)]", "out": "リスト内包記法 フィルタ"}
{"in": "any(kidname == row[ct] for row in csv.reader(file))", "out": "リスト内包記法 変換"}
{"in": "\"\"\",\"\"\".join(map(str, numbers))", "out": "リストの文字列化"}
{"in": "[[int(i) for i in line.split()] for line in data]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"<b>\"\"\".join(s.split('/b'))", "out": "リストの文字列化"}
{"in": "sum(1 for _ in itertools.takewhile(str.isspace, a))", "out": "リスト内包記法 変換"}
{"in": "test.reshape(-1, 2)[::2].reshape(-1, 4)", "out": "ひとつおきの列"}
{"in": "[x for x in foo if not 2 == x.get('id')]", "out": "リスト内包記法 フィルタ"}
{"in": "nf.write(''.join(str(random.randint(0, 1000)) for _ in range(1000000)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return tuple(sum(z) for z in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "aa = dict([(k, d[k]) for k in f])", "out": "辞書内包記法"}
{"in": "return sum(strat(line) for line in f)", "out": "リスト内包記法 変換"}
{"in": "linkstodomain = SoupStrainer('a', href=re.compile('example.com/'))", "out": "正規表現"}
{"in": "[x[0] for x in listD[1]]", "out": "リスト内包記法 変換"}
{"in": "return control_char_re.sub('', s)", "out": "正規表現"}
{"in": "result = [a for a in A if a not in subset_of_A]", "out": "リスト内包記法 フィルタ"}
{"in": "help(re.compile(''))", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join(format(x, 'b') for x in bytearray(st))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[(x * y) for x, y in zip(lis[0], cyc)]", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('(?![\\\\d_])\\\\w', 'X', 'df\\xc3\\xa4g'))", "out": "正規表現"}
{"in": "title_year = [(i['title'], i['year']) for i in movie_dicts]", "out": "辞書内包記法"}
{"in": "re.findall('\\\\{date:.*\\\\}(?=\\\\{)', str)", "out": "正規表現"}
{"in": "re.sub('url(#[0-9]+|$)', 'new_url\\\\1', test2)", "out": "正規表現"}
{"in": "return all(word[i + 1] >= word[i] for i in range(len(word) - 1))", "out": "リスト内包記法 変換"}
{"in": "print([s.strip('8') for s in lst])", "out": "リスト内包記法 変換"}
{"in": "return [m.group(0) for m in matches]", "out": "リスト内包記法 変換"}
{"in": "print(''.join(e[0] for e in x.split()))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "func = lambda s: [(t * 2 + s * 2) for t in range(1, 100)]", "out": "リスト内包記法 変換"}
{"in": "newData = np.array([d[:4] for d in data])", "out": "リスト内包記法 変換"}
{"in": "df = df.loc[:, (~df.columns.duplicated())]", "out": "反転演算子"}
{"in": "timestamp = int(time.mktime(time.strptime(date, '%d.%m.%Y %H:%M:%S')))", "out": "日付書式 時刻書式"}
{"in": "return re.search('id(\\\\d+)', toParse).groups()[0]", "out": "正規表現"}
{"in": "re.findall('[a-zA-Z]+(?![a-zA-Z(])', 'movav(x/2, 2)*movsum(y, 3)*z')", "out": "正規表現"}
{"in": "test(x, *['one', 'two'])", "out": "引数展開"}
{"in": "[[w for w in L if len(w) == num] for num in set(len(i) for i in L)]", "out": "リスト内包記法 フィルタ"}
{"in": "file2.write(','.join(buffer))", "out": "リストの文字列化"}
{"in": "links = [rel.get_accessor_name() for rel in a._meta.get_all_related_objects()]", "out": "リスト内包記法 変換"}
{"in": "result_list = [elements[i] for i in indices]", "out": "リスト内包記法 変換"}
{"in": "dictget = lambda d, *k: [d[i] for i in k]", "out": "辞書内包記法 引数展開"}
{"in": "test_file.write(','.join([str(j) for j in write_row]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.sub('([A-Z])\\\\1', lambda pat: pat.group(1).lower(), s)", "out": "正規表現"}
{"in": "L4 = [item for item in L1 if item not in unwanted]", "out": "リスト内包記法 フィルタ"}
{"in": "pd.DataFrame(list(zip(*someTuple)), columns=['Bird', 'BirdCount'])", "out": "引数展開"}
{"in": "sum(x > i for i in x)", "out": "リスト内包記法 変換"}
{"in": "{i: words.count(i) for i in set(words)}", "out": "辞書内包記法"}
{"in": "return sum((doSomething(x) for x in originalList), [])", "out": "リスト内包記法 変換"}
{"in": "return re.findall('\\\\d{2}:\\\\d{2}(?:am|pm)', text, re.I)", "out": "正規表現"}
{"in": "return [([0] * cols) for x in range(rows)]", "out": "リスト内包記法 変換"}
{"in": "[pair for pair in itertools.combinations(li, 2) if sum(pair) == 10]", "out": "リスト内包記法 フィルタ"}
{"in": "print(max(max(x) if isinstance(x, list) else x for x in my_list))", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "any(s.startswith('three') for s in test_list)", "out": "リスト内包記法 変換"}
{"in": "(s.iloc[::2].values + s.iloc[1::2]) / 2", "out": "ひとつおきの列"}
{"in": "p.dumps(re.compile('a*b+c*x+y*'))", "out": "正規表現"}
{"in": "d = {k: [] for k in keys}", "out": "辞書内包記法"}
{"in": "stack[-1]", "out": "末尾の要素"}
{"in": "[i for i in range(10) if i not in digits]", "out": "リスト内包記法 フィルタ"}
{"in": "print([m.start() for m in re.finditer('\\\\btest and\\\\b', a)])", "out": "リスト内包記法 変換 正規表現"}
{"in": "messages = re.split('(?:(?:\\xff){8})+', payload)", "out": "正規表現"}
{"in": "last = df.index[-1]", "out": "末尾の要素"}
{"in": "[item for item in re.split('(\\\\*)', '*abc*bbc') if item]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "result = ''.join(tmp[::-1])", "out": "リストの文字列化 逆順の列"}
{"in": "return itertools.chain(*lists)", "out": "引数展開"}
{"in": "text2_re = re.sub('(\\\\d+)/(\\\\d+)/(\\\\d+)', '\\\\3-\\\\1-\\\\2', text2)", "out": "正規表現"}
{"in": "return ''.join(sorted(diff.elements()))", "out": "リストの文字列化"}
{"in": "contained = [x for x in d if x in paid[j]]", "out": "リスト内包記法 フィルタ"}
{"in": "zeroMatrix = [([0] * Np) for i in range(Np)]", "out": "リスト内包記法 変換"}
{"in": "[i for i in zip(narrative, subject, activity, filer)]", "out": "リスト内包記法 変換"}
{"in": "df.drop([col for col in ['column_name1', 'column_name2']], axis=1)", "out": "リスト内包記法 変換"}
{"in": "return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))", "out": "リスト内包記法 変換"}
{"in": "strip_accents('A \\xc0 \\u0394 \\u038e')", "out": "ユニコード"}
{"in": "{l['n'] for l in lst}", "out": "辞書内包記法"}
{"in": "seq_iter = x if isinstance(x, dict) else range(len(x))", "out": "三項演算子"}
{"in": "[t.parent for t in x.findAll(text='price')]", "out": "リスト内包記法 変換"}
{"in": "print(' '.join('(\"%s\" %d)' % c for c in counts if c[0] not in ' \\t\\n'))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "a[np.argpartition(-a, np.arange((~np.isnan(a)).sum()))]", "out": "反転演算子"}
{"in": "\"\"\"\"\"\".join('%*s' % i for i in zip(widths, items))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "next(v for k, v in list(my_dict.items()) if 'c' in k)", "out": "辞書内包記法"}
{"in": "super(MyDateField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "x, y = map(list, zip(*[(e, -e) for e in range(10)]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "[p[0] for p in datapoints[0:5]]", "out": "リスト内包記法 変換"}
{"in": "re.sub(pattern, '', txt)", "out": "正規表現"}
{"in": "print(re.search('[a-zA-Z]+', string))", "out": "正規表現"}
{"in": "print('%02i,%02i,%05.2f' % (3, 4, 5.66))", "out": "少数点表示制限"}
{"in": "print(Temperature.value)", "out": "正規表現"}
{"in": "result = [x for x in orig if x]", "out": "リスト内包記法 フィルタ"}
{"in": "mylist[:] = (i for i in mylist if i != '')", "out": "リスト内包記法 フィルタ"}
{"in": "all(a != b for a, b in itertools.combinations(['a', 'b', 'c', 'd'], 2))", "out": "リスト内包記法 変換"}
{"in": "my_dictionary = dict(line.split() for line in f)", "out": "辞書内包記法"}
{"in": "ans = [i for i in xy if i[1] > 0]", "out": "リスト内包記法 フィルタ"}
{"in": "[len(max(i, key=len)) for i in tableData]", "out": "リスト内包記法 変換"}
{"in": "[int(s[x[1]:x[2]]) for x in parser.parse(s)[1]]", "out": "リスト内包記法 変換"}
{"in": "response = re.search('^(http://)?(www\\\\.)?(vimeo\\\\.com/)?(\\\\d+)', embed_url)", "out": "正規表現"}
{"in": "out = [(1 if num & 1 << 7 - n else 0) for n in range(8)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "re.sub('([^\\\\s\\\\w]|_)+', '', origList)", "out": "正規表現"}
{"in": "re.findall('\\\\b([a-zA-Z]\\\\S{8}\\\\d)\\\\b', txt)", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(str_list)", "out": "リストの文字列化"}
{"in": "\"\"\"\"\"\".join(sorted(set(foo), key=foo.index))", "out": "リストの文字列化"}
{"in": "my_array = np.array(map(lambda x: numpy.nan if x == None else x, my_list))", "out": "三項演算子"}
{"in": "\"\"\" \"\"\".join([item.replace(' ', '') for item in shlex.split(text)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "df[[col for col in list('bcd') if col in df.columns]]", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(c if c.isalnum() else ' ' for c in text).split()", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "[(i ** 2) for i in l]", "out": "リスト内包記法 変換 累乗演算子"}
{"in": "sorted([0, 0, 0, 1, 2, 3, 4], key=lambda x: x if x != 0 else float('inf'))", "out": "三項演算子"}
{"in": "\"\"\"{:%m/%d/%Y}\"\"\".format(dt)", "out": "日付書式"}
{"in": "users_list = [int(x) for x in users_list]", "out": "リスト内包記法 変換"}
{"in": "p = [(i + 1) for i, (x, y) in enumerate(zip(a, a[1:])) if x > y]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.findall('(nn\\\\d+)', st)[-1])", "out": "正規表現 末尾の要素"}
{"in": "min(double(x) for x in [1, 2, 3])", "out": "リスト内包記法 変換"}
{"in": "list(k for k, _ in itertools.groupby(k))", "out": "リスト内包記法 変換"}
{"in": "re.sub('(^|\\\\s)(\\\\S)', repl_func, s)", "out": "正規表現"}
{"in": "df.loc[~(df == 0).all(axis=1)]", "out": "反転演算子"}
{"in": "max(len(list(y)) for c, y in itertools.groupby(my_str) if c == 'b')", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x, v in enumerate(str) if v == '|']", "out": "リスト内包記法 フィルタ"}
{"in": "A = [([None] * x) for i in range(y)]", "out": "リスト内包記法 変換"}
{"in": "return QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled", "out": "正規表現"}
{"in": "zzz = '\\\\u0101'", "out": "ユニコード"}
{"in": "re.findall('[^aeiou]+', 'concertation')", "out": "正規表現"}
{"in": "forms.ModelForm.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "print(list(product(*with_nones)))", "out": "引数展開"}
{"in": "A[np.arange(A.shape[0]), A.shape[1] - 1 - (A[:, ::-1] != 0).argmax(1)] = 0", "out": "逆順の列"}
{"in": "print(','.join('(%s,%s)' % tup for tup in myList))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print('{}, {}'.format(item, 1 if item in List else 0))", "out": "三項演算子"}
{"in": "next((x for x in lst if matchCondition(x)), None)", "out": "リスト内包記法 フィルタ"}
{"in": "[x for x in collection]", "out": "リスト内包記法 変換"}
{"in": "my_item = next((item for item in my_list if item['id'] == my_unique_id), None)", "out": "リスト内包記法 フィルタ"}
{"in": "tuples = [tuple([_f for _f in t.strip('()').strip().split(',') if _f]) for t in input]", "out": "リスト内包記法 フィルタ"}
{"in": "df_new1, df_new2 = df[:10, :], df[10:, :] if len(df) > 10 else df, None", "out": "三項演算子"}
{"in": "s = ''.join(l)", "out": "リストの文字列化"}
{"in": "2 ** np.arange(m)", "out": "累乗演算子"}
{"in": "foo(*(v1, v2, v3))", "out": "引数展開"}
{"in": "[(2 ** i) for i, v in enumerate(bin(109)[:1:-1]) if int(v)][::-1]", "out": "リスト内包記法 フィルタ 逆順の列 累乗演算子"}
{"in": "output = [{'name': k, 'playing': list(v)} for k, v in list(merged.items())]", "out": "辞書内包記法"}
{"in": "dic = dict([(x, y) for x, y in list(dic.items()) if not x.startswith('s_')])", "out": "辞書内包記法"}
{"in": "datetime.strftime(datetime.now() - timedelta(1), '%Y-%m-%d')", "out": "日付書式"}
{"in": "matched = np.array(list(set(arrays[0]).intersection(*arrays[1:])))", "out": "引数展開"}
{"in": "dates.dt.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "\"\"\"\"\"\".join([c for c in a if c in '1234567890.'])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "\"\"\", \"\"\".join('%s=%s' % pair for pair in zip(a, b))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return min([val for obj in ids for key, val in list(obj.items()) if key == 'id'])", "out": "リスト内包記法 フィルタ"}
{"in": "sum(1 for x in frequencies if x > 0)", "out": "リスト内包記法 フィルタ"}
{"in": "return len([_f for _f in a_list if _f]) > 0", "out": "リスト内包記法 フィルタ"}
{"in": "x if x is not None else some_value", "out": "三項演算子"}
{"in": "magnitudes = np.sqrt((vectors ** 2).sum(-1))[..., (np.newaxis)]", "out": "累乗演算子"}
{"in": "yticks[-1].set_visible(False)", "out": "末尾の要素"}
{"in": "User.objects.create_user(**data)", "out": "引数展開"}
{"in": "b = [(n >> i & 1) for i in range(7, -1, -1)]", "out": "リスト内包記法 変換"}
{"in": "input('Press <Enter> for more')", "out": "リスト内包記法 変換"}
{"in": "{k: (d.get(k, '') + d1.get(k, '')) for k in keys}", "out": "辞書内包記法"}
{"in": "B = [i for i in A]", "out": "リスト内包記法 変換"}
{"in": "info = data[:75] + '..' if len(data) > 75 else data", "out": "三項演算子"}
{"in": "super(MyModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "os.path.join(*choices[:-1])", "out": "引数展開"}
{"in": "[tuple(y for y in x if y) for x in a]", "out": "リスト内包記法 フィルタ"}
{"in": "somedict = {x: (1) for x in somelist}", "out": "辞書内包記法"}
{"in": "print(', '.join(names))", "out": "リストの文字列化"}
{"in": "next(i for i, j in enumerate(lst) if j)", "out": "リスト内包記法 フィルタ"}
{"in": "any(re.search('\\\\d{4}', s) for s in lst)", "out": "辞書内包記法 正規表現"}
{"in": "list(set(tuple(sorted(s)) for s in all_the_ways))", "out": "リスト内包記法 変換"}
{"in": "[(b.index(x) + 1 if x in b else None) for x in a]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "datetime.strptime(datestr, '%m/%d/%Y %H:%M')", "out": "日付書式 時刻書式"}
{"in": "print(re.sub('(\\\\b\\\\w+)(\\\\s+\\\\1\\\\b)+', '\\\\1', 'hello     there      there'))", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(filter(str.isdigit, '+123-456-7890'))", "out": "リストの文字列化"}
{"in": "[x for i, x in enumerate(myList) if i not in toRemove]", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join([(c if c.isalnum() else '*') for c in s]))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "re.match('[^[]*\\\\[([^]]*)\\\\]', yourstring).groups()[0]", "out": "正規表現"}
{"in": "location_out = [', '.join(locations[n:]) for n in range(len(locations))]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[name for name in names if 'aet' in name]", "out": "リスト内包記法 フィルタ"}
{"in": "print(sum(i == 1 for i in flatten_list(x)))", "out": "リスト内包記法 変換"}
{"in": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))", "out": "正規表現"}
{"in": "print('{:.6s}'.format('{:0.4f}'.format(n)))", "out": "少数点表示制限"}
{"in": "b = np.array([list(word) for word in a])", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\s|-', text)", "out": "正規表現"}
{"in": "output.write(bytearray(int(i, 16) for i in yoursequence))", "out": "リスト内包記法 変換"}
{"in": "super(Child, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "matches = [m.span() for m in re.finditer(pattern, text)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "data.sort(key=lambda x: sorted(tally[i] for i in x))", "out": "リスト内包記法 変換"}
{"in": "{x: (x + 6) for x in range(1, 5)}", "out": "辞書内包記法"}
{"in": "\"\"\" - spam ham and eggs - \"\"\".join(l)", "out": "リストの文字列化"}
{"in": "all(x > limit for x in my_list)", "out": "リスト内包記法 変換"}
{"in": "Image(filename='data/empire.jpg')", "out": "正規表現"}
{"in": "return all(getattr(self, key) == val for key, val in list(kwargs.items()))", "out": "リスト内包記法 変換"}
{"in": "a[:, ::2] + a[:, 1::2]", "out": "ひとつおきの列"}
{"in": "print('The abbreviation for %s is %s.' % (key, value))", "out": "リスト内包記法 変換"}
{"in": "b = [(n >> i & 1) for i in range(0, n.bit_length() - 1)]", "out": "リスト内包記法 変換"}
{"in": "print([n.tolist() for n in diags])", "out": "リスト内包記法 変換"}
{"in": "pattern = re.compile('/(\\\\w+)\\\\.mp3$')", "out": "正規表現"}
{"in": "{tuple(x) for x in l1} & {tuple(x) for x in l2}", "out": "辞書内包記法"}
{"in": "[(fname, hashlib.md5(open(fname, 'rb').read()).digest()) for fname in fnamelst]", "out": "リスト内包記法 変換"}
{"in": "re.search('\\\\[\\\\[([^\\\\]|]*)(?=.*\\\\]\\\\])', '[[aaabbb]]').group(1)", "out": "正規表現"}
{"in": "re.split('[\\u200b\\\\s]+', 'some string', flags=re.UNICODE)", "out": "正規表現 ユニコード"}
{"in": "alist = [row for row in alist if 2 not in row]", "out": "リスト内包記法 フィルタ"}
{"in": "splitlists = [mylist[i:i + n] for i in range(0, len(mylist), n - 1)]\nsplitlists[-1].append(splitlists[0][0])", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "'@' + 'blahblah@gmail.com'.split('@')[-1]", "out": "末尾の要素"}
{"in": "new_df = pd.DataFrame({'class': [j for i in repeated_items for j in i]})", "out": "辞書内包記法"}
{"in": "new_dict = dict((k, v) for k, v in dict.items() if k in list)", "out": "辞書内包記法"}
{"in": "'Cyrillic and \\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439'", "out": "ユニコード"}
{"in": "re.search('(?u)\\\\by\\\\b', '\\xc3\\xbcy\\xc3\\xbc')", "out": "正規表現"}
{"in": "zip(*([iter(x)] * 3))", "out": "引数展開"}
{"in": "return sum(functools.reduce(operator.mul, data) for data in zip(*lists))", "out": "リスト内包記法 変換 引数展開"}
{"in": "return [(i, lst.count(i)) for i in set(lst)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('blah', lambda m, i=iter('123'): next(i), 'blah blah blah')", "out": "正規表現"}
{"in": "tuple(re.findall('\\\\{([^{}]+)\\\\}', s))", "out": "正規表現"}
{"in": "return sum(i for i in range(a, b + 1) if i % 2 == 0)", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(random.sample(s, 10))", "out": "リストの文字列化"}
{"in": "str = re.sub('(&[a-zA-Z])', '%(\\\\1)s', str)", "out": "正規表現"}
{"in": "print(re.sub('(.{64})', '\\\\1\\n', s, 0, re.DOTALL))", "out": "正規表現"}
{"in": "[x for x in x if x[id] == 20]", "out": "リスト内包記法 フィルタ"}
{"in": "ordered_dictionary = [OrderedDict(zip(names, subl)) for subl in list_of_lists]", "out": "辞書内包記法"}
{"in": "print(' '.join(to_search[NAME]))", "out": "リストの文字列化"}
{"in": "2 ** 2 ** numpy.arange(5)", "out": "累乗演算子"}
{"in": "re.findall('{([^{}]*)}', '{a} { {b} c { {d} } }')", "out": "正規表現"}
{"in": "A[::-1, :]", "out": "逆順の列"}
{"in": "print('{foo}'.format(**locals()))", "out": "引数展開"}
{"in": "\"\"\"{0}^{{{1:+03}}}\"\"\".format(*frexp10(-1234000000.0))", "out": "引数展開"}
{"in": "pd.value_counts(list(chain(*df.categories.values.tolist())))", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join(' '.join(x) for x in merged)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(any(l[i:i + len(pat)] == pat for i in range(len(l) - len(pat) + 1)))", "out": "リスト内包記法 変換"}
{"in": "s += ' '.join(str(a[i, j, k].imag))", "out": "リストの文字列化"}
{"in": "re.findall('this is (\\\\d+) the string (\\\\d+) that, i need (\\\\d+)', s)", "out": "正規表現"}
{"in": "result = 'function (%s)' % ', '.join(map(str, args))", "out": "リストの文字列化"}
{"in": "re.sub('(.*)iss', '\\\\1XXX', myStr)", "out": "正規表現"}
{"in": "[x for x in lis if x > 2]", "out": "リスト内包記法 フィルタ"}
{"in": "files = [f for f in os.listdir(dirToScreens) if path.isfile(f)]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.search('\\\\d.*[A-Z]|[A-Z].*\\\\d', x))", "out": "正規表現"}
{"in": "[random.randrange(1, 10) for _ in range(0, 4)]", "out": "リスト内包記法 変換"}
{"in": "print(eval('+'.join(lines)))", "out": "リストの文字列化"}
{"in": "[i for i in Records if i['Price'] != 0]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(1 for i in x if i)", "out": "リスト内包記法 フィルタ"}
{"in": "[l[i:i + n] for i in range(0, len(l), n)]", "out": "リスト内包記法 変換"}
{"in": "re.search('a{1,65535}', 'aaa')", "out": "正規表現"}
{"in": "print(', '.join(row))", "out": "リストの文字列化"}
{"in": "super(waypointForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[a for a, b in zip(aa, bb) if a == b]", "out": "リスト内包記法 フィルタ"}
{"in": "datetime.strptime('2011-05-25T20:34:05.787Z', '%Y-%m-%dT%H:%M:%S.%fZ')", "out": "日付書式 時刻書式"}
{"in": "sum(i for i, j in enumerate(s, 1) if j == 'A')", "out": "リスト内包記法 フィルタ"}
{"in": "a = [[1, 2, 3], [4, 5, 6]]\nzip(*a)", "out": "引数展開"}
{"in": "[s[i:i + 2] for i in range(0, len(s), 2)]", "out": "リスト内包記法 変換"}
{"in": "any(x[1:] == x[:-1] for x in zip(*arr))", "out": "リスト内包記法 変換 引数展開"}
{"in": "int(''.join(s.split()), 16)", "out": "リストの文字列化"}
{"in": "\"\"\", \"\"\".join(str(e) for e in s)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "re.findall('\\\\b[a-zA-Z]+\\\\b(?!\\\\()', 'movav(x/2, 2)*movsum(y, 3)*z')", "out": "正規表現"}
{"in": "raise ValueError('Non increasing matches for a')", "out": "リスト内包記法 変換"}
{"in": "print('{0:<10} {1:>8} {2:>8}'.format(*args))", "out": "引数展開"}
{"in": "[''.join(x) for x in product(*(d[y] for y in seq))]", "out": "リスト内包記法 変換 引数展開 リストの文字列化"}
{"in": "my_int_list = [int(v) for v in open('myfile.txt').read().split()]", "out": "リスト内包記法 変換"}
{"in": "{i: a[i] for i in np.nonzero(a)[0]}", "out": "辞書内包記法"}
{"in": "return [i.strip() for i in txt.split(default_sep)]", "out": "リスト内包記法 変換"}
{"in": "l2 = zip(l1[0::2], l1[1::2])", "out": "ひとつおきの列"}
{"in": "[a['b']['c'][key]['answer'] for key in list(a['b']['c'].keys())]", "out": "リスト内包記法 変換"}
{"in": "newD = dict(zip(list(d.keys()), [round(v) for v in list(d.values())]))", "out": "辞書内包記法"}
{"in": "key = ''.join(chr(x) for x in [19, 0, 0, 0, 8, 0])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return int(t[0], 2) + int(t[1], 2) / 2.0 ** len(t[1])", "out": "累乗演算子"}
{"in": "print([(int(i) + 1) for i in s.split()])", "out": "リスト内包記法 変換"}
{"in": "print('>' + '\\n'.join(pair))", "out": "リストの文字列化"}
{"in": "fig.savefig('ax2_figure.png', bbox_inches=extent)", "out": "正規表現"}
{"in": "array2 = [i for i in array2 if i not in array1]", "out": "リスト内包記法 フィルタ"}
{"in": "[i for sublist in zip_longest(*a) for i in sublist if i is not None]", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "[['-'.join((min(a, b), max(a, b))) for b in shops if b != a] for a in shops]", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "return func(self, *args, **kwargs)", "out": "引数展開"}
{"in": "[os.path.join(root, *choices[:i + 1]) for i in range(len(choices))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "np.savetxt('test.txt', ab, fmt='%10s %10.3f')", "out": "少数点表示制限"}
{"in": "all(i in list(a3.f.items()) for i in list(L[0].f.items()))", "out": "リスト内包記法 変換"}
{"in": "df.columns = [str(i) for i in df.columns.values.tolist()]", "out": "リスト内包記法 変換"}
{"in": "super(MyModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "x[::2, 1::2]", "out": "ひとつおきの列"}
{"in": "print([i for i in range(len(list)) if list[i] == '\\n'])", "out": "リスト内包記法 フィルタ"}
{"in": "[a[i] for i in np.argsort(a)[-2:]]", "out": "リスト内包記法 変換"}
{"in": "[(ord(x) % 32) for x in char1[0]]", "out": "リスト内包記法 変換"}
{"in": "[substring.strip() for substring in string.split(',')]", "out": "リスト内包記法 変換"}
{"in": "string_val = ''.join(choice(lowercase) for i in range(n))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "time.strptime(example, '%Y-%m-%dT%H:%M:%S.%fZ')", "out": "日付書式 時刻書式"}
{"in": "feature3 = [d.get('Feature3') for d in a]", "out": "リスト内包記法 変換"}
{"in": "[x for x, _ in lst]", "out": "リスト内包記法 変換"}
{"in": "dict1.update([(key, dict2[key]) for key in list(dict2.keys())])", "out": "辞書内包記法"}
{"in": "int_list = map(int, re.findall('\\\\d+', data))", "out": "正規表現"}
{"in": "re.sub('\\\\s', '', string).split(',')", "out": "正規表現"}
{"in": "with open('words.txt') as f:\n    [line.split() for line in f]", "out": "リスト内包記法 変換"}
{"in": "x, y = zip(*[l.split() for l in f])", "out": "リスト内包記法 変換 引数展開"}
{"in": "print(' '.join(get_words(['o', 'c', 'a', 't'])))", "out": "リストの文字列化"}
{"in": "return ''.join(digits)", "out": "リストの文字列化"}
{"in": "first_elements, second_elements = map(list, zip(*data))", "out": "引数展開"}
{"in": "key_precedence = dict((x, n) for n, x in enumerate(string_list))", "out": "辞書内包記法"}
{"in": "[tuple(x) for x in data_set.to_records(index=False)]", "out": "リスト内包記法 変換"}
{"in": "re.findall('[a]', 'abcd')\nre.findall('[^a]', 'abcd')", "out": "正規表現"}
{"in": "m = re.search('^(.*?)(?:Arguments:(.*?))?(?:Returns:(.*?))?$', doc, re.DOTALL)", "out": "正規表現"}
{"in": "[j for i in sequence_list for j in rex.split(i)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)", "out": "正規表現"}
{"in": "[(my_array + [i]) for i in input_elements]", "out": "リスト内包記法 変換"}
{"in": "dt.strftime('%Y%m%d')", "out": "日付書式"}
{"in": "a = [[(0) for _ in range(ROWS)] for _ in range(COLUMNS)]", "out": "リスト内包記法 変換"}
{"in": "print([f for f in glob.glob('/tmp/*') if os.path.isfile(f)])", "out": "リスト内包記法 フィルタ"}
{"in": "[(x ** 2) for x in range(10) if x < 7]", "out": "リスト内包記法 フィルタ 累乗演算子"}
{"in": "configfiles = glob.glob('C:\\\\Users\\\\sam\\\\Desktop\\\\**\\\\*.txt', recursive=True)", "out": "ユニコード"}
{"in": "return ' '.join(reversed(out))", "out": "リストの文字列化"}
{"in": "[x for x in lst if float(x.split()[-1]) not in s]", "out": "リスト内包記法 フィルタ 末尾の要素"}
{"in": "sentence = re.sub('\\\\bbean\\\\b', 'robert', sentence)", "out": "正規表現"}
{"in": "print(occs['\\u013a'])", "out": "ユニコード"}
{"in": "[(y if y not in b else other_value) for y in a]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "driver.execute_script('arguments[0].scrollIntoView();', reviews[-1])", "out": "末尾の要素"}
{"in": "\"\"\"\"\"\".join(l)", "out": "リストの文字列化"}
{"in": "any([2, 3] == v[i:i + 2] for i in range(len(v) - 1))", "out": "リスト内包記法 変換"}
{"in": "measure.grid(row=0, column=0)", "out": "正規表現"}
{"in": "'Demo (\\xac \\u0394\\u03b7\\u03bc\\u03ce)'", "out": "ユニコード"}
{"in": "value = next(v for i, v in enumerate(d.values()) if i == index)", "out": "リスト内包記法 フィルタ"}
{"in": "somestring = re.sub(' rec$', '', somestring)", "out": "正規表現"}
{"in": "{x[0] for x in list1} & {y[0] for y in list2}", "out": "辞書内包記法"}
{"in": "int(mylist[0][0]) if mylist[0][0].strip() else 0", "out": "三項演算子"}
{"in": "example = [[x.replace('\\r\\n', '') for x in l] for l in example]", "out": "リスト内包記法 変換"}
{"in": "print(re.sub('(?s)(.)(?=\\\\1)', '', 'aabbccaabb'))", "out": "正規表現"}
{"in": "f = lambda X, model, **kw: cost(X, model, sparse=np.random.rand(10, 10), **kw)", "out": "引数展開"}
{"in": "print('\\n'.join(matches))", "out": "リストの文字列化"}
{"in": "alphs = ''.join(chr(i) for i in range(97, 123))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "f.write(struct.pack('2i', *array.shape))", "out": "引数展開"}
{"in": "title = re.search('<title>(.*)</title>', html, re.IGNORECASE).group(1)", "out": "正規表現"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "df.columns = [x.lower().replace(' ', '_') for x in df.columns]", "out": "リスト内包記法 変換"}
{"in": "new_list = [sorted(sublist, key='*/+-'.index) for sublist in my_lists]", "out": "リスト内包記法 変換"}
{"in": "appdata = path.expanduser(path.join('~', '.' + APPNAME))", "out": "反転演算子"}
{"in": "super(Form, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "ax1.tick_params(axis='x', **tkw)", "out": "引数展開"}
{"in": "[(x + y) for x, y in grouper(2, q)]", "out": "リスト内包記法 変換"}
{"in": "{(x, y) for x in r for y in r if x + 2 == y}", "out": "辞書内包記法"}
{"in": "[([0] * 8) for x in range(8)]", "out": "リスト内包記法 変換"}
{"in": "array2 = [int(x == 4) for x in array1]", "out": "リスト内包記法 変換"}
{"in": "max(item[1] for item in alkaline_earth_values)", "out": "リスト内包記法 変換"}
{"in": "numbers = [n for n in numbers if n >= 20]", "out": "リスト内包記法 フィルタ"}
{"in": "next(i for i, j in enumerate(a) if j.startswith('a'))", "out": "リスト内包記法 フィルタ"}
{"in": "[(next(z) if i < 0 else i) for i in y]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "equation1(**dict_of_parameters)", "out": "引数展開"}
{"in": "[(x, y) for x, y in zip(it, it1)]", "out": "リスト内包記法 変換"}
{"in": "re.sub('url((?:#[0-9]+)?)', 'new_url\\\\1', test1)", "out": "正規表現"}
{"in": "[k for k in l if 'Derived: ' in k]", "out": "リスト内包記法 フィルタ"}
{"in": "result += [(g.start(), g.group()) for g in re.compile('AB').finditer(string)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "1 if ssf.type == 'Full' else 2 if ssf.type == 'Full (Instrumental)' else 3 if ssf.type == 'Shorts' else 4 if ssf.type == 'Loops' else 5 if ssf.type == 'Stems' else 0", "out": "三項演算子"}
{"in": "re.search(re.escape(stringB) + '(.*?)' + re.escape(stringC), stringA).group(1)", "out": "正規表現"}
{"in": "os.system('echo \" foo\" >> /Users/bob/foostore.txt')", "out": "正規表現"}
{"in": "QtGui.QTableView.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "print('\\n'.join(map(''.join, zip(*grid))))", "out": "引数展開 リストの文字列化"}
{"in": "[((x + (x - 1)) / 2) for x in list_of_nums]", "out": "リスト内包記法 変換"}
{"in": "[i for i in itertools.chain(*itertools.zip_longest(l1, l2)) if i is not None]", "out": "リスト内包記法 フィルタ 引数展開"}
{"in": "result = [key for key, value in dict.items() if value == min_value]", "out": "辞書内包記法"}
{"in": "[x for x in ['a', 'b', 'c', 'd', 'e'] if x not in ['b', 'c']]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(struct.pack('>B', x) for x in vals)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "next((e for e in mylist if my_criteria(e)), None)", "out": "リスト内包記法 フィルタ"}
{"in": "[v[0] for v in sorted(list(dict.items()), key=lambda k_v: (-k_v[1], k_v[0]))]", "out": "辞書内包記法"}
{"in": "any((myrow1 == x).all() for x in myarray)", "out": "リスト内包記法 変換"}
{"in": "ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y.%m.%d'))", "out": "日付書式"}
{"in": "return [y for y in listOfLists if y[x].lstrip('-').isdigit()]", "out": "リスト内包記法 フィルタ"}
{"in": "date.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "print('{0:<25} ${1:.2f}'.format(t, v))", "out": "少数点表示制限"}
{"in": "y = [i[j] for i in x for j in range(len(i))]", "out": "リスト内包記法 変換"}
{"in": "return first_type if all(type(x) is first_type for x in iseq) else False", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "any(t.isupper() for t in month[1:])", "out": "リスト内包記法 変換"}
{"in": "[s[sum(keys[:i]):sum(keys[:i]) + k] for i, k in enumerate(keys)]", "out": "リスト内包記法 変換"}
{"in": "return list([x for x in mylist if x in pattern])", "out": "リスト内包記法 フィルタ"}
{"in": "sum(i * j for i, j in zip(v1, v2))", "out": "リスト内包記法 変換"}
{"in": "plt.rc('legend', **{'fontsize': 6})", "out": "引数展開"}
{"in": "sorted(list(structure.keys()), key=lambda x: structure[x]['sorting'])", "out": "正規表現"}
{"in": "s = sum(b for a, b in zip(list_1, list_2) if a)", "out": "リスト内包記法 フィルタ"}
{"in": "print('%.2f' % x)", "out": "少数点表示制限"}
{"in": "tup = tuple((element.foo, element.bar) for element in alist)", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(re.findall(pattern, 'HDMWhoSomeMONKEYThingX')))", "out": "正規表現 リストの文字列化"}
{"in": "params = {arg: self.request.get_all(arg) for arg in self.request.arguments()}", "out": "辞書内包記法"}
{"in": "return '\\n'.join([' '.join((a, b)) for a, b in zip(list1, list2)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict(list(i.items())[0] for i in L)", "out": "辞書内包記法"}
{"in": "print('\\t'.join(row))", "out": "リストの文字列化"}
{"in": "print([x for x in re.split('(\\\\*)', x) if x])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "timeit.Timer('[str(x) for x in range(100)]').timeit()", "out": "リスト内包記法 変換"}
{"in": "timeString += time.strftime(\"%H'%M'\", time.gmtime(abs(timezone)))", "out": "時刻書式"}
{"in": "result = [dict(item, elem='value') for item in myList]", "out": "辞書内包記法"}
{"in": "e = [x[0] for x in eagles]", "out": "リスト内包記法 変換"}
{"in": "[key for key, group in groupby(li) if len(tuple(group)) == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "[(val, np.sum(A[B == val])) for val in np.unique(B)]", "out": "リスト内包記法 変換"}
{"in": "return {k: v for k, v in list(dictionary.items()) if begin <= k <= end}", "out": "辞書内包記法"}
{"in": "cleaned = [i for i in (word.strip() for word in words) if i]", "out": "リスト内包記法 フィルタ"}
{"in": "print('{:>8} {:>8} {:>8}'.format(*words))", "out": "引数展開"}
{"in": "lambda a, b: b * a(a, b - 1) if b > 0 else 1, b", "out": "三項演算子"}
{"in": "return [list(s) for s in sets]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join([j for i, j in enumerate(foo) if j not in foo[:i]])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "result = [dict(item, **{'elem': 'value'}) for item in myList]", "out": "辞書内包記法 引数展開"}
{"in": "re.sub('(e)', 'ub\\\\1', 'speak')", "out": "正規表現"}
{"in": "[(x + 1 if x >= 45 else x + 5) for x in l]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "\"\"\"\"\"\".join([_f for _f in re.split('(?:\\\\s*(\".*?\")\\\\s*)|[ ]', s) if _f])", "out": "リスト内包記法 フィルタ 正規表現 リストの文字列化"}
{"in": "rc('font', **{'family': 'sans-serif', 'sans-serif': ['Helvetica']})", "out": "引数展開"}
{"in": "print([x for x in words if len(x) > average])", "out": "リスト内包記法 フィルタ"}
{"in": "{k: v for k, v in zip(list(range(1, 5)), list(range(7, 11)))}", "out": "辞書内包記法"}
{"in": "super(ClientForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "self.setWindowFlags(QtCore.Qt.Tool)", "out": "正規表現"}
{"in": "print([x for x in a if counts[x] >= 2])", "out": "リスト内包記法 フィルタ"}
{"in": "mList = [(int(e) if e.isdigit() else e) for e in mStr.split(',')]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "DATA = [['5', '1'], ['5', '5'], ['3', '1'], ['6', '1'], ['4', '3']]\nd = [list(map(int, x)) for x in DATA]", "out": "リスト内包記法 変換"}
{"in": "print(dict(s.split('=') for s in my_list))", "out": "辞書内包記法"}
{"in": "print(''.join(char if char in string.printable else ' ' for char in s))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "return super(MyModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)", "out": "引数展開"}
{"in": "func('arg', 'arg2', *(('some value',) if condition == True else ()))", "out": "三項演算子 引数展開"}
{"in": "lst[:] = [v for v in lst if pred(v)]", "out": "リスト内包記法 フィルタ"}
{"in": "return [x for x in L if not any(set(x) <= set(y) for y in L if x is not y)]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.sub(\"[^\\\\w\\\\d'\\\\s]+\", '', sentence))", "out": "正規表現"}
{"in": "n[:] = [[(b - 1) for b in a] for a in n]", "out": "リスト内包記法 変換"}
{"in": "formattedList = [('%.2f' % member) for member in theList]", "out": "リスト内包記法 変換 少数点表示制限"}
{"in": "j2 = [i for i in j if i >= 5]", "out": "リスト内包記法 フィルタ"}
{"in": "return ' '.join([word[::-1] for word in sentence.split()])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "all(v is None for v in l)", "out": "リスト内包記法 変換"}
{"in": "print('\\u2603')", "out": "ユニコード"}
{"in": "print(float(re.sub('^\\\\((.*?)\\\\)$', '-\\\\1', a).replace(',', '')))", "out": "正規表現"}
{"in": "re.sub('(?<=sentence=\")(.*)(?=\" />)', lambda m: m.group().replace('\"', \"'\"), s)", "out": "正規表現"}
{"in": "return [{'text': text, 'tokens': text.split()} for i, text in enumerate(texts)]", "out": "辞書内包記法"}
{"in": "print([obj.name for obj in gc.get_objects() if isinstance(obj, potions)])", "out": "リスト内包記法 フィルタ"}
{"in": "return QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled", "out": "正規表現"}
{"in": "print('{x:.2f}'.format(x))", "out": "少数点表示制限"}
{"in": "csv_writer.writerow([i[0] for i in cursor.description])", "out": "リスト内包記法 変換"}
{"in": "values = [max(x, 0) for x in values]", "out": "リスト内包記法 変換"}
{"in": "[x[0] for x in listD[0]]", "out": "リスト内包記法 変換"}
{"in": "mylist[:] = [(not x) for x in mylist]", "out": "リスト内包記法 変換"}
{"in": "c = [item for t in zip(a, b) for item in t]", "out": "リスト内包記法 変換"}
{"in": "ordered = [item for item in ordered if item in unordered]", "out": "リスト内包記法 フィルタ"}
{"in": "[OrderedDict(row) for i, row in df.iterrows()]", "out": "リスト内包記法 変換"}
{"in": "print(''.join(sorted(x)))", "out": "リストの文字列化"}
{"in": "list(myBigList[i] for i in [87, 342, 217, 998, 500])", "out": "リスト内包記法 変換"}
{"in": "yield line[:-1] + line[-1].split('\\t')", "out": "末尾の要素"}
{"in": "[sum(int(c) for c in str(num)) for num in list1]", "out": "リスト内包記法 変換"}
{"in": "splitre = re.compile('\\\\s*(?:,(?![^()]*\\\\))|\\\\bwith\\\\b|\\\\band\\\\b)\\\\s*')", "out": "正規表現"}
{"in": "return len(alist) - alist[-1::-1].index(value) - 1", "out": "逆順の列"}
{"in": "s.replace('||', '~').replace('|', '').replace('~', '|')", "out": "反転演算子"}
{"in": "re.sub('(0x[\\\\da-fA-F]+)|(\\\\d+)', '[0-9]', a)", "out": "正規表現"}
{"in": "'%.2f' % 1.679", "out": "少数点表示制限"}
{"in": "re.match('^org/(?P<company_name>\\\\w+)/?$', 'org/companyA')", "out": "正規表現"}
{"in": "return [i for i in range(len(bv)) if bv[i]]", "out": "リスト内包記法 フィルタ"}
{"in": "re.search('world', testString)", "out": "正規表現"}
{"in": "plt.text(0.05, 0.9, '\\\\underline{Parameters}: ', fontsize=12)", "out": "ユニコード"}
{"in": "[x for x in l if 'ab' in x]", "out": "リスト内包記法 フィルタ"}
{"in": "result = re.sub(regex, subst, file_contents)", "out": "正規表現"}
{"in": "[random.shuffle(x) for x in workList]", "out": "リスト内包記法 変換"}
{"in": "pi = (a + b) ** 2 / (4 * t)", "out": "累乗演算子"}
{"in": "return [(s[i], i) for i in indices]", "out": "リスト内包記法 変換"}
{"in": "user_list = User.objects.filter(**kwargs).order_by('last_name')", "out": "引数展開"}
{"in": "re.findall('\\\\d+[a-z]+\\\\d+([a-z]+)', s, re.I)", "out": "正規表現"}
{"in": "found = any(word in line.split() for line in file)", "out": "リスト内包記法 変換"}
{"in": "print(''.join(sorted(x)))", "out": "リストの文字列化"}
{"in": "'value2' in (item for sublist in mylist for item in sublist)", "out": "リスト内包記法 変換"}
{"in": "print(repr(test), bool(re.match('[A-Za-z]\\\\w*\\\\Z', test)))", "out": "正規表現"}
{"in": "return [seq[i:i + n] for i in range(len(seq) - n + 1)]", "out": "リスト内包記法 変換"}
{"in": "h = {k: v for k, v in l}", "out": "辞書内包記法"}
{"in": "[len(list(group)) for key, group in groupby(a)]", "out": "リスト内包記法 変換"}
{"in": "1 - residual / sum((y - y.mean()) ** 2)", "out": "累乗演算子"}
{"in": "re.match('(?![\\\\d.]*([\\\\d.])[\\\\d.]*\\\\1)^[\\\\d.]+$', str_number).group(0)", "out": "正規表現"}
{"in": "\"\"\" \"\"\".join(format(ord(x), 'b') for x in st)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return all(x <= y for x, y in zip(L, L[1:]))", "out": "リスト内包記法 変換"}
{"in": "m = re.search('(?<=//)[^/]*', str)\nprint(m.group())", "out": "正規表現"}
{"in": "return ((a[:, (np.newaxis), :] - v) ** 2).sum(axis=-1).min(axis=0).sum()", "out": "累乗演算子"}
{"in": "list(x for x in string.letters if x in (y for y in 'BigMan on campus'))", "out": "リスト内包記法 フィルタ"}
{"in": "[RNA[i:i + 3] for i in range(position, len(RNA) - 2, 3)]", "out": "リスト内包記法 変換"}
{"in": "[index[start:end] for start, end in zip(slices[::2], slices[1::2])]", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "print(next(val for key, val in my_dict.items() if key.startswith('Date')))", "out": "辞書内包記法"}
{"in": "f.write(' '.join(('whatever', str(var2), 'etc')))", "out": "リストの文字列化"}
{"in": "uniq_animal_groups = [list(t) for t in set(map(tuple, animal_groups))]", "out": "リスト内包記法 変換"}
{"in": "(1 for i in x if 60 < i < 70)", "out": "リスト内包記法 フィルタ"}
{"in": "myStr[::-1].replace('iss'[::-1], 'XXX'[::-1], 1)[::-1]", "out": "逆順の列"}
{"in": "print(' '.join(x))", "out": "リストの文字列化"}
{"in": "[m.group() for m in re.finditer('((\\\\w)\\\\2)+', 'committee')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "ax.set_xticklabels([t.get_text().split('T')[0] for t in ax.get_xticklabels()])", "out": "リスト内包記法 変換"}
{"in": "-(a + b) + (sin(+x + y) + z ** 2) * 4 / 365.12 - h", "out": "累乗演算子"}
{"in": "[j() for j in [(lambda i=i: i) for i in range(10)]]", "out": "リスト内包記法 変換"}
{"in": "[y for x in data for y in x]", "out": "リスト内包記法 変換"}
{"in": "datetime.strptime('2012-may-31 19:00', '%Y-%b-%d %H:%M')", "out": "日付書式 時刻書式"}
{"in": "M = np.column_stack((x ** 2, x, np.ones_like(x)))", "out": "累乗演算子"}
{"in": "return [item for item in mylist if item[0][0] == letter]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(1 if item.get('one', False) is True else 0 for item in list(tadas.values()))", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "print(''.join(node.findAll(text=True)))", "out": "リストの文字列化"}
{"in": "len(regex.findall('\\\\X', 'A\\u0332\\u0305BC'))", "out": "ユニコード"}
{"in": "np.sort(data, order='f1')[-5:][::-1]", "out": "逆順の列"}
{"in": "all(e == a[0] for e in a)", "out": "リスト内包記法 変換"}
{"in": "return next(x for x in (f(y) for f in hundreds) if x)", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join([etree.tostring(child) for child in root.iterdescendants()]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[item for item in ('a', 'b', 'c')]", "out": "リスト内包記法 変換"}
{"in": "np.dot(2 ** np.arange(3), flags)", "out": "累乗演算子"}
{"in": "print(str(n)[::-1])", "out": "逆順の列"}
{"in": "b = [(n >> i & 1) for i in range(n.bit_length() - 1, -1, -1)]", "out": "リスト内包記法 変換"}
{"in": "[sorted(item, key=priority.get) for item in my_lists]", "out": "リスト内包記法 変換"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return zip(*[(lst[i:] + lst[:i]) for i in range(n)])", "out": "リスト内包記法 変換 引数展開"}
{"in": "print([(x - i) for i, x in enumerate(a)])", "out": "リスト内包記法 変換"}
{"in": "dict(zip(l[::2], l[1::2]))", "out": "ひとつおきの列"}
{"in": "result = [r[0] for r in result]", "out": "リスト内包記法 変換"}
{"in": "any([(x[1:] == x[:-1]) for x in zip(*arr)])", "out": "リスト内包記法 変換 引数展開"}
{"in": "return [k for k, n in Counter(seq).items() if n == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "paras = [''.join(x.findAll(text=True)) for x in span.findAllNext('p')]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "indices = [i for i, x in enumerate(myList) if re.search(regex, x)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "[t.parent for t in x.findAll(text='price') if t.parent.name == 'th']", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join(str(x) for x in This))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return pd.read_csv(f, **kwargs)", "out": "引数展開"}
{"in": "print(sorted(iter(counter.items()), key=lambda x: x[::-1]))", "out": "逆順の列"}
{"in": "vectors /= np.sqrt((vectors ** 2).sum(-1))[..., (np.newaxis)]", "out": "累乗演算子"}
{"in": "[x for x in (k.replace('\\n', '').strip() for k in foo) if x]", "out": "リスト内包記法 フィルタ"}
{"in": "{k: v for k, v in list(dict.items()) if v > something}", "out": "辞書内包記法"}
{"in": "[k for k, g in groupby(data)]", "out": "リスト内包記法 変換"}
{"in": "names = [name for name in names if name[-5:] != 'Smith']", "out": "リスト内包記法 フィルタ"}
{"in": "my_func(*arr.T)", "out": "引数展開"}
{"in": "sum(map(len, [s for s in x if len(s) > 1]))", "out": "リスト内包記法 フィルタ"}
{"in": "df.columns = df.columns.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "Color(*Color2.as_list())", "out": "引数展開"}
{"in": "[i for i in '1111']", "out": "リスト内包記法 変換"}
{"in": "(t.text + ''.join(map(etree.tostring, t))).strip()", "out": "リストの文字列化"}
{"in": "combined = [item for sublist in lists for item in sublist]", "out": "リスト内包記法 変換"}
{"in": "[i for i, j in zip(count(), ['foo', 'bar', 'baz']) if j == 'foo']", "out": "リスト内包記法 フィルタ"}
{"in": "application = django.core.handlers.wsgi.WSGIHandler()", "out": "正規表現"}
{"in": "[int(d) for d in file.split('-')]", "out": "リスト内包記法 変換"}
{"in": "len(regex.findall('\\\\X', '\\u200c'))", "out": "ユニコード"}
{"in": "print(re.search('(\\\\d)(\\\\d+?)(?=\\\\1)', testString).group(0))", "out": "正規表現"}
{"in": "func(*args, **kwargs)", "out": "引数展開"}
{"in": "nonspace = re.compile('(\\\\S+)')", "out": "正規表現"}
{"in": "[f(a) for f in funcs for a in args]", "out": "リスト内包記法 変換"}
{"in": "re.match('Run.*\\\\.py$')", "out": "正規表現"}
{"in": "print(datetime.datetime.strptime('Apr 14, 2016 9:59:54', '%b %d, %Y %I:%M:%S'))", "out": "日付書式"}
{"in": "super(DynamicModelSerializer, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "tup = tuple([(element.foo, element.bar) for element in alist])", "out": "リスト内包記法 変換"}
{"in": "a[:] = [s.strip() for s in a]", "out": "リスト内包記法 変換"}
{"in": "A[[[-1], [0], [1]], [2, 3, 4]] += np.ones((3, 3))", "out": "末尾の要素"}
{"in": "return '\\n'.join([p.products for p in obj.product.all()])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "sum(1 for x in gen)", "out": "リスト内包記法 変換"}
{"in": "print(['{:0.2f}'.format(x) for x in a])", "out": "辞書内包記法 少数点表示制限"}
{"in": "[i for i in a if i not in b]", "out": "リスト内包記法 フィルタ"}
{"in": "[(x + y) for x, y in zip('12345', 'ab')]", "out": "リスト内包記法 変換"}
{"in": "soup.find_all('tr', class_=re.compile('colour blue.+'))", "out": "正規表現"}
{"in": "d.strftime('%b %d,%Y')", "out": "日付書式"}
{"in": "print(list('^'.join(mystring.lower())))", "out": "リストの文字列化"}
{"in": "data = [tuple(line) for line in csv.reader(f)]", "out": "リスト内包記法 変換"}
{"in": "a.reshape(-1, 100)[::2].ravel()", "out": "ひとつおきの列"}
{"in": "new_r = dict((k, v) for k, v in r.items() if v is not None)", "out": "辞書内包記法"}
{"in": "value = next(v for k, v in some_dict.items() if 'substring' in k)", "out": "辞書内包記法"}
{"in": "print(dict(re.findall('\"([^\"]*)\"\\\\s*:\\\\s*\"([^\"]*)\"', my_string)))", "out": "正規表現"}
{"in": "[myfunc(a, b) for a, b in zip(data[::2], data[1::2])]", "out": "リスト内包記法 変換 ひとつおきの列"}
{"in": "s = 'fre\\xf8\\u032f\\u032fnt'\nprint(s.encode('unicode_escape'))", "out": "ユニコード"}
{"in": "name = next(name for name, value in list(vars(Status).items()) if value == 1)", "out": "リスト内包記法 フィルタ"}
{"in": "table = [row.strip().split('\\t') for row in file]", "out": "リスト内包記法 変換"}
{"in": "[key for key, grp in itertools.groupby([1, 2, 2, 3])]", "out": "リスト内包記法 変換"}
{"in": "re.split('[^A-Za-z ]|  ', 'My string is #not very beautiful')[0].strip()", "out": "正規表現"}
{"in": "re.split('[^A-Za-z ]|  ', 'this is the last  example')[0].strip()", "out": "正規表現"}
{"in": "{key: data[key] for key in one_by_ip}", "out": "辞書内包記法"}
{"in": "tomorrow = twtomorrow.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "return max(i[0] for i in oceans[regcode - 1])", "out": "リスト内包記法 変換"}
{"in": "return tuple(tryint(x) for x in re.split('([0-9]+)', s))", "out": "リスト内包記法 変換 正規表現"}
{"in": "set([x for x in l if l.count(x) > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "next((item for item in dicts if item['name'] == 'Pam'))", "out": "辞書内包記法"}
{"in": "buf = ''.join(str(random.randint(0, 1000)) for j in range(1000))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "map(''.join, itertools.product(*((c.upper(), c.lower()) for c in 'Fox')))", "out": "リスト内包記法 変換 引数展開"}
{"in": "re.findall('\\\\d+|$', '')[0]", "out": "正規表現"}
{"in": "first2pairs = {k: mydict[k] for k in sorted(mydict.keys())[:2]}", "out": "辞書内包記法"}
{"in": "df['Col3'] = df['Col2'].map(lambda x: 42 if x > 1 else 55)", "out": "三項演算子"}
{"in": "return ''.join(dec)", "out": "リストの文字列化"}
{"in": "re.sub('(?!-)\\\\W', ' ', 'black#white')", "out": "正規表現"}
{"in": "s = ','.join(itertools.chain(*li))", "out": "引数展開 リストの文字列化"}
{"in": "[a[i:i + 3] for i in range(0, len(a), 3)]", "out": "リスト内包記法 変換"}
{"in": "plt.rcParams['text.latex.preamble'] = ['\\\\usepackage{xcolor}']", "out": "ユニコード"}
{"in": "zip(*data)", "out": "引数展開"}
{"in": "bc = 'on' if c.page == 'blog' else 'off'", "out": "三項演算子"}
{"in": "[int(x.group()) for x in re.finditer('\\\\d+', string1)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "answer = sum(float(i) for i in equation.split('+'))", "out": "リスト内包記法 変換"}
{"in": "return any(i.isdigit() for i in string)", "out": "リスト内包記法 変換"}
{"in": "return sum(s[i:].startswith(subs) for i in range(len(s)))", "out": "リスト内包記法 変換"}
{"in": "answer = [len(item) for item in re.findall('1+', test_string)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "return len([x for x in myList if x in myDict]) > 0", "out": "リスト内包記法 フィルタ"}
{"in": "writer.writerows(row.split() for row in infile)", "out": "リスト内包記法 変換"}
{"in": "print({k: [d[k] for d in dd if k in d] for k in all_keys})", "out": "辞書内包記法"}
{"in": "plt.hist(np.clip(values_A, bins[0], bins[-1]), bins=bins)", "out": "末尾の要素"}
{"in": "new_string = ''.join(re.findall('\\\\d+', s))", "out": "正規表現 リストの文字列化"}
{"in": "lst[:] = [word for words in lst for word in words.split()]", "out": "リスト内包記法 変換"}
{"in": "return min(x for x in list_of_nums if x is not None)", "out": "リスト内包記法 フィルタ"}
{"in": "return -abs(x) ** (1 / 3)", "out": "累乗演算子"}
{"in": "df = df[~df['User Name'].str.contains('(?:DA|PL)$')]", "out": "反転演算子"}
{"in": "[x for y in l for x in y]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(map(str, range(10)))", "out": "リストの文字列化"}
{"in": "print('\\n-----\\n'.join(tokenizer.tokenize(data)))", "out": "リストの文字列化"}
{"in": "itertools.chain(*([i] * i for i in range(1, 5)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "\"\"\"\"\"\".join([c for c in a if c.isdigit() or c == '.'])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "mySet = {x[0] for x in TUPLES}", "out": "辞書内包記法"}
{"in": "v = int(float(s)) if int(float(s)) == float(s) else float(s)", "out": "三項演算子"}
{"in": "id_map = {k: v for v, k in enumerate(df.phone_no.unique(), 1)}", "out": "辞書内包記法"}
{"in": "re.sub('^((.*?cat.*?){2})cat', '\\\\1Bull',\n    'cat goose  mouse horse pig cat foo cat cow')", "out": "正規表現"}
{"in": "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(p.create_time()))", "out": "日付書式 時刻書式"}
{"in": "distances = np.sqrt((x - x0) ** 2 + (y - y0) ** 2 + (z - z0) ** 2)", "out": "累乗演算子"}
{"in": "return [int(i) for i in bin(x)[2:]]", "out": "リスト内包記法 変換"}
{"in": "plot_data = [[] for _ in positions]", "out": "リスト内包記法 変換"}
{"in": "print(',\\t'.join(map(str, row)))", "out": "リストの文字列化"}
{"in": "a = np.array([np.array(list()) for _ in y])", "out": "リスト内包記法 変換"}
{"in": "def textOf(soup):\n    return ''.join(soup.findAll(text=True))", "out": "リストの文字列化"}
{"in": "print(re.search('\\\\S+(?=\\\\n)', line).group())", "out": "正規表現"}
{"in": "re.findall('\\\\w+[.]\\\\w+(?=@)', s)", "out": "正規表現"}
{"in": "[seen[c] for c in list]", "out": "リスト内包記法 変換"}
{"in": "throwaway = datetime.datetime.strptime('20110101', '%Y%m%d')", "out": "日付書式"}
{"in": "print('{0:.2f}'.format(f))", "out": "少数点表示制限"}
{"in": "print(''.join('{:02x}'.format(x) for x in array_alpha))", "out": "辞書内包記法 リストの文字列化"}
{"in": "re.split('\\\\t+', strs)", "out": "正規表現"}
{"in": "\"\"\", \"\"\".join(b)", "out": "リストの文字列化"}
{"in": "a[-1]", "out": "末尾の要素"}
{"in": "[x for x in ls if ls.count(x) == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "r.plot(rpy2.robjects.Formula('c3~c2'), data)", "out": "反転演算子"}
{"in": "ones = [x for x in l if x[1] == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "list(itertools.chain(*l2))", "out": "引数展開"}
{"in": "print(re.sub('([\\\\\" \\\\\\'])', '\\\\\\\\\\\\1', 'it\\'s \"this\"'))", "out": "正規表現"}
{"in": "out = [l for l in out if l]", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join(lst).lower().count(letter))", "out": "リストの文字列化"}
{"in": "(x[i:j] for i, j in itertools.combinations(range(len(x) + 1), 2))", "out": "リスト内包記法 変換"}
{"in": "return [i for i, j in zip(x, y) if i == j]", "out": "リスト内包記法 フィルタ"}
{"in": "any(x == 'a' for x, y in seq_of_tups)", "out": "リスト内包記法 変換"}
{"in": "Fractions = {'\\xbc': 0.25, '\\xbd': 0.5, '\\xbe': 0.75, '\\u2155': 0.2}", "out": "ユニコード"}
{"in": "max(max(p[1:]) for p in PlayerList)", "out": "リスト内包記法 変換"}
{"in": "date.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "[chunk for chunk in line.split() if not chunk.endswith(':')]", "out": "リスト内包記法 フィルタ"}
{"in": "aa = [d[k] for k in f]", "out": "リスト内包記法 変換"}
{"in": "newdict = {k: olddict[k] for k in goodkeys}", "out": "辞書内包記法"}
{"in": "[i for i in range(1000) if i % 3 == 0 or i % 5 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "sorted(l, key=lambda x: int(''.join(filter(str.isdigit, x))))", "out": "リストの文字列化"}
{"in": "return [x[0] for x in G]", "out": "リスト内包記法 変換"}
{"in": "result = [y for y in (expensive(x) for x in mylist) if y]", "out": "リスト内包記法 フィルタ"}
{"in": "objects = ndb.get_multi([ndb.Key(Model, k) for k in ids])", "out": "リスト内包記法 変換"}
{"in": "filtered = [i for i in full if not regex.search(i)]", "out": "リスト内包記法 フィルタ"}
{"in": "avgs = [((a + b) / 2) for a, b in zip(*([iter(data)] * 2))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "mydatetime.strftime('%Y%M%d')", "out": "日付書式"}
{"in": "pattern = re.compile('package\\\\s+(\\\\w+)\\\\s+is(.*)end\\\\s+(package|\\x01)\\\\s*;',\n    re.DOTALL)", "out": "正規表現"}
{"in": "z = [x] + (y if isinstance(y, list) else [y])", "out": "三項演算子"}
{"in": "newstring = re.sub('(Banana)', '\\\\1Toothpaste', oldstring)", "out": "正規表現"}
{"in": "relative_paths = [os.path.relpath(path, common_prefix) for path in paths]", "out": "リスト内包記法 変換"}
{"in": "return ''.join([c for c in nfkd_form if not unicodedata.combining(c)])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "nums = [float(eval(input('enter number {}: '.format(i + 1)))) for i in range(100)]", "out": "辞書内包記法"}
{"in": "zip(*([s] * 2))", "out": "引数展開"}
{"in": "[(len(list(g)), k) for k, g in itertools.groupby(l)]", "out": "リスト内包記法 変換"}
{"in": "[(x * (2 - x % 2)) for x in a_list]", "out": "リスト内包記法 変換"}
{"in": "print('_'.join(combo))", "out": "リストの文字列化"}
{"in": "list1 = [_f for _f in list1 if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join([random.choice('0123456789ABCDEF') for x in range(6)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "self.__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "rec = lambda x: sum(map(rec, x)) if isinstance(x, list) else x", "out": "三項演算子"}
{"in": "l = re.compile('\\\\W', re.UNICODE).split(s)", "out": "正規表現"}
{"in": "new_re_df = [s.iloc[np.where(ts.astype(int) == int(i))] for i in ts]", "out": "リスト内包記法 変換"}
{"in": "\"\"\", \"\"\".join(str(x) for x in range(1, 4))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "super(Discount, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "func2(**locals())", "out": "引数展開"}
{"in": "[tr.findAll('td')[-1].text for tr in soup.findAll('tr')]", "out": "リスト内包記法 変換 末尾の要素"}
{"in": "lid = x.dot(np.append(1, (x.max(0) + 1)[::-1][:-1].cumprod())[::-1])", "out": "逆順の列"}
{"in": "sum(n for _, n in structure)", "out": "リスト内包記法 変換"}
{"in": "return super(Factory, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join('20 01'.split())", "out": "リストの文字列化"}
{"in": "re.findall('(\\\\w+)', sentence)", "out": "正規表現"}
{"in": "m = re.search('867-?5309', data)", "out": "正規表現"}
{"in": "nums = [int(n) for n in text.split()]", "out": "リスト内包記法 変換"}
{"in": "re.split('\\\\W+', 'Words, words, words.', 1)", "out": "正規表現"}
{"in": "\"\"\"\\\\\"\"\".join(existGDBPath.split('\\\\')[0:-1])", "out": "リストの文字列化"}
{"in": "print(', '.join(map(str, g)))", "out": "リストの文字列化"}
{"in": "nums = [int(i) for i in input('Enter space separated inputs: ').split()]", "out": "リスト内包記法 変換"}
{"in": "[(sum(e) / len(e)) for e in zip(*data)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[literal_eval(re.sub('(?<=\\\\(|,)(\\\\w+)(?=\\\\)|,)', '\"\\\\1\"', x)) for x in input]", "out": "リスト内包記法 変換 正規表現"}
{"in": "[[x for x in row.findAll('td')] for row in soup.findAll('tr')]", "out": "リスト内包記法 変換"}
{"in": "pylab.hist([random_triangular(1, 6, 5) for t in range(10000)])", "out": "リスト内包記法 変換"}
{"in": "result = set(x for l in array for x in l)", "out": "リスト内包記法 変換"}
{"in": "timeit([x for x in a if x in b])", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join(lab7).count(input_char))", "out": "リストの文字列化"}
{"in": "d = dict((k, v) for k, v in list(d.items()) if k)", "out": "辞書内包記法"}
{"in": "re.findall('[^A-Za-z0-9_\\\\-\\\\\\\\]', userpath)", "out": "正規表現"}
{"in": "print(re.escape('<b*>'))", "out": "正規表現"}
{"in": "df.apply(lambda x: x.apply(lambda x: [] if math.isnan(x) else x))", "out": "三項演算子"}
{"in": "datetime.datetime.strptime(date_text, '%Y-%m-%d')", "out": "日付書式"}
{"in": "r = [[] for i in range(4)]", "out": "リスト内包記法 変換"}
{"in": "print('Hey, {fruit}'.format(**locals()))", "out": "引数展開"}
{"in": "super(ListField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[x for x in L if x >= 0]", "out": "リスト内包記法 フィルタ"}
{"in": "[x[1] for x in sorted(random.sample(enumerate(myList), K))]", "out": "リスト内包記法 変換"}
{"in": "[sum(map(f, x)) for x in data]", "out": "リスト内包記法 変換"}
{"in": "super(ProjectAdminForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "list(dict((tuple(x[:2]), x) for x in L).values())", "out": "辞書内包記法"}
{"in": "[wordList[i] for i in indexList]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\{(\\\\d+)\\\\}', lambda m: '{' + dict_[m.group(1)] + '}', line)", "out": "正規表現"}
{"in": "return sum(a[i] != b[i] for i in range(len(a)))", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(set_3))", "out": "リストの文字列化"}
{"in": "dict.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "foundItems = (key for key, vals in list(mydict.items()) if item in vals)", "out": "辞書内包記法"}
{"in": "return unittest.main(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join([(i.replace('dehli', '') if '\"' in i else i) for i in sp])", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "super(CharField, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "next(item for item in a if item is not None)", "out": "リスト内包記法 フィルタ"}
{"in": "raise RuntimeError('I want to report exception here...')", "out": "正規表現"}
{"in": "[i for i, xs in enumerate([[1, 2], [2, 3], [9, 3]]) if 3 in xs]", "out": "リスト内包記法 フィルタ"}
{"in": "result = [v for i, v in enumerate(L) if L[i:i + 2] != ['**', '**']]", "out": "リスト内包記法 フィルタ"}
{"in": "len({s[i:i + n] for i in range(len(s) - n + 1)})", "out": "辞書内包記法"}
{"in": "[x for item in l for x in repeat(item, 2)]", "out": "リスト内包記法 変換"}
{"in": "dict(zip(headers, zip(*sdata)))", "out": "引数展開"}
{"in": "[(lambda : x) for x in [1, 5, 7, 3]]", "out": "リスト内包記法 変換"}
{"in": "[x for x in lst if x.lower() not in seen and not seen.add(x.lower())]", "out": "リスト内包記法 フィルタ"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "'%0.2f' % (num,)", "out": "少数点表示制限"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "return [child.get('value') for child in parent]", "out": "リスト内包記法 変換"}
{"in": "print(''.join([('(' + str(r) + ',' + str(c) + ')\\n') for r, c in skel_coords]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "grades = [x.strip() for x in files.readlines()]", "out": "リスト内包記法 変換"}
{"in": "return any(isinstance(e, list) for e in my_list)", "out": "リスト内包記法 変換"}
{"in": "plt.pie(values, labels=labels, autopct='%.2f')", "out": "少数点表示制限"}
{"in": "print(re.escape('www.stackoverflow.com'))", "out": "正規表現"}
{"in": "zip(*[s, s])", "out": "引数展開"}
{"in": "fixed = ''.join(s.split(':', 1))", "out": "リストの文字列化"}
{"in": "[item for item, flag in zip(s, b) if flag == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "[(x + (y,)) for x, y in zip(a, h)]", "out": "リスト内包記法 変換"}
{"in": "np.multiply(np.arange(1, 5), 2 ** np.arange(0, 4)[np.newaxis].T)", "out": "累乗演算子"}
{"in": "sys.path.append('C:\\\\Users\\\\Cube\\\\Documents\\\\Python')", "out": "ユニコード"}
{"in": "print(re.sub('\\\\s{2,}', '|', your_string.strip()))", "out": "正規表現"}
{"in": "[x for pair in zip(l, l) for x in pair]", "out": "リスト内包記法 変換"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "{randint(0, 9): (v + 1) for v in list(mydict.values())}", "out": "辞書内包記法"}
{"in": "re.findall('.{1,3}', s)", "out": "正規表現"}
{"in": "[a for a, b in list(params.items())]", "out": "リスト内包記法 変換"}
{"in": "c = tuple(x - y for x, y in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "print([lst[i] for i in range(3)])", "out": "リスト内包記法 変換"}
{"in": "[e for sub in a for e in sub]", "out": "リスト内包記法 変換"}
{"in": "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A')", "out": "正規表現"}
{"in": "im.wcs[::2, ::2]", "out": "ひとつおきの列"}
{"in": "dict(map(None, *([iter(l)] * 2)))", "out": "引数展開"}
{"in": "min_keys = [k for k, x in list(d.items()) if not any(y < x for y in list(d.values()))]", "out": "リスト内包記法 フィルタ"}
{"in": "print(re.findall('[A-Z][a-z]?|[0-9]+', 'Na2SO4MnO4'))", "out": "正規表現"}
{"in": "print([key for key, group in groupby(x) if len(list(group)) > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "all(x[i] - x[i - 1] == x[i + 1] - x[i] for i in range(1, len(x) - 1))", "out": "リスト内包記法 変換"}
{"in": "{col: df1.loc[df1[col].lt(0), col].to_dict() for col in ['cell_1', 'cell_2']}", "out": "辞書内包記法"}
{"in": "re.compile('(?!.*google)^http://(www.)?.*')", "out": "正規表現"}
{"in": "r = re.compile('foo')", "out": "正規表現"}
{"in": "any(3 in d for d in lod)", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\S*\\\\d\\\\S*', '', s).strip()", "out": "正規表現"}
{"in": "map(tuple, np.array(list(combinations(list(range(N - 1, -1, -1)), M)))[::-1])", "out": "逆順の列"}
{"in": "pat = re.compile('(?=(?:[^%]|^)(?:%%)*(%[a-z]))')", "out": "正規表現"}
{"in": "return func(that, session=session, *args, **kwargs)", "out": "引数展開"}
{"in": "return [x for x in seq if x['id'] not in s and not s.add(x['id'])]", "out": "リスト内包記法 フィルタ"}
{"in": "AB = [(A[i] + B[i]) for i in range(len(A))]", "out": "リスト内包記法 変換"}
{"in": "subversion = re.compile('(?<=SDK )\\\\d*.\\\\d*.\\\\d*.\\\\d*')", "out": "正規表現"}
{"in": "d = [{'x': 1, 'y': 2}, {'x': 3, 'y': 4}]\n[dict(y) for y in set(tuple(x.items()) for x in d)]", "out": "辞書内包記法"}
{"in": "wx.Frame.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "bool(re.search('((\\\\w)\\\\2){2}', 'committee'))", "out": "正規表現"}
{"in": "re.search('|'.join(search), string)", "out": "正規表現 リストの文字列化"}
{"in": "return dict((str(k), convert_keys_to_string(v)) for k, v in list(dictionary.items()))", "out": "辞書内包記法"}
{"in": "L = [['x', 'y'] for i in range(20)]", "out": "リスト内包記法 変換"}
{"in": "[[y for y in x if y not in to_del] for x in my_list]", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join(str(random_utf8_seq(), 'utf8') for i in range(10)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "testVar = input('Ask user for something.')", "out": "リスト内包記法 変換"}
{"in": "return [t for t in tuples if all(f(t) for f in filters)]", "out": "リスト内包記法 フィルタ"}
{"in": "my_dict = {k: (v if len(v) > 1 else v[0]) for k, v in list(tmp.values())}", "out": "辞書内包記法 三項演算子"}
{"in": "return ''.join(x.capitalize() or '_' for x in word.split('_'))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "dict1.update((k, dict2[k]) for k in keys)", "out": "辞書内包記法"}
{"in": "return int(''.join(str(i) for i in bitlist), 2)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(sum(x is not None for x in lst))", "out": "リスト内包記法 変換"}
{"in": "data = [float(fractions.Fraction(x)) for x in data]", "out": "リスト内包記法 変換"}
{"in": "return (s[i:j] for i in range(length) for j in range(i + 1, length + 1))", "out": "リスト内包記法 変換"}
{"in": "print(' '.join(T))", "out": "リストの文字列化"}
{"in": "itertools.chain.from_iterable([i] * i for i in range(1, 5))", "out": "リスト内包記法 変換"}
{"in": "print(sum(map(lambda x: sub(*x), zip(*([iter(l)] * 2)))))", "out": "引数展開"}
{"in": "re.sub('([a-zA-Z0-9])\\\\s+(?=[a-zA-Z0-9])', '\\\\1*', '3 a 5 b')", "out": "正規表現"}
{"in": "[element for tupl in tupleOfTuples for element in tupl]", "out": "リスト内包記法 変換"}
{"in": "ofp.write(re.sub('(?m)([a-z])[\\r\\n]+$', '\\\\1 ', line))", "out": "正規表現"}
{"in": "new_list = [{transform[k]: v for k, v in list(d.items())} for d in old_list]", "out": "辞書内包記法"}
{"in": "np.place(arr, ~np.in1d(arr, valid), 0)", "out": "反転演算子"}
{"in": "print(parser.parse(date).strftime('%Y%m%d'))", "out": "日付書式"}
{"in": "print(datetime.utcnow().strftime('%m/%d/%Y %H:%M:%S %Z'))", "out": "日付書式 時刻書式"}
{"in": "writer.writerows(sheet.row_values(row) for row in range(sheet.nrows))", "out": "リスト内包記法 変換"}
{"in": "[a for a in x if a != 2]", "out": "リスト内包記法 フィルタ"}
{"in": "match = re.match('<a href=\"(?P<url>[^\"]*?)\"', line)", "out": "正規表現"}
{"in": "re.findall('\\\\{([^{}]+)\\\\}', s)", "out": "正規表現"}
{"in": "[x for x in range(len(a)) if a[x:x + len(b)] == b]", "out": "リスト内包記法 フィルタ"}
{"in": "list(set([(a, l.count(a)) for a in l]))", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\$_([^$]*)\\\\$', '<sub>\\\\1</sub>', w)", "out": "正規表現"}
{"in": "QtCore.QThread.__init__(self)", "out": "正規表現"}
{"in": "f.write('\\u4500 blah blah blah\\n')", "out": "ユニコード"}
{"in": "Table.query.filter(\"name ~ 'foo'\")", "out": "反転演算子"}
{"in": "list(itertools.product(*arrays))", "out": "引数展開"}
{"in": "bytearray(random.getrandbits(8) for _ in range(size))", "out": "リスト内包記法 変換"}
{"in": "a.A * ~mask.A", "out": "反転演算子"}
{"in": "re.split('(?<=\\\\))\\\\.', '(1.2).(2.1)')", "out": "正規表現"}
{"in": "print(mirror([mirror(sublist) for sublist in inputs]))", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nProfile.objects.filter(reduce(or_, [Q(full_name__icontains=q) for q in li]))", "out": "リスト内包記法 変換"}
{"in": "list(itertools.zip_longest(fillvalue=0, *lists))", "out": "引数展開"}
{"in": "return ''.join(soup.findAll(text=True))", "out": "リストの文字列化"}
{"in": "pprint({k: getattr(f.__code__, k) for k in dir(f.__code__)})", "out": "辞書内包記法"}
{"in": "return [x for x in lst if x % 2]", "out": "リスト内包記法 フィルタ"}
{"in": "del my_dict[key[-1]]", "out": "末尾の要素"}
{"in": "A[~np.isnan(A)].mean()", "out": "反転演算子"}
{"in": "re.findall('(?<=\\\\()[0-9+/*-]+(?=\\\\))', x)", "out": "正規表現"}
{"in": "print([(x - empty) for x in test])", "out": "リスト内包記法 変換"}
{"in": "[x for x in range(m) for y in range(n)]", "out": "リスト内包記法 変換"}
{"in": "d.strftime('%m%d%Y')", "out": "日付書式"}
{"in": "tk.Text.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "re.split('(\\\\d+)', s)", "out": "正規表現"}
{"in": "match = re.sub('([0-9])(!+)', '\\\\1 \\\\2', input_string)", "out": "正規表現"}
{"in": "indices = [i for i, x in enumerate(myList) if re.match(regex, x)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "len(set(len(x) for x in l)) <= 1", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\w+', sub, words)", "out": "正規表現"}
{"in": "s = '365\\t179\\r\\n96\\t-90\\r\\n48\\t-138\\r\\n12\\t-174\\r\\n30\\t-156\\r\\n'\n[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]", "out": "リスト内包記法 変換"}
{"in": "[row['value'] for row in table.where('key == search_key')]", "out": "リスト内包記法 変換"}
{"in": "re.findall('{}(.*){}'.format(left_identifier, right_identifier), text)", "out": "正規表現"}
{"in": "[myfunc(x, y) for x, y in myiter(data)]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"{:.2f}\"\"\".format(2606.89579999999).replace('.', '')", "out": "少数点表示制限"}
{"in": "all(bb[k] == v for k, v in aa.items() if k in bb)", "out": "リスト内包記法 フィルタ"}
{"in": "B = [([None] * n) for _ in range(n)]", "out": "リスト内包記法 変換"}
{"in": "[indexes[x] for x in l]", "out": "リスト内包記法 変換"}
{"in": "f = x ** 2 + 1", "out": "累乗演算子"}
{"in": "\"\"\"\"\"\".join(''.join(s)[:2] for _, s in groupby('haaaaapppppyyy'))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "words[word[0] + word[-1]].append(word)", "out": "末尾の要素"}
{"in": "(i * i for i in range(5))", "out": "リスト内包記法 変換"}
{"in": "return re.sub('&#?\\\\w+;', fixup, text)", "out": "正規表現"}
{"in": "print('    </td><td>'.join(sublist))", "out": "リストの文字列化"}
{"in": "re.search('\\\\bNot Ok\\\\b', strs).group(0)", "out": "正規表現"}
{"in": "np.where(~a.any(axis=1))[0]", "out": "反転演算子"}
{"in": "a[-1] * (a[-1] + 1) / 2 - sum(a)", "out": "末尾の要素"}
{"in": "return [i for i, _ in itertools.groupby(ks)]", "out": "リスト内包記法 変換"}
{"in": "super(Foo, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "df[~pd.isnull(df[list_of_cols]).all(axis=1)]", "out": "反転演算子"}
{"in": "df.apply(lambda x: x.apply(lambda x: [] if isnan(x) else x))", "out": "三項演算子"}
{"in": "print(' '.join(hex(ord(n)) for n in x))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(('+'.join(map(str, n_nx1lst)) + ' = ', sum(n_nx1lst)))", "out": "リストの文字列化"}
{"in": "print([int(value) for value in list(ss.values())])", "out": "リスト内包記法 変換"}
{"in": "next((i, d) for i, d in enumerate(lod) if 1 in d)", "out": "リスト内包記法 フィルタ"}
{"in": "print('${} \\\\times 10^{{{}}}$'.format(*'3.5e+20'.split('e+')))", "out": "引数展開"}
{"in": "first2vals = [mydict[k] for k in sorted(mydict.keys())[:2]]", "out": "辞書内包記法"}
{"in": "[item for item in ['a', 'b', 'c']]", "out": "リスト内包記法 変換"}
{"in": "next([i for i in userInput if i in wordsTask])", "out": "リスト内包記法 フィルタ"}
{"in": "[(entry if tag in entry else []) for tag in tags for entry in entries]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "super(Command, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return int(''.join(str(num) for num in nums))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "return ','.join([k.name for k in obj.book_set.all()])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "data = data[list(df.columns.tolist()[-1]) + df.columns.tolist()[:-1]]", "out": "末尾の要素"}
{"in": "json.dumps('\\u0100\\u0404'.encode('utf8'))", "out": "ユニコード"}
{"in": "print('.'.join(s.split('.')[:-1]))", "out": "リストの文字列化"}
{"in": "dct = [v['data3'] for v in list(oridict.values())]", "out": "辞書内包記法"}
{"in": "lst_gen = sum([(i, i * i) for i in range(1, 10)], ())", "out": "リスト内包記法 変換"}
{"in": "return np.sqrt(((A - B) ** 2).sum(-1))", "out": "累乗演算子"}
{"in": "list({t[1]: t for t in reversed(l)}.values())", "out": "辞書内包記法"}
{"in": "\"\"\"{:.2f}\"\"\".format(a if a != 0 else abs(a))", "out": "三項演算子 少数点表示制限"}
{"in": "[(((x - 1) % 8 + 2) * x) for x in range(1, 21)]", "out": "リスト内包記法 変換"}
{"in": "print(''.join(last16))", "out": "リストの文字列化"}
{"in": "{k: d1[k] for k in d1.keys() & l1}", "out": "辞書内包記法"}
{"in": "a = '123456789'\n[int(a[i:i + 3]) for i in range(0, len(a), 3)]", "out": "リスト内包記法 変換"}
{"in": "dict(y, **x)", "out": "引数展開"}
{"in": "w.writerow([d.get(k, restval) for k in fieldnames])", "out": "リスト内包記法 変換"}
{"in": "return render_template('index.html', **locals())", "out": "引数展開"}
{"in": "(''.join(s) for s in p)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "def revbits(x):\n    return int(bin(x)[2:].zfill(32)[::-1], 2)", "out": "逆順の列"}
{"in": "[el for el in lst if isinstance(el, collections.Iterable) and st in el]", "out": "リスト内包記法 フィルタ"}
{"in": "soup.find('p', text=re.compile('\\\\$.'))", "out": "正規表現"}
{"in": "[c for c in words if not c.isalpha() and not c.isdigit() and not c.isspace()]", "out": "リスト内包記法 フィルタ"}
{"in": "[d[x] for x in a]", "out": "リスト内包記法 変換"}
{"in": "print([tuple(t[1] for t in v) for k, v in groupby(myList, key=itemgetter(0))])", "out": "リスト内包記法 変換"}
{"in": "match = re.search(re.escape(string), text)", "out": "正規表現"}
{"in": "re.sub('(:[a-z]+)', '<span>\\\\1</span>', method)", "out": "正規表現"}
{"in": "[k for k, v in list(my_counter.items()) if v > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "return re.sub('(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), s)", "out": "正規表現"}
{"in": "os.path.abspath('~')", "out": "反転演算子"}
{"in": "print([list([_f for _f in re.split('(\\\\w+)', i) if _f]) for i in l])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "equation1(*list_of_parameters)", "out": "引数展開"}
{"in": "datetime.now(timezone.utc).strftime('%Y%m%d')", "out": "日付書式"}
{"in": "for col in df.columns:\n    df[col] = df[col].apply(lambda i: ''.join(i))", "out": "リストの文字列化"}
{"in": "return ''.join(c for c in text if c.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[[j.span() for j in rex.finditer(i)] for i in sequence_list]", "out": "リスト内包記法 変換"}
{"in": "print('{x}, {y}'.format(**vars()))", "out": "引数展開"}
{"in": "df['DOB1'] = df['DOB'].dt.strftime('%m/%d/%Y')", "out": "日付書式"}
{"in": "print(', '.join(row))", "out": "リストの文字列化"}
{"in": "result = np.array([list(g) for _, g in groupby(a)])", "out": "リスト内包記法 変換"}
{"in": "from functools import reduce\nProfile.objects.filter(reduce(and_, [Q(full_name__icontains=q) for q in li]))", "out": "リスト内包記法 変換"}
{"in": "mydict = dict((k, v if v else '') for k, v in list(mydict.items()))", "out": "辞書内包記法 三項演算子"}
{"in": "home = os.path.expanduser('~')", "out": "反転演算子"}
{"in": "print(re.findall('-'.join(['[^-]+'] * n), s))", "out": "正規表現 リストの文字列化"}
{"in": "[s for s in code.splitlines() if s.strip()]", "out": "リスト内包記法 フィルタ"}
{"in": "first2vals = [v for v in list(mydict.values())[:2]]", "out": "辞書内包記法"}
{"in": "d2 = dict((k, v) for k, v in list(d1.items()) if v > 0)", "out": "辞書内包記法"}
{"in": "f.write(struct.pack('%dB' % len(bytes), *bytes))", "out": "引数展開"}
{"in": "print(''.join([chr(i) for i in s]))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print([k for k, v in d.items() if v == 1])", "out": "リスト内包記法 フィルタ"}
{"in": "[(a, b, c) for a, b, c in product(A, B, C) if a + b - c == 3]", "out": "リスト内包記法 フィルタ"}
{"in": "with open('my_file') as f:\n    my_list = [json.loads(line) for line in f]", "out": "リスト内包記法 変換"}
{"in": "[l[i::3] for i in range(3)]", "out": "リスト内包記法 変換"}
{"in": "sum(1 for a, b, c in combinations(l, r=3))", "out": "リスト内包記法 変換"}
{"in": "print(''.join(c.data for c in screen[0]).rstrip())", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(list(set(tuple(i) for i in a)))", "out": "リスト内包記法 変換"}
{"in": "noclubs = [x for x in suits if x != 'c']", "out": "リスト内包記法 フィルタ"}
{"in": "return super(MyModel, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "d = {t.key: t for t in [t0, t1, t2]}", "out": "辞書内包記法"}
{"in": "os.path.isfile('C:\\\\Users\\\\xxx\\\\Desktop\\\\xxx')", "out": "ユニコード"}
{"in": "any(x in someDict for x in someList)", "out": "リスト内包記法 変換"}
{"in": "print('\\\\' + path.split('\\\\', 2)[-1])", "out": "末尾の要素"}
{"in": "d = dict((k, tuple(v)) for k, v in d1.items())", "out": "辞書内包記法"}
{"in": "re_ident = re.compile('^[^\\\\d\\\\W]\\\\w*$', re.UNICODE)", "out": "正規表現"}
{"in": "dict((v, 1234 + i) for i, v in enumerate(('foo', 'bar')))", "out": "辞書内包記法"}
{"in": "[(S + str(i)) for i in range(1, 11) for S in 'ABCD']", "out": "リスト内包記法 変換"}
{"in": "first2pairs = {k: mydict[k] for k in list(mydict.keys())[:2]}", "out": "辞書内包記法"}
{"in": "[(i, z) for i in [1, 2] for z in zs_i]", "out": "リスト内包記法 変換"}
{"in": "((x, y) for x in range(width) for y in range(height))", "out": "リスト内包記法 変換"}
{"in": "d[cols[0]] = dict((headers[idx], v) for idx, v in enumerate(cols[1:]))", "out": "辞書内包記法"}
{"in": "super(ArtefactForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "os.path.join(*s.split('\\\\'))", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(e if (i + 1) % 2 else e + ' ' for i, e in enumerate(list(s)))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "[(i for i in 'a'), 'b', 'c']", "out": "リスト内包記法 変換"}
{"in": "filtered_string = re_pattern.sub('\\ufffd', unicode_string)", "out": "ユニコード"}
{"in": "print('Add \"{}\" to position {}'.format(s[-1], i))", "out": "末尾の要素"}
{"in": "return 'default' if x is None else x", "out": "三項演算子"}
{"in": "[s for s in somestrings if not s.startswith('#')]", "out": "リスト内包記法 フィルタ"}
{"in": "grid[[a[second_mask] for a in np.where(mask)]] = 100", "out": "リスト内包記法 変換"}
{"in": "hex_string = ''.join('%02x' % b for b in array_alpha)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\":\"\"\".join(hex(ord(x))[2:] for x in 'Hello World!')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "input_list = [int(a) for a in input_list]", "out": "リスト内包記法 変換"}
{"in": "dict([(an_object.name, an_object) for an_object in object_list])", "out": "辞書内包記法"}
{"in": "{x: (x * x) for x in range(10)}", "out": "辞書内包記法"}
{"in": "return [(1 if digit == '1' else 0) for digit in bin(n)[2:]]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "wx.Dialog.__init__(self, *args, **kwds)", "out": "引数展開"}
{"in": "table = [row for row in data]", "out": "リスト内包記法 変換"}
{"in": "os.path.isfile('C:\\\\Users\\\\xxx\\\\Desktop\\\\xxx')", "out": "ユニコード"}
{"in": "pd.read_csv(StringIO(''.join(q)), header=None)", "out": "リストの文字列化"}
{"in": "[s[i:j] for i, j in zip_longest(start, end)]", "out": "リスト内包記法 変換"}
{"in": "Counter(k['sign'] for k in data if k.get('sign'))", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('<[^<>]*fnd_date[^<>]*>[^>]*>', r.text)", "out": "正規表現"}
{"in": "print(zip(*(line.strip().split('\\t') for line in input)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "('%.2f' % (value,)).rstrip('0').rstrip('.')", "out": "少数点表示制限"}
{"in": "scipy.stats.f_oneway(*list(archive.values()))", "out": "引数展開"}
{"in": "new_term = re.sub('(?<=[A-z])\\\\-(?=[A-z])', ' ', original_term)", "out": "正規表現"}
{"in": "return len(haystack) - len(parts[-1]) - len(needle)", "out": "末尾の要素"}
{"in": "sorted(l, key=lambda x: (x[:-1], x[-1].isdigit(), x))", "out": "末尾の要素"}
{"in": "len(x1) == len(x2) and all(a['a'] == b['a'] for a, b in zip(x1, x2))", "out": "リスト内包記法 変換"}
{"in": "print(dt.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "shortword = re.compile('\\\\W*\\\\b\\\\w{1,3}\\\\b')", "out": "正規表現"}
{"in": "diag = [mat[i][i] for i in range(len(mat))]", "out": "リスト内包記法 変換"}
{"in": "matching_lines = [line for line in string_list if filter_func(line)]", "out": "リスト内包記法 フィルタ"}
{"in": "print([n for n in (x.giveMyNum() for x in q) if n > 1])", "out": "リスト内包記法 フィルタ"}
{"in": "(-3.66 / 26.32 + 0j) ** 0.2", "out": "累乗演算子"}
{"in": "print('Delete \"{}\" from position {}'.format(s[-1], i))", "out": "末尾の要素"}
{"in": "mySet = set(x[0] for x in TUPLES)", "out": "リスト内包記法 変換"}
{"in": "dict([(k, v) for k, v in list(mydict.items()) if k >= 6])", "out": "辞書内包記法"}
{"in": "return l[:1] + [b for a, b in zip(l, l[1:]) if a != b]", "out": "リスト内包記法 フィルタ"}
{"in": "[seq for seq in my_list if [item for item in seq if some_condition()]]", "out": "リスト内包記法 フィルタ"}
{"in": "[(2 ** i) for i, v in enumerate(bin(109)[:1:-1]) if int(v)]", "out": "リスト内包記法 フィルタ 累乗演算子"}
{"in": "model_to_dict(instance, fields=[field.name for field in instance._meta.fields])", "out": "辞書内包記法"}
{"in": "{k: min(h1.get(k) or h2[k], h2.get(k) or h1[k]) for k in list(h1.keys()) + list(h2.keys())}", "out": "辞書内包記法"}
{"in": "[age] = [t[1] for t in mylist if t[0] == 10]", "out": "リスト内包記法 フィルタ"}
{"in": "[(a, b) for a in A for b in B if a in b]", "out": "リスト内包記法 フィルタ"}
{"in": "print(' '.join('%0.2f' % item for item in mylist))", "out": "リスト内包記法 変換 少数点表示制限 リストの文字列化"}
{"in": "re.findall(s, text)", "out": "正規表現"}
{"in": "uppers = [l for l in letters if l.isupper()]", "out": "リスト内包記法 フィルタ"}
{"in": "return func(func, *args, **kwargs)", "out": "引数展開"}
{"in": "df = df.iloc[:, 16:27].groupby([lambda x: x.strftime('%d%m%Y')]).sum()", "out": "日付書式"}
{"in": "(item for sublist in list_of_lists)", "out": "リスト内包記法 変換"}
{"in": "cleaned = [_f for _f in map(str.strip, words) if _f]", "out": "リスト内包記法 フィルタ"}
{"in": "int(''.join(map(str, my_list)), 2)", "out": "リストの文字列化"}
{"in": "re.split('\\\\s|\\u200b', your_string)", "out": "正規表現 ユニコード"}
{"in": "\"\"\"\"\"\".join(bin(int(c, 16))[2:].zfill(4) for c in h)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "result_dict = [u.__dict__ for u in my_query.fetchall()]", "out": "辞書内包記法"}
{"in": "getattr(filters, method)(**options)", "out": "引数展開"}
{"in": "driver.switch_to_window(driver.window_handles[-1])", "out": "末尾の要素"}
{"in": "{k: map(sum, zip(*v)) for k, v in list(d.items())}", "out": "辞書内包記法 引数展開"}
{"in": "print(sum(1 for x in list(tadas.values()) if x['one']))", "out": "リスト内包記法 フィルタ"}
{"in": "newNums = [i for i, x in enumerate(nums) if x == 12]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(x).replace('\\n', ' ')", "out": "リストの文字列化"}
{"in": "min(timeit.repeat(lambda : dict((k, v) for k, v in zip(keys, values))))", "out": "辞書内包記法"}
{"in": "return [x[0] for x in sorted(data, key=lambda x: x[1], reverse=True)[0:6]]", "out": "リスト内包記法 変換"}
{"in": "[x for x in list_of_strings if re.search('(.)\\\\1{2}', x)]", "out": "辞書内包記法 正規表現"}
{"in": "sorted((time.strptime(d, '%H:%M:%S') for d in time_list), reverse=True)", "out": "リスト内包記法 変換 時刻書式"}
{"in": "\"\"\":\"\"\".join(re.findall('..', s))", "out": "正規表現 リストの文字列化"}
{"in": "re.sub('\\\\W+', ' ', s).upper()", "out": "正規表現"}
{"in": "[elem[:12] for elem in g]", "out": "リスト内包記法 変換"}
{"in": "s = ''.join(next(g) if c == '@' else c for c in s)", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "super(QuestionSerializer, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "dict1 = {x: dict1[x] for x in keys}", "out": "辞書内包記法"}
{"in": "vol += [val for name, val in list(globals().items()) if name.startswith('volume')]", "out": "リスト内包記法 フィルタ"}
{"in": "return re.findall(pattern, s)", "out": "正規表現"}
{"in": "fig.savefig('pointandfigure.png')", "out": "正規表現"}
{"in": "next((x for x in lst if x % 2 == 0))", "out": "リスト内包記法 フィルタ"}
{"in": "[k for k, v in list(mydict.items()) if list(mydict.values()).count(v) > 1]", "out": "辞書内包記法"}
{"in": "[sum(sublist) for sublist in zip(*myListOfLists)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "\"\"\"\"\"\".join([('%s' % randint(0, 9)) for num in range(0, n)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "c = [[(x + b[i]) for i, x in enumerate(y)] for y in a]", "out": "リスト内包記法 変換"}
{"in": "yield (i,) + tuple(d[i] for d in dcts)", "out": "リスト内包記法 変換"}
{"in": "print('\\u06f0\\u06f1\\u06f2\\u06f3\\u06f4\\u06f5\\u06f6\\u06f7\\u06f8\\u06f9'[1])", "out": "ユニコード"}
{"in": "any([k for k in l if 'Derived: ' in k])", "out": "リスト内包記法 フィルタ"}
{"in": "d = {b: a[:, (i)] for i, b in enumerate(a)}", "out": "辞書内包記法"}
{"in": "[x._asdict() for x in df.itertuples()]", "out": "辞書内包記法"}
{"in": "np.flatnonzero(~a[:-2] & a[1:-1] & a[2:])", "out": "反転演算子"}
{"in": "[y[0] for y in [x.split(')') for x in s.split('%(')] if len(y) > 1]", "out": "リスト内包記法 フィルタ"}
{"in": "nums = [int(n) for n in with_open('test.txt')]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join([chr(int(p, 2)) for p in wrap(binstr, 8)])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[next(iterable) for x in range(10)]", "out": "リスト内包記法 変換"}
{"in": "map(''.join, itertools.product(*zip(s.upper(), s.lower())))", "out": "引数展開"}
{"in": "bool(re.compile('^[a-z0-9\\\\.]+$').match('1234\\n'))", "out": "正規表現"}
{"in": "return self.func(*args, **self.kwargs)", "out": "引数展開"}
{"in": "output.write('\\n'.join(outputData))", "out": "リストの文字列化"}
{"in": "QMainWindow.__init__(self, *args)", "out": "引数展開"}
{"in": "min_keys = [k for k in d if d[k] == min_value]", "out": "リスト内包記法 フィルタ"}
{"in": "print(average('cat'[::-1], 'doggie'[::-1])[::-1])", "out": "逆順の列"}
{"in": "utc_datetime.strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "[tuple(d.values()) for d in l]", "out": "リスト内包記法 変換"}
{"in": "cleaned_string = ''.join(c for c in input_string if valid_xml_char_ordinal(c))", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[(sum(group) / size) for group in zip(*([iter(data)] * size))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "list(itertools.product(*l))", "out": "引数展開"}
{"in": "sum(x > 7 for x in a)", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join([''.join(['{:4}'.format(item) for item in row]) for row in A]))", "out": "辞書内包記法 リストの文字列化"}
{"in": "list_of_nums = [x for x in list_of_nums if x != 2]", "out": "リスト内包記法 フィルタ"}
{"in": "sum(bool(x) for x in l)", "out": "リスト内包記法 変換"}
{"in": "super(Item, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "diag = [row[i] for i, row in enumerate(mat)]", "out": "リスト内包記法 変換"}
{"in": "return all(a % i for i in range(2, a))", "out": "リスト内包記法 変換"}
{"in": "[[item for item in seq if some_condition] for seq in my_list]", "out": "リスト内包記法 フィルタ"}
{"in": "re.split('[^\\\\d]', str)[-1]", "out": "正規表現 末尾の要素"}
{"in": "d = dict((k, v) for k, v in list(d.items()) if k is not None and k != '')", "out": "辞書内包記法"}
{"in": "self.widget.config(text='\\n'.join(self.content))", "out": "リストの文字列化"}
{"in": "v1, v2, v3, v4 = [max(x, 0) for x in [a, b, c, d]]", "out": "リスト内包記法 変換"}
{"in": "dt.strftime('%Y-%m-%d')", "out": "日付書式"}
{"in": "return sum([i for i in l1 if isinstance(i, int)])", "out": "リスト内包記法 フィルタ"}
{"in": "[setitem(x, 1, -2) for x in lol]", "out": "リスト内包記法 変換"}
{"in": "wildcards = ','.join(['?'] * len(frame.columns))", "out": "リストの文字列化"}
{"in": "super(LoginFormWithoutNickname, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "max([x for x in ls if x < 0])", "out": "リスト内包記法 フィルタ"}
{"in": "subdict = dict((k, v) for k, v in myDict.items() if v.field2 >= 2)", "out": "辞書内包記法"}
{"in": "return all(x * y > 0 for x, y in zip(l1, l2))", "out": "リスト内包記法 変換"}
{"in": "f.write(struct.pack('B' * len(bytes), *bytes))", "out": "引数展開"}
{"in": "min_unfairness = min(num[i + k - 1] - num[i] for i in range(n - k + 1))", "out": "リスト内包記法 変換"}
{"in": "'function(%s)' % ', '.join(args)", "out": "リストの文字列化"}
{"in": "print([int(x) for x in T1])", "out": "リスト内包記法 変換"}
{"in": "return A[~np.in1d(A.dot(cumdims), B.dot(cumdims))]", "out": "反転演算子"}
{"in": "[x for x, y in groupby(L) if len(list(y)) < 2]", "out": "リスト内包記法 フィルタ"}
{"in": "a = [([0] * 8) for _ in range(8)]", "out": "リスト内包記法 変換"}
{"in": "n = [x for x in main_text if x == ' ' or x not in string.printable]", "out": "リスト内包記法 フィルタ"}
{"in": "writer.writerow([row.get(field, '') for field in fieldnames])", "out": "リスト内包記法 変換"}
{"in": "return all(x == L[0] for x in L)", "out": "リスト内包記法 変換"}
{"in": "[a for a in s if s.count(a) == 1]", "out": "リスト内包記法 フィルタ"}
{"in": "re.findall('aaa\\\\?aaa', s)", "out": "正規表現"}
{"in": "result = [separator.join(map(str, x)) for x in product(*lists)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "[name for name in data1 if name in data2]", "out": "リスト内包記法 フィルタ"}
{"in": "reversed_arr = np.swapaxes(np.swapaxes(arr, 0, k)[::-1], 0, k)", "out": "逆順の列"}
{"in": "return ''.join(d)", "out": "リストの文字列化"}
{"in": "[[random.random() for i in range(N)] for j in range(M)]", "out": "リスト内包記法 変換"}
{"in": "super(Item, self).save(*args, **kwargs)", "out": "引数展開"}
{"in": "\"\"\"{:.2f}\"\"\".format(1.5)", "out": "少数点表示制限"}
{"in": "l = [d for d in days if d.weekday() in [1, 2]]", "out": "リスト内包記法 フィルタ"}
{"in": "[x for i, x in enumerate(y) if i != 1]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\",\"\"\".join([str(elem) for elem in a])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "super(Cat, self).__init__(name, weight, **kwargs)", "out": "引数展開"}
{"in": "return chain.from_iterable(combinations(s, r) for r in range(1, len(s) + 1))", "out": "リスト内包記法 変換"}
{"in": "len(re.findall('#available', aa))", "out": "正規表現"}
{"in": "return ''.join(builder[:-1])", "out": "リストの文字列化"}
{"in": "Image(url='http://my_site.com/my_picture.jpg', width=100, height=100)", "out": "正規表現"}
{"in": "a.reshape(-1, np.prod(a.shape[-2:]))[:, ::-1].reshape(a.shape)", "out": "逆順の列"}
{"in": "for i in range(1, 6):\n    for c1 in itertools.combinations(c, i):\n        pass", "out": "リスト内包記法 変換"}
{"in": "l = [x[:k] for k in (-5, -4, -3, -2, -1, None)]", "out": "リスト内包記法 変換"}
{"in": "len('\\u3053\\u3093\\u306b\\u3061\\u306f')", "out": "ユニコード"}
{"in": "return func(*args, **kwargs)", "out": "引数展開"}
{"in": "[(x or '') for x in l]", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(tup)", "out": "リストの文字列化"}
{"in": "ax.lines[-1].set_marker('s')", "out": "末尾の要素"}
{"in": "print(soup(text=re.compile('exact text')))", "out": "正規表現"}
{"in": "[myfunc(a, b) for a, b in zip(idata, idata)]", "out": "リスト内包記法 変換"}
{"in": "sum(data[x::size] for x in range(size)) / size", "out": "リスト内包記法 変換"}
{"in": "[np.max(arr) for arr in np.split(v, np.where(mask)[0] + 1)]", "out": "リスト内包記法 変換"}
{"in": "[(char.upper() if char != 'B' else char.lower()) for char in 'aBcDeF']", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "bool(re.match('he', 'Hello', re.I))", "out": "正規表現"}
{"in": "s = 'foo bar foo bar foo bar'\nre.sub('\\\\b(.+)(\\\\s+\\\\1\\\\b)+', '\\\\1', s)", "out": "正規表現"}
{"in": "print(re.findall('^.*\\\\.$', data, re.MULTILINE))", "out": "正規表現"}
{"in": "super(models.Model, self).__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "dict(d1, **d2)", "out": "引数展開"}
{"in": "return ''.join(s)", "out": "リストの文字列化"}
{"in": "[(0) for _ in range(10000)]", "out": "リスト内包記法 変換"}
{"in": "print('\\n'.join(re.findall(\"'(.*?)'\", pprint.pformat(something))))", "out": "正規表現 リストの文字列化"}
{"in": "string.format_map({k: Pluralizer(v) for k, v in list(data.items())})", "out": "辞書内包記法"}
{"in": "[c for c in df]", "out": "リスト内包記法 変換"}
{"in": "dict((c, string.count(c)) for c in string)", "out": "辞書内包記法"}
{"in": "dropped_copies = [[x[i] for x in copies[i]] for i in range(2)]", "out": "リスト内包記法 変換"}
{"in": "temp[::-1].sort()", "out": "逆順の列"}
{"in": "[peaks([x, y]) for x, y in zip(xscat, yscat)]", "out": "リスト内包記法 変換"}
{"in": "[(arr[i], arr[-i - 1]) for i in range(len(arr) // 2)]", "out": "リスト内包記法 変換"}
{"in": "lambda x: x['name'].upper().strip() if isinstance(x, str) else x", "out": "三項演算子"}
{"in": "regex2 = re.compile('.*(%s).*' % what2look4)", "out": "正規表現"}
{"in": "[(x + '_' + y) for x, y in zip(la, itertools.cycle(lb))]", "out": "リスト内包記法 変換"}
{"in": "next((item for item in a if item is not None), 'All are Nones')", "out": "リスト内包記法 フィルタ"}
{"in": "return [(item % 3) for item in l]", "out": "リスト内包記法 変換"}
{"in": "map(lambda x: func1(*x), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "out": "引数展開"}
{"in": "y[:, ::2]", "out": "ひとつおきの列"}
{"in": "datetime.datetime.now().strftime('%m_%d_%y%H_%M_%S')", "out": "時刻書式"}
{"in": "lambda x, y: set([x]) == (y if b else lambda x, y: x in y)", "out": "三項演算子"}
{"in": "line = re.sub(\"([^'])'t'(.)\", '\\\\1THIS_IS_TRUE\\\\2', line)", "out": "正規表現"}
{"in": "format(1.679, '.2f')", "out": "少数点表示制限"}
{"in": "\"\"\", \"\"\".join(l + ['x'] * (4 - len(l)))", "out": "リストの文字列化"}
{"in": "print(dict(zip(keys, zip(*data))))", "out": "引数展開"}
{"in": "result = [dishes[key] for key in list(crucial.keys()) & list(dishes.keys())]", "out": "リスト内包記法 変換"}
{"in": "[x.upper() for x in ['a', 'b', 'c']]", "out": "リスト内包記法 変換"}
{"in": "re.findall('(.{,15})\\\\s(.*$)', 'A string wth words')", "out": "正規表現"}
{"in": "\"\"\"\"\"\".join(x for x in s if x not in ' -.:')", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "print('%.2f' % some_var)", "out": "少数点表示制限"}
{"in": "{x.split('=')[0]: int(x.split('=')[1]) for x in strs.split('&')}", "out": "辞書内包記法"}
{"in": "sums = [sum(subseq) for subseq in subseqs]", "out": "リスト内包記法 変換"}
{"in": "[(i + i) for i in re.findall('([a-z])\\\\1', 'abbbbcppq')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "print('\\n'.join(mylist))", "out": "リストの文字列化"}
{"in": "[a for a in permutations([3, 3, 4])]", "out": "リスト内包記法 変換"}
{"in": "[line[i:i + n] for i in range(0, len(line), n)]", "out": "リスト内包記法 変換"}
{"in": "L = ['A', 'B', 'C']\n\"\"\" \"\"\".join(L)", "out": "リストの文字列化"}
{"in": "next((x for x in test_list if x.value == value), None)", "out": "リスト内包記法 フィルタ"}
{"in": "(e.text + ''.join(map(etree.tostring, e))).strip()", "out": "リストの文字列化"}
{"in": "mynumbers.append([int(n) for n in line.strip().split(',')])", "out": "リスト内包記法 変換"}
{"in": "print(dt.strftime('%d/%m/%Y'))", "out": "日付書式"}
{"in": "m = re.search('AAA(.+?)ZZZ', text)", "out": "正規表現"}
{"in": "print(('Capital Letters: ', sum(1 for c in message if c.isupper())))", "out": "リスト内包記法 フィルタ"}
{"in": "sets = [(myList[i - 1], j) for i, j in enumerate(myList) if j == 9]", "out": "リスト内包記法 フィルタ"}
{"in": "zip_longest(*((iter(list(range(10))),) * 3))", "out": "引数展開"}
{"in": "l.extend(map(int, (w for w in line.split() if w.isdigit())))", "out": "リスト内包記法 フィルタ"}
{"in": "struct.pack('{0}B'.format(len(myintegers)), *myintegers)", "out": "引数展開"}
{"in": "[os.path.splitext(os.path.basename(fn))[0] for fn in a]", "out": "リスト内包記法 変換"}
{"in": "re.match('sample', line)", "out": "正規表現"}
{"in": "def is_prime(a):\n    return all(a % i for i in range(2, a))", "out": "リスト内包記法 変換"}
{"in": "df['expand'] = df.apply(lambda x: ','.join([x['B']] * x['quantity']), axis=1)", "out": "リストの文字列化"}
{"in": "return any(char.isdigit() for char in inputString)", "out": "リスト内包記法 変換"}
{"in": "\"\"\" \"\"\".join(format(n, '02X') for n in struct.pack('2I', 12, 33))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print('sum of 2nd items = %d' % sum([float(v[1]) for v in list(dictData.values())]))", "out": "辞書内包記法"}
{"in": "t1 = set(frozenset(i) for i in t)", "out": "リスト内包記法 変換"}
{"in": "list(itertools.product(*l))", "out": "引数展開"}
{"in": "result = mystring.split(':')[-1]", "out": "末尾の要素"}
{"in": "print(''.join(c.upper() if i in indices else c for i, c in enumerate(s)))", "out": "リスト内包記法 フィルタ 三項演算子 リストの文字列化"}
{"in": "\"\"\"\"\"\".join(map(chr, rgb)).encode('hex')", "out": "リストの文字列化"}
{"in": "os.execl(sys.executable, sys.executable, *sys.argv)", "out": "引数展開"}
{"in": "print(next((x for x in range(10) if x == 11), None))", "out": "リスト内包記法 フィルタ"}
{"in": "file_out[-1] = file_out[-1][:-1]", "out": "末尾の要素"}
{"in": "list(chain(*[l1, l2, l3]))", "out": "引数展開"}
{"in": "list = [i.lstrip('0') for i in listOfNum]", "out": "リスト内包記法 変換"}
{"in": "wildcard = 'pictures (*.jpeg,*.png)|*.jpeg;*.png'", "out": "引数展開"}
{"in": "\"\"\" \"\"\".join([''.join(i.split()) for i in re.split(' {2,}', s)])", "out": "辞書内包記法 正規表現 リストの文字列化"}
{"in": "regex = '\\\\b%s\\\\b' % '\\\\b|\\\\b'.join(states)", "out": "リストの文字列化"}
{"in": "re.sub('Description: ', '', text, 1)", "out": "正規表現"}
{"in": "assert [1, 2, 3, 4][::2] == [1, 3]", "out": "ひとつおきの列"}
{"in": "re.findall('\\\\d', text)[:3]", "out": "正規表現"}
{"in": "(s + mystring for s in mylist)", "out": "リスト内包記法 変換"}
{"in": "return '.'.join([fn.__module__, fn.__name__])", "out": "リストの文字列化"}
{"in": "iso = time.strftime('%Y-%m-%dT%H:%M:%SZ', timetup)", "out": "日付書式 時刻書式"}
{"in": "maxlen = max(len(sublist) for sublist in a)", "out": "リスト内包記法 変換"}
{"in": "x, y = zip(*lst)", "out": "引数展開"}
{"in": "'Gaga\\u2019s'", "out": "ユニコード"}
{"in": "[(x - 1) for x in perm_index[i][1:]]", "out": "リスト内包記法 変換"}
{"in": "{foo(a): bar(a) for a in (1, 2, 3)}", "out": "辞書内包記法"}
{"in": "'PROCESS\\uff1a\\u7c7b\\u578b\\uff1a\\u5173\\u7231\\u79ef\\u5206[NOTIFY]   \\u4ea4\\u6613\\u53f7\\uff1a2012022900000109   \\u8ba2\\u5355\\u53f7\\uff1aW12022910079166    \\u4ea4\\u6613\\u91d1\\u989d\\uff1a0.01\\u5143    \\u4ea4\\u6613\\u72b6\\u6001\\uff1atrue 2012-2-29 10:13:08'", "out": "ユニコード"}
{"in": "sub_dict = dict([(key, round(a[key] - b.get(key, 0), 1)) for key in a])", "out": "辞書内包記法"}
{"in": "Series(np.random.randn(3)).apply(lambda x: '%.3f' % x)", "out": "少数点表示制限"}
{"in": "tuples = [tuple(x) for x in subset.values]", "out": "リスト内包記法 変換"}
{"in": "return self.function(*args, **kwargs)", "out": "引数展開"}
{"in": "list_of_groups = zip(*((iter(the_list),) * group_size))", "out": "引数展開"}
{"in": "answer = sum(int(i) for i in equation.split('+'))", "out": "リスト内包記法 変換"}
{"in": "return [([0] * len(row) if 0 in row else row) for row in matrix]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "matchingVals = [x for x in a if x > 2]", "out": "リスト内包記法 フィルタ"}
{"in": "re.compile('[a-zA-Z0-9]*')", "out": "正規表現"}
{"in": "re.compile('\\\\w*')", "out": "正規表現"}
{"in": "locale.format('%.2f', 100028282.23, grouping=True)", "out": "少数点表示制限"}
{"in": "mydog = re.compile(', (.*)\\n')", "out": "正規表現"}
{"in": "return any(sublst == lst[i:i + n] for i in range(len(lst) - n + 1))", "out": "リスト内包記法 変換"}
{"in": "print(sorted(inputWords, key=lambda word: [alphabet.index(c) for c in word]))", "out": "リスト内包記法 変換"}
{"in": "[t for t in l if t[0].startswith('img')]", "out": "リスト内包記法 フィルタ"}
{"in": "requests.delete(url, **kwargs)", "out": "引数展開"}
{"in": "zip(*lis)", "out": "引数展開"}
{"in": "print(np.where(~mask)[0])", "out": "反転演算子"}
{"in": "print('{:10s} {:3d} \\xc2\\xa0{:7.2f}'.format('yyyy', 3, 1.0))", "out": "少数点表示制限"}
{"in": "super(TypeAwareManager, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "print(''.join(r))", "out": "リストの文字列化"}
{"in": "return [Teaser(Context(result)) for result in self.post.results]", "out": "リスト内包記法 変換"}
{"in": "[e for e in bad if e in '\\n'.join(my_list)]", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "return len([_f for _f in a_list if _f]) == len(a_list)", "out": "リスト内包記法 フィルタ"}
{"in": "return ''.join(html_table(lol))", "out": "リストの文字列化"}
{"in": "print(len('\\uc815\\uc815'.encode('UTF-16-LE')))", "out": "ユニコード"}
{"in": "print(len('\\uc815\\uc815'.encode('UTF-16')))", "out": "ユニコード"}
{"in": "print(len('\\uc815\\uc815'.encode('UTF-32-LE')))", "out": "ユニコード"}
{"in": "print(json.loads('\"\\\\u0123\"'))", "out": "ユニコード"}
{"in": "topdirs = [os.path.split(x)[0] for x in dirs]", "out": "リスト内包記法 変換"}
{"in": "print(np.sqrt(np.sum((p[:, (np.newaxis)] - p[(np.newaxis), :]) ** 2, axis=-1)))", "out": "累乗演算子"}
{"in": "set(x for x, count in common if count == common[0][1])", "out": "リスト内包記法 フィルタ"}
{"in": "cat_sorted = zip(*sorted(zip(*cat), key=itemgetter(2)))", "out": "引数展開"}
{"in": "search = re.compile('(T|A)')", "out": "正規表現"}
{"in": "len([y for y in x if y > 2])", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(random.choice((str.upper, str.lower))(x) for x in s)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "mylist = [(w[0] + w[1]) for w in words]", "out": "リスト内包記法 変換"}
{"in": "label = re.sub('((?<=[a-z])[A-Z]|(?<!\\\\A)[A-Z](?=[a-z]))', ' \\\\1', label)", "out": "正規表現"}
{"in": "now.strftime('%Y-%m-%d %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "a = [two for one, two in zip(a, a[1:]) if two[1] > one[1]]", "out": "リスト内包記法 フィルタ"}
{"in": "list2 = [x for x in list1 if x.find('CONTENT_ITEM_ID ') != -1]", "out": "リスト内包記法 フィルタ"}
{"in": "[''.join(elem) for elem in itertools.permutations(A + B, 3)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "v, b, n = j[4:7][::-1]", "out": "逆順の列"}
{"in": "np.array([[x] for x in a1])", "out": "リスト内包記法 変換"}
{"in": "re.escape('192.168.1.1')", "out": "正規表現"}
{"in": "return super(YourView, self).dispatch(request, *args, **kwargs)", "out": "引数展開"}
{"in": "func(*args)", "out": "引数展開"}
{"in": "int(n ** 0.5) + 1", "out": "累乗演算子"}
{"in": "list(chain.from_iterable((i, i * i) for i in range(1, 10)))", "out": "リスト内包記法 変換"}
{"in": "reversed_df = df.iloc[::-1]", "out": "逆順の列"}
{"in": "y = [('aaa' + str(i)) for i in np.random.randint(0, 10000, size=5000000)]", "out": "リスト内包記法 変換"}
{"in": "def get_fun(fn):\n    return '.'.join([fn.__module__, fn.__name__])", "out": "リストの文字列化"}
{"in": "goal = ['<li>{0}</li>'.format(x) for x in l]", "out": "辞書内包記法"}
{"in": "logging.info('get ready for an error...')", "out": "リスト内包記法 変換"}
{"in": "dt.strftime('%Y-%m-%dT%H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "filtered_list = [x for x in input_list if x % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "pyplot.text(x, y, string, fontdict=None, withdash=False, **kwargs)", "out": "引数展開"}
{"in": "d = dict((t.key, t) for t in [t0, t1, t2])", "out": "辞書内包記法"}
{"in": "with open('text.txt') as myfile:\n    count = sum(1 for line in myfile if line.rstrip('\\n'))", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('\\\\|(?!\\\\|)', '', s)", "out": "正規表現"}
{"in": "print(' '.join(L))", "out": "リストの文字列化"}
{"in": "[(lower + x * (upper - lower) / length) for x in range(length)]", "out": "リスト内包記法 変換"}
{"in": "names = [d['name'] for d in j[0]['trends']]", "out": "リスト内包記法 変換"}
{"in": "name[0][0][-1][-1]", "out": "末尾の要素"}
{"in": "output_list = [x for x in input_list if isinstance(x, list)]", "out": "リスト内包記法 フィルタ"}
{"in": "{key: val for key, val in list(mime_types.items()) if 'image/tiff' == val}", "out": "辞書内包記法"}
{"in": "[(i.start(), i.end()) for i in re.finditer('o+', test)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "zeros = [([0] * N) for _ in range(M)]", "out": "リスト内包記法 変換"}
{"in": "return [item for item in sequence if item < value]", "out": "リスト内包記法 フィルタ"}
{"in": "next((name for name, age in list(mydict.items()) if age == search_age), None)", "out": "辞書内包記法"}
{"in": "a = ' '.join(unique_list(a.split()))", "out": "リストの文字列化"}
{"in": "print(tok, '=', re.search(needle, xml_result).groups()[0])", "out": "正規表現"}
{"in": "return dict([(k, v) for k, v in d.items() if k >= begin and k <= end])", "out": "辞書内包記法"}
{"in": "regex = '|'.join([('\\\\b' + str(state) + '\\\\b') for state in states])", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "not sum([(not i in A) for i in B]) if len(A) == len(B) else False", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "\"\"\"\"{0}\\\"\"\"\".format('\", \"'.join(words))", "out": "リストの文字列化"}
{"in": "[a.join(b) for a, b in zip(df.a[10:20], df.b[10:20])]", "out": "リスト内包記法 変換"}
{"in": "[x for x in dnalist if not re.search('[^AGTC]', x)]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "newMyList = [(v, k) for v, k in myList if not k in myDict]", "out": "リスト内包記法 フィルタ"}
{"in": "[[i for i, n in enumerate(li) if n == x] for x in sorted(set(li))]", "out": "リスト内包記法 フィルタ"}
{"in": "data = [['C'], ['B'], ['A'], ['C', 'B'], ['B', 'A'], ['A', 'C']]\nsorted((sorted(item) for item in data), key=lambda x: (len(x), x))", "out": "リスト内包記法 変換"}
{"in": "re.sub('[^-\\\\w]', ' ', 'black-white')", "out": "正規表現"}
{"in": "x, y = (os.getpid(param) for param in ('process1', 'process2'))", "out": "リスト内包記法 変換"}
{"in": "print(len(repr(2 ** (2 ** 10 - 1)).rstrip('L')))", "out": "累乗演算子"}
{"in": "result = [makedict(elem) for elem in yourlist]", "out": "辞書内包記法"}
{"in": "print([element for element, count in Counter(list1).most_common()])", "out": "リスト内包記法 変換"}
{"in": "[(next(car) if item else next(a)) for item in lyst]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "pd.concat(g for i, g in grouped if len(g) > 2)", "out": "リスト内包記法 フィルタ"}
{"in": "[w for w in ['ONE', 'TWO'] if data['Col1'].str.contains(w).any()]", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\"\"\"\".join(chr(sum(nums[i:i + 2])) for i in range(0, len(nums), 2))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print(','.join(str(x) for x in numbers(1, [1, 3], 100)))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[match for match in matches]", "out": "リスト内包記法 変換"}
{"in": "s[::-1]", "out": "逆順の列"}
{"in": "[(x + 1) for x in L]", "out": "リスト内包記法 変換"}
{"in": "sum(i for i in range(a, b + 1) if not i % 2)", "out": "リスト内包記法 フィルタ"}
{"in": "z = dict(x, **y)", "out": "引数展開"}
{"in": "[vali[i] for i, vali in enumerate(f(*vals))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "results.extend(re.findall(key, message, re.IGNORECASE))", "out": "正規表現"}
{"in": "print([list(v) for k, v in groupby(sorted_list, key=move)])", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(n for n in phone_str if n.isdigit())", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "arr.argsort()[-3:][::-1]", "out": "逆順の列"}
{"in": "L4 = [n for n in L1 if n not in tmpset]", "out": "リスト内包記法 フィルタ"}
{"in": "shutil.copyfile(path, os.path.join(*path_rel))", "out": "引数展開"}
{"in": "counter_list = [item for item in counter_list if len(item) != 0]", "out": "リスト内包記法 フィルタ"}
{"in": "stripped_list = [j.strip() for j in initial_list]", "out": "リスト内包記法 変換"}
{"in": "indices = [i for i, elem in enumerate(mylist) if 'aa' in elem]", "out": "リスト内包記法 フィルタ"}
{"in": "[k for k, v in G.out_degree().items() if v == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "axnum.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))", "out": "少数点表示制限"}
{"in": "set(x[0] for x in zip(a, a[1:]) if x[0] == x[1])", "out": "リスト内包記法 フィルタ"}
{"in": "super(CustomHandler, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "super(MyModel, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "return [(A[k], B[k]) for k in A if k in B]", "out": "リスト内包記法 フィルタ"}
{"in": "RNA_integers = [RNA_dictionary[i] for i in RNA_list if i in RNA_dictionary]", "out": "辞書内包記法"}
{"in": "word_re = re.compile('\\\\w+(?u)')", "out": "正規表現"}
{"in": "print(''.join(comb))", "out": "リストの文字列化"}
{"in": "sum((c.A for c in cList), timedelta())", "out": "リスト内包記法 変換"}
{"in": "return QtCore.Qt.ItemIsEnabled", "out": "正規表現"}
{"in": "time.strptime(datestring, '%d.%m.%Y %H:%M:%S')", "out": "日付書式 時刻書式"}
{"in": "string = float(string) if string.isdigit() else string", "out": "三項演算子"}
{"in": "re.split('(?<!day)\\\\|(?!night)', s)", "out": "正規表現"}
{"in": "FullName = ', '.join([_f for _f in (LastName, FirstName) if _f])", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "next(e in lestring for e in lelist if e in lestring)", "out": "リスト内包記法 フィルタ"}
{"in": "lattice = [[Site(i + j) for i in range(3)] for j in range(3)]", "out": "リスト内包記法 変換"}
{"in": "a[::2] = 1", "out": "ひとつおきの列"}
{"in": "m = re.search('//([^/]*)', str)", "out": "正規表現"}
{"in": "np.average(a, axis=-1).repeat(a.shape[-1]).reshape(a.shape)", "out": "末尾の要素"}
{"in": "re.sub(' mytable', '\" id=\"mytable', df.to_html(classes='mytable'))", "out": "正規表現"}
{"in": "with open('/Users/.../Desktop/Name_Python.txt', 'w', encoding='utf-8') as file:\n    file.writelines('%s\\n' % item for item in my_list)", "out": "リスト内包記法 変換"}
{"in": "urlsIwant = [x for x in allurls if any(w in x for w in words)]", "out": "リスト内包記法 フィルタ"}
{"in": "return np.exp(-4 * np.log(2) * ((x - x0) ** 2 + (y - y0) ** 2) / fwhm ** 2)", "out": "累乗演算子"}
{"in": "def consecutive_in(B, A):\n    return B in (A[i:i + len(B)] for i in range(len(A)))", "out": "リスト内包記法 変換"}
{"in": "count = sum(1 for line in myfile)", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\s+', ' ', mystring).strip()", "out": "正規表現"}
{"in": "assert all(run_function(i) == j for i, j in zip(inputs, expected_values))", "out": "リスト内包記法 変換"}
{"in": "[f(aItem, bItem) for aItem, bItem in zip(a, b)]", "out": "リスト内包記法 変換"}
{"in": "normalizedscores = {u: (float(l) / maxscore) for u, l in list(linkscores.items())}", "out": "辞書内包記法"}
{"in": "res = [next(coupler, None) for _ in range(5)]", "out": "リスト内包記法 変換"}
{"in": "lambda x: next(i for i in x if i['id'] == 20)", "out": "リスト内包記法 フィルタ"}
{"in": "dict((k, sum(d[k] for d in dict1)) for k in dict1[0])", "out": "辞書内包記法"}
{"in": "[a for a, a in list(params.items())]", "out": "リスト内包記法 変換"}
{"in": "tk.Tk.__init__(self, *args, **kwargs)", "out": "引数展開"}
{"in": "len(set(sum(sl) for sl in L)) == 1", "out": "リスト内包記法 変換"}
{"in": "ax.plot(x, 2 * x ** 2, color='b', linestyle='', marker='o')", "out": "累乗演算子"}
{"in": "[id(x) for x in test]", "out": "リスト内包記法 変換"}
{"in": "return [x for x in L if x not in delitems]", "out": "リスト内包記法 フィルタ"}
{"in": "return sum(i != j for i, j in zip(a, b))", "out": "リスト内包記法 変換"}
{"in": "[line for time, line in sorted(zip(listofTimes, listofLines))]", "out": "リスト内包記法 変換"}
{"in": "r = re.compile('\\\\w+')", "out": "正規表現"}
{"in": "return re.compile(regex).groups", "out": "正規表現"}
{"in": "return [(v * v) for v in vals]", "out": "リスト内包記法 変換"}
{"in": "[char for char in yourstring]", "out": "リスト内包記法 変換"}
{"in": "sum(1 for item in arr if item == 0 and type(item) is type(0))", "out": "リスト内包記法 フィルタ"}
{"in": "list(map(lambda f, a: f(a), *zip(*itertools.product(funcs, args))))", "out": "引数展開"}
{"in": "matplotlib.rc('font', **font)", "out": "引数展開"}
{"in": "example_list = [int(k) for k in example_string.split(',')]", "out": "リスト内包記法 変換"}
{"in": "np.core.records.fromrecords(r.tolist() + [(5, 'cc', 43.0)])", "out": "正規表現"}
{"in": "pandas.DataFrame.from_records([s.to_dict() for s in signals])", "out": "辞書内包記法"}
{"in": "field.setAlignment(QtCore.Qt.AlignCenter)", "out": "正規表現"}
{"in": "perms = [''.join(p) for p in permutations(str, 5)]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "a.func(**kwargs)", "out": "引数展開"}
{"in": "a = ['a', 'b', 'c', 'd']\n\"\"\"\"\"\".join(a)", "out": "リストの文字列化"}
{"in": "handles, labels = ax.get_legend_handles_labels()\nax.legend(handles[::-1], labels[::-1], title='Line', loc='upper left')", "out": "逆順の列"}
{"in": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]", "out": "リスト内包記法 フィルタ"}
{"in": "plt.xlim(X[0] - day, X[-1] + day)", "out": "末尾の要素"}
{"in": "p = re.compile('([-+]?[\\\\.]?(?=\\\\d)(?:\\\\d*)(?:\\\\.\\\\d+)?)')", "out": "正規表現"}
{"in": "[list(t) for t in zip(*([iter(num_str.split(','))] * 2))]", "out": "リスト内包記法 変換 引数展開"}
{"in": "mylist = [mylist[i] for i in myorder]", "out": "リスト内包記法 変換"}
{"in": "list_of_lines = [next(f) for _ in range(chunk_len)]", "out": "リスト内包記法 変換"}
{"in": "print(key, sum(r[2] for r in rows))", "out": "リスト内包記法 変換"}
{"in": "[v for elt in stuff for v in ('a', elt)]", "out": "リスト内包記法 変換"}
{"in": "field_names = [i[0] for i in cursor.description]", "out": "リスト内包記法 変換"}
{"in": "tkMessageBox.showinfo('Key you!', ' '.join(sys.argv[1:]))", "out": "リストの文字列化"}
{"in": "agent_list = [list(ast.literal_eval(line)) for line in f]", "out": "リスト内包記法 変換"}
{"in": "df.resample('D').sum().fillna(0).rolling(n).sum()[-1::-k][::-1]", "out": "逆順の列"}
{"in": "\"\"\"documentation for foo\"\"\"", "out": "リスト内包記法 変換"}
{"in": "\"\"\"additional notes for bar\"\"\"", "out": "リスト内包記法 変換"}
{"in": "l = ['element1\\t0238.94', 'element2\\t2.3904', 'element3\\t0139847']\n[i.split('\\t', 1)[0] for i in l]", "out": "リスト内包記法 変換"}
{"in": "return {k: v for k, v in list(d['item'].items()) if k in l}", "out": "辞書内包記法"}
{"in": "from functools import reduce\nreturn int(reduce(mul, (Fraction(n - i, i + 1) for i in range(k)), 1))", "out": "リスト内包記法 変換"}
{"in": "import sys\na = [sys.intern('foo'.replace('o', '1')) for a in range(0, 1000000)]", "out": "リスト内包記法 変換"}
{"in": "[x for x in range(LOW, HIGH) if len(set(str(x))) == len(str(x))]", "out": "リスト内包記法 フィルタ"}
{"in": "print(''.join(['_', '_', '_', '_']))", "out": "リストの文字列化"}
{"in": "categories = {k: (sum(v) / len(v)) for k, v in list(categories.items())}", "out": "辞書内包記法"}
{"in": "re.sub('(\"[^\"]*\")|delhi', lambda m: m.group(1) if m.group(1) else '', a)", "out": "三項演算子 正規表現"}
{"in": "[''.join(v) for k, v in groupby(s) if k != '-']", "out": "リスト内包記法 フィルタ リストの文字列化"}
{"in": "[a for b, b in list(params.items())]", "out": "リスト内包記法 変換"}
{"in": "super(MyForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[tuple(reversed(x)) for x in tuples]", "out": "リスト内包記法 変換"}
{"in": "dicts = [dict(zip(fields, d)) for d in data]", "out": "辞書内包記法"}
{"in": "os.chdir('C:\\\\Users\\\\me\\\\Documents')", "out": "ユニコード"}
{"in": "return '\\n'.join(trimmed)", "out": "リストの文字列化"}
{"in": "sum(len(word) for word in wordslist)", "out": "リスト内包記法 変換"}
{"in": "\"\"\"\"\"\".join(hashlist)", "out": "リストの文字列化"}
{"in": "return sum(num for num in numbers if num % 2 == 1)", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('([A-Z])', ' \\\\1', s).split()", "out": "正規表現"}
{"in": "return scipy.signal.fftconvolve(im1_gray, im2_gray[::-1, ::-1], mode='same')", "out": "逆順の列"}
{"in": "dict_with_ints = dict((k, int(v)) for k, v in dict_with_strs.items())", "out": "辞書内包記法"}
{"in": "[k for k, v in list(self.__class__.__dict__.items()) if type(v) is property]", "out": "辞書内包記法"}
{"in": "print(my_list[1::2])", "out": "ひとつおきの列"}
{"in": "not any(not isinstance(y, int) for y in [1, 2, 3])", "out": "リスト内包記法 変換"}
{"in": "return Frog(**fields)", "out": "引数展開"}
{"in": "[(0 if i < 0 else i) for i in a]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "[child for child in soup.td.children if isinstance(child, str)]", "out": "リスト内包記法 フィルタ"}
{"in": "[f for f in list(globals().values()) if inspect.isfunction(f)]", "out": "リスト内包記法 フィルタ"}
{"in": "outputstr = ','.join(inputstr)", "out": "リストの文字列化"}
{"in": "re.sub('\\\\B', '-', string)", "out": "正規表現"}
{"in": "return ' '.join(content[:length + 1].split(' ')[0:-1]) + suffix", "out": "リストの文字列化"}
{"in": "dict((x, data.count(x)) for x in data)", "out": "辞書内包記法"}
{"in": "return B in (A[i:i + len(B)] for i in range(len(A)))", "out": "リスト内包記法 変換"}
{"in": "dt = datetime.datetime.strptime(entity2['a'], '%Y-%m-%d %H:%M:%S.%f')", "out": "日付書式 時刻書式"}
{"in": "letters[::-1].replace(';', ' & ', 1)[::-1].replace(';', ', ')", "out": "逆順の列"}
{"in": "[k for k, v in G.out_degree().items() if v > 0]", "out": "リスト内包記法 フィルタ"}
{"in": "f.write(struct.pack('<' + 'B' * len(bytes), *bytes))", "out": "引数展開"}
{"in": "data.columns = [x.lower() for x in data.columns]", "out": "リスト内包記法 変換"}
{"in": "[''.join(s) for s in p]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "[doSomethingWith(ch) for ch in s]", "out": "リスト内包記法 変換"}
{"in": "print(', '.join(str(item) for item in s))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "num = int(''.join(map(str, numList)))", "out": "リストの文字列化"}
{"in": "d = datetime.datetime.strptime('2013-03-31', '%Y-%m-%d')", "out": "日付書式"}
{"in": "max([a for a in yourlist if a[2] >= 100], key=itemgetter(1))", "out": "リスト内包記法 フィルタ"}
{"in": "globals()['fullName'](**argsdict)", "out": "引数展開"}
{"in": "\"\"\"<br/>\"\"\".join(':: '.join(_) for _ in list(mydict.items()))", "out": "辞書内包記法 リストの文字列化"}
{"in": "[''.join(islice(it, k)) for k in keys]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "print('%.6s' % ('%.4f' % n))", "out": "少数点表示制限"}
{"in": "\"\"\",\"\"\".join(map(str, l))", "out": "リストの文字列化"}
{"in": "ax.plot(x, 2 * x ** 2, color='b', label='t = 50')", "out": "累乗演算子"}
{"in": "print(getFiletime(13024882639633631).strftime('%a, %d %B %Y %H:%M:%S %Z'))", "out": "日付書式 時刻書式"}
{"in": "print('{0} {1} {2}'.format(*x))", "out": "引数展開"}
{"in": "print(time.strptime(line, '%d/%b/%Y:%H:%M:%S'))", "out": "日付書式 時刻書式"}
{"in": "[(m.start(0), m.end(0)) for m in re.finditer('(AA+B+)|(ABB+)', data)]", "out": "リスト内包記法 変換 正規表現"}
{"in": "sum(1 for _ in re.finditer('(?=11)', text))", "out": "リスト内包記法 変換 正規表現"}
{"in": "array = np.array([int(x) for x in s.split('|')])", "out": "リスト内包記法 変換"}
{"in": "temp_list = [i for i in squares()]", "out": "リスト内包記法 変換"}
{"in": "mask1 &= ~mask2", "out": "反転演算子"}
{"in": "return (idx[1::2] - idx[::2]).max()", "out": "ひとつおきの列"}
{"in": "uniq = [x for x in a if x not in seen and not seen.add(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "l = [1, 2, 3, 4, 5]\nsum(i * i for i in l)", "out": "リスト内包記法 変換"}
{"in": "w.writerow([d[k] for k in fieldnames])", "out": "リスト内包記法 変換"}
{"in": "matches = [x for x in a if x in str]", "out": "リスト内包記法 フィルタ"}
{"in": "s = 'badcfe'\n\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "filtered_objs = [obj for obj in objs if 'b' in obj['categories']]", "out": "リスト内包記法 フィルタ"}
{"in": "y[:][::2]", "out": "ひとつおきの列"}
{"in": "commands[com](*args)", "out": "引数展開"}
{"in": "return dict(zip(tokens[0::2], tokens[1::2]))", "out": "ひとつおきの列"}
{"in": "valid = re.match('^[\\\\w-]+$', str) is not None", "out": "正規表現"}
{"in": "a[2] = 'm'\nprint(''.join(a))", "out": "リストの文字列化"}
{"in": "regex = re.compile('[%s]' % re.escape(string.punctuation))", "out": "正規表現"}
{"in": "y = 3 * x ** 2 + 5 + 2 * np.sin(x)", "out": "累乗演算子"}
{"in": "re.findall('\"\\\\s*([^\"]*?)\\\\s*\"', x)", "out": "正規表現"}
{"in": "values = [d[k] for k in keys]", "out": "リスト内包記法 変換"}
{"in": "{v: k for k, vs in list(extension_to_type_mapping.items()) for v in vs}", "out": "辞書内包記法"}
{"in": "\"\"\"\t\"\"\".join(str(x) for x in nums)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "map = [[a, b] for a, b in map if a > 0 and b > 0]", "out": "リスト内包記法 フィルタ"}
{"in": "re.sub('\\\\ba\\\\+\\\\s', 'aplus ', 'a+b')", "out": "正規表現"}
{"in": "records.update((k, 0) for k, v in records.items() if v is None)", "out": "リスト内包記法 フィルタ"}
{"in": "(object['value'] for object in test_data)", "out": "リスト内包記法 変換"}
{"in": "~a.any(axis=1)", "out": "反転演算子"}
{"in": "super(MyModelForm, self).__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "a = array('i', (int(val) for row in stdin for val in row.split()))", "out": "リスト内包記法 変換"}
{"in": "re.search('\\\\b[a-z]{2}\\\\b', subject, re.I)", "out": "正規表現"}
{"in": "re.findall('\\\\d+|\\\\D+', s)", "out": "正規表現"}
{"in": "print(' '.join(str(i) for i in x))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "d = [(0.25 * math.sin(math.radians(i))) for i in range(0, 1024)]", "out": "リスト内包記法 変換"}
{"in": "m = re.search(reg, s)", "out": "正規表現"}
{"in": "return ''.join(reversed(result))", "out": "リストの文字列化"}
{"in": "b = [i for i in itertools.chain(*[(1, 3), (5, 4)])]", "out": "リスト内包記法 変換 引数展開"}
{"in": "ffi.cdef('void (*const some_callback)();')", "out": "引数展開"}
{"in": "re.compile('[A-Za-z_][A-Za-z0-9_]*')", "out": "正規表現"}
{"in": "colors[:] = [c for c in colors if c != 'green']", "out": "リスト内包記法 フィルタ"}
{"in": "a = [x for x in names if any(pat in x for pat in pattern)]", "out": "リスト内包記法 フィルタ"}
{"in": "my_list_sortable = [(x or '') for x in my_list]", "out": "リスト内包記法 変換"}
{"in": "output = [int(x) for x in '{:08b}'.format(input)]", "out": "辞書内包記法"}
{"in": "[(not i) for i in mylist]", "out": "リスト内包記法 変換"}
{"in": "map(lambda s: ' '.join([reps.get(w, w) for w in s.split()]), li)", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "seaborn.voilinplot(ax=ax, data=df, **violin_options)", "out": "引数展開"}
{"in": "[x for y in zip(list, list) for x in y]", "out": "リスト内包記法 変換"}
{"in": "re.sub('([a-zA-Z_]+)', '\"\\\\1\"', '{foo:3, bar:4}')", "out": "正規表現"}
{"in": "imgtag = re.match('<img.*?>', line)", "out": "正規表現"}
{"in": "timeit.timeit('s if type(s) is str else str(s)', \"s = ''\")", "out": "三項演算子"}
{"in": "print('sum of 1st items = %d' % sum([float(v[0]) for v in list(dictData.values())]))", "out": "辞書内包記法"}
{"in": "filename = sys.argv[-1]", "out": "末尾の要素"}
{"in": "f.write('\\n'.join(' '.join(str(x) for x in tu) for tu in lot))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "admin.site.register(*model)", "out": "引数展開"}
{"in": "\"\"\"-\"\"\".join(a + b for a, b in zip_longest(s[::2], s[1::2], fillvalue=''))", "out": "リスト内包記法 変換 リストの文字列化 ひとつおきの列"}
{"in": "[str(item) for item in ['accelerate', 'acute', 'bear', 'big']]", "out": "リスト内包記法 変換"}
{"in": "re.sub('\\\\s(\\\\d)', repl, '1 2 3')", "out": "正規表現"}
{"in": "list(k for k, g in itertools.groupby(numbers))", "out": "リスト内包記法 変換"}
{"in": "re.sub('^\\\\s+', '', s)", "out": "正規表現"}
{"in": "next(i for i, value in gen if value == 'a')", "out": "リスト内包記法 フィルタ"}
{"in": "\"\"\",\"\"\".join(re.findall('([\\\\+-]\\\\d+\\\\.\\\\d+)', str))", "out": "正規表現 リストの文字列化"}
{"in": "print(' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2)))", "out": "リストの文字列化"}
{"in": "print([ele for ele in map(lambda x: x.strip(', '), i.split(\"'\")) if ele])", "out": "リスト内包記法 フィルタ"}
{"in": "(OrderedDict(row) for i, row in df.iterrows())", "out": "リスト内包記法 変換"}
{"in": "\"\"\"{} --> | {:>10} | {:>10} | {:>10} |\"\"\".format(*bounds)", "out": "引数展開"}
{"in": "result = re.sub('[a-z]([A-Z])', '-\\\\1', inputstring).lower()", "out": "正規表現"}
{"in": "hex_list = ['{:02x}'.format(ord(c)) for c in fp.read()]", "out": "辞書内包記法"}
{"in": "[[ix.upper() for ix in x] for x in nested_list]", "out": "リスト内包記法 変換"}
{"in": "s[-1].isdigit()", "out": "末尾の要素"}
{"in": "pd.Series(*zip(*((b, a) for a, b in data)))", "out": "リスト内包記法 変換 引数展開"}
{"in": "df.date_time.map(lambda x: x.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "re.split('\\\\.\\\\s*', s)", "out": "正規表現"}
{"in": "['_'.join(numind[i][0] + v for i, v in enumerate(c)) for c in combinations]", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "\"\"\"{:%H:%M:%S}\"\"\".format(nine_hours_from_now)", "out": "時刻書式"}
{"in": "{key: list(set(a[key]) - set(b.get(key, []))) for key in a}", "out": "辞書内包記法"}
{"in": "[flatten[int(i * 2)] for i in range(int(len(flatten) / 2))]", "out": "リスト内包記法 変換"}
{"in": "Fraction(*(0.25).as_integer_ratio())", "out": "引数展開"}
{"in": "np.may_share_memory(a, a[:, 1::2])", "out": "ひとつおきの列"}
{"in": "np.linspace(x[0], x[-1], 10)", "out": "末尾の要素"}
{"in": "print(re.findall(\"[\\\\w']+\", DATA))", "out": "正規表現"}
{"in": "[(s % x) for x in itertools.product(l1, l2)]", "out": "リスト内包記法 変換"}
{"in": "print(re.search(find, l).group(0))", "out": "正規表現"}
{"in": "return bool(re.search('\\\\d', inputString))", "out": "正規表現"}
{"in": "print(''.join(map(str, l)))", "out": "リストの文字列化"}
{"in": "re.match('^cat$\\\\ndog', s).group(0)", "out": "正規表現"}
{"in": "print([(a + b + c) for a, b, c in zip(*([iter(nums)] * 3))])", "out": "リスト内包記法 変換 引数展開"}
{"in": "re.search('**%s+pattern**' % some_variable, str_for_pattern_match, flags)", "out": "正規表現"}
{"in": "{data[k].append(v) for k, v in list(line_dict.items())}", "out": "辞書内包記法"}
{"in": "return [s[i:j] for i in range(length) for j in range(i + 1, length + 1)]", "out": "リスト内包記法 変換"}
{"in": "f.write(' '.join([' '.join(v) for v in sent]) + '\\n')", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "my_func(*my_list)", "out": "引数展開"}
{"in": "pprint([cities[i] for i in [37810, 15755, 16276]])", "out": "リスト内包記法 変換"}
{"in": "np.dot(a, b) == np.tensordot(a, b, axes=([-1], [2]))", "out": "末尾の要素"}
{"in": "lcmm(*list(range(1, 21)))", "out": "引数展開"}
{"in": "list = [i.strip('0') for i in listOfNum]", "out": "リスト内包記法 変換"}
{"in": "list([_f for _f in re.split('([.,]+(?:\\\\s+[.,]+)*)|\\\\s', s) if _f])", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "new_str = ' '.join(word[::-1] for word in reordered)", "out": "リスト内包記法 変換 リストの文字列化 逆順の列"}
{"in": "re.sub('(\\\\d+)p(\\\\d+)', '\\\\1.\\\\2', out_info)", "out": "正規表現"}
{"in": "matrix = [list(line.strip()) for line in matrixfile]", "out": "リスト内包記法 変換"}
{"in": "[x for x in library if terms.issubset(x)]", "out": "リスト内包記法 フィルタ"}
{"in": "func(xdata, *popt).reshape(-1, len(xdata)).T", "out": "引数展開"}
{"in": "return np.argsort(a)[::-1][:N]", "out": "逆順の列"}
{"in": "re.sub('[^a-zA-Z0-9: ]', '', x)", "out": "正規表現"}
{"in": "re.sub('[\\\\W_]+', '', sall)", "out": "正規表現"}
{"in": "print([type(x) for x in htmldata])", "out": "リスト内包記法 変換"}
{"in": "\"\"\", \"\"\".join(set_3)", "out": "リストの文字列化"}
{"in": "(dict(zip(keys, row)) for row in zip(nums, chars))", "out": "辞書内包記法"}
{"in": "re.findall('-(?P<one>\\\\w+)', match.group('all'))", "out": "正規表現"}
{"in": "l = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 0)]\n[sum(x) for x in zip(*l)]", "out": "リスト内包記法 変換 引数展開"}
{"in": "any(1 in x for x in d)", "out": "リスト内包記法 変換"}
{"in": "df['time'] = df['datetime'].apply(lambda x: x.strftime('%H%M%S'))", "out": "時刻書式"}
{"in": "print([n for n in range(len(text)) if text.find('ll', n) == n])", "out": "リスト内包記法 フィルタ"}
{"in": "pattern = re.compile('(.+?)\\\\1+')\n[match.group(0) for match in pattern.finditer('44442(2)2(2)44')]", "out": "リスト内包記法 変換 正規表現"}
{"in": "pdb.Pdb.interaction(self, *args, **kwargs)", "out": "引数展開"}
{"in": "return self.func(*args, **kwargs)", "out": "引数展開"}
{"in": "list(itertools.chain(*[([k] * v) for k, v in sorted(d.items())]))", "out": "リスト内包記法 変換 引数展開"}
{"in": "bool(re.match(pattern, '10000'))", "out": "正規表現"}
{"in": "answer = [len(item) for item in [_f for _f in re.split('[^1]+', test_string) if _f]]", "out": "リスト内包記法 フィルタ 正規表現"}
{"in": "x[~np.any(np.isnan(x), axis=1)]", "out": "反転演算子"}
{"in": "return min(itertools.product(*lists), key=distance)", "out": "引数展開"}
{"in": "\"\"\"\"\"\".join(''.join(list(group)[:2]) for unused, group in groupby(s))", "out": "リスト内包記法 変換 リストの文字列化"}
{"in": "groups_no_a = [group for group in groups if a.isdisjoint(group)]", "out": "リスト内包記法 フィルタ"}
{"in": "CHOICES = [(i, i) for i in range(11)]", "out": "リスト内包記法 変換"}
{"in": "[re.match('(?:[A-Za-z]:)?\\\\\\\\?([^\\\\\\\\]+)', p).groups()[0] for p in paths]", "out": "リスト内包記法 変換 正規表現"}
{"in": "super().__init__(*args, **kwargs)", "out": "引数展開"}
{"in": "[seq for seq in dna_list if get_long(seq, 3)]", "out": "リスト内包記法 フィルタ"}
{"in": "self.response.out.write(simplejson.dumps([p.to_dict() for p in photos]))", "out": "辞書内包記法"}
{"in": "[(lambda : x) for x in [1, 5, 7, 3]][1]", "out": "リスト内包記法 変換"}
{"in": "os.path.expanduser('~')", "out": "反転演算子"}
{"in": "df[~((df['Last Name, First Name'] == 'Reid, Mark and Connie') & (df[\n    'Actual Sale Date'] == '3/8/2015'))]", "out": "反転演算子"}
{"in": "some = namedtuple('some', set(k for k in list(d.keys()) for d in dl))", "out": "リスト内包記法 変換"}
{"in": "out = [(1 if num & 1 << bits - 1 - n else 0) for n in range(bits)]", "out": "リスト内包記法 フィルタ 三項演算子"}
{"in": "max(i + 1 for i in range(20) if n % (2 << i) == 0)", "out": "リスト内包記法 フィルタ"}
{"in": "dates.apply(lambda x: x.strftime('%Y-%m-%d'))", "out": "日付書式"}
{"in": "new_data = [float(n) for n in data]", "out": "リスト内包記法 変換"}
